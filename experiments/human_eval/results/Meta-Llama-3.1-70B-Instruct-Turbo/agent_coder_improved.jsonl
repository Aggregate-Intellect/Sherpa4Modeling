{"task_id": "HumanEval/0", "completion": "\n    for idx, elem in enumerate(numbers):\n        for idx2, elem2 in enumerate(numbers):\n            if idx != idx2:\n                distance = abs(elem - elem2)\n                if distance < threshold:\n                    return True\n\n    return False\n"}
{"task_id": "HumanEval/1", "completion": "\n    # Remove spaces from the input string\n    paren_string = paren_string.replace(' ', '')\n\n    # Initialize variables\n    result = []\n    current_string = ''\n    current_depth = 0\n\n    # Iterate over each character in the input string\n    for char in paren_string:\n        if char == '(':\n            # If the character is an open parenthesis, increment the depth counter and append the character to the current string\n            current_depth += 1\n            current_string += char\n        elif char == ')':\n            # If the character is a close parenthesis, decrement the depth counter and append the character to the current string\n            current_depth -= 1\n            current_string += char\n\n            # If the depth counter reaches zero, it means a group of parentheses is complete\n            if current_depth == 0:\n                # Append the current string to the result list and reset the current string\n                result.append(current_string)\n                current_string = ''\n\n    return result\n"}
{"task_id": "HumanEval/2", "completion": "\n    integer_part = int(number)\n    decimal_part = number - integer_part\n    return decimal_part\n"}
{"task_id": "HumanEval/3", "completion": "\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n\n    return False\n"}
{"task_id": "HumanEval/4", "completion": "\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n    # Calculate the mean of the numbers\n    mean_value = sum(numbers) / len(numbers)\n\n    # Calculate the sum of absolute deviations from the mean\n    sum_absolute_deviations = sum(abs(num - mean_value) for num in numbers)\n\n    # Calculate the mean absolute deviation\n    mad_value = sum_absolute_deviations / len(numbers)\n\n    # Return the mean absolute deviation\n    return mad_value\n"}
{"task_id": "HumanEval/5", "completion": "\n    result = []\n    \n    # Add the first number to the result list\n    if numbers:\n        result.append(numbers[0])\n\n    # Iterate through the rest of the numbers in the input list\n    for i in range(1, len(numbers)):\n        # Add the delimiter to the result list\n        result.append(delimeter)\n        \n        # Add the current number to the result list\n        result.append(numbers[i])\n\n    return result\n\n"}
{"task_id": "HumanEval/6", "completion": "\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n\n    groups = paren_string.split()  # Split the input string into individual groups\n    max_nesting_levels = []  # Initialize a list to store the maximum nesting levels\n\n    for group in groups:\n        max_nesting_level = 0  # Initialize the maximum nesting level for the current group\n        current_nesting_level = 0  # Initialize the current nesting level for the current group\n\n        for char in group:\n            if char == '(':  # If the character is an opening parenthesis, increment the current nesting level\n                current_nesting_level += 1\n                max_nesting_level = max(max_nesting_level, current_nesting_level)  # Update the maximum nesting level if necessary\n            elif char == ')':  # If the character is a closing parenthesis, decrement the current nesting level\n                current_nesting_level -= 1\n\n        max_nesting_levels.append(max_nesting_level)  # Append the maximum nesting level for the current group to the result list\n\n    return max_nesting_levels\n"}
{"task_id": "HumanEval/7", "completion": "\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    filtered_list = []\n    for string in strings:\n        if substring in string:\n            filtered_list.append(string)\n    return filtered_list\n"}
{"task_id": "HumanEval/8", "completion": "\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n    total_sum = 0\n    total_product = 1\n\n    for num in numbers:\n        total_sum += num\n        total_product *= num\n\n    return (total_sum, total_product)\n"}
{"task_id": "HumanEval/9", "completion": "\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    if not numbers:\n        return []\n\n    result = [numbers[0]]\n    max_so_far = numbers[0]\n\n    for num in numbers[1:]:\n        if num > max_so_far:\n            max_so_far = num\n        result.append(max_so_far)\n\n    return result\n"}
{"task_id": "HumanEval/10", "completion": "\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n\n    for i in range(len(string), -1, -1):\n        suffix = string[i:]\n        if is_palindrome(suffix):\n            prefix = string[:i]\n            return string + prefix[::-1]\n\n    return string\n"}
{"task_id": "HumanEval/11", "completion": "\n    # Check if both strings have equal lengths\n    if len(a) != len(b):\n        raise ValueError(\"Both strings must have the same length\")\n\n    # Initialize empty result string\n    result = ''\n\n    # Iterate over characters in both strings simultaneously\n    for bit_a, bit_b in zip(a, b):\n        # Perform XOR operation on current bits and append result to the result string\n        result += str(int(bit_a) ^ int(bit_b))\n\n    return result\n"}
{"task_id": "HumanEval/12", "completion": "\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n\n    max_length = max(len(s) for s in strings)\n    longest_strings = [s for s in strings if len(s) == max_length]\n    return longest_strings[0]\n"}
{"task_id": "HumanEval/13", "completion": "\ndef greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    while b != 0:\n        a, b = b, a % b\n    return a\n"}
{"task_id": "HumanEval/14", "completion": "\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    result = []\n    prefix = ''\n    for char in string:\n        prefix += char\n        result.append(prefix)\n    return result\n\n# Alternatively, we can use list comprehension to make the code more concise\ndef all_prefixes_concise(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes_concise('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    return [string[:i+1] for i in range(len(string))]\n"}
{"task_id": "HumanEval/15", "completion": "\n    result = []\n    for i in range(n + 1):\n        result.append(str(i))\n    return ' '.join(result)\n"}
{"task_id": "HumanEval/16", "completion": "\ndef count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    unique_chars = set()\n    for char in string:\n        unique_chars.add(char.lower())\n    return len(unique_chars)\n"}
{"task_id": "HumanEval/17", "completion": "\n    legend = {\n        'o': 4,\n        'o|': 2,\n        '.|': 1\n    }\n\n    result = []\n    current_note = ''\n\n    for c in music_string:\n        if c == ' ':\n            if current_note in legend:\n                result.append(legend[current_note])\n            current_note = ''\n        else:\n            current_note += c\n\n    if current_note in legend:\n        result.append(legend[current_note])\n\n    return result\n"}
{"task_id": "HumanEval/18", "completion": "\n    count = 0\n    for i in range(len(string)):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count\n"}
{"task_id": "HumanEval/19", "completion": "\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\n\n    # Create a dictionary to map word representation to numerical value\n    num_dict = {\n        'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4,\n        'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9\n    }\n\n    # Split the input string into a list of words\n    num_list = numbers.split()\n\n    # Sort the list of words based on their numerical values\n    num_list.sort(key=lambda x: num_dict[x])\n\n    # Join the sorted list of words back into a string\n    result = ' '.join(num_list)\n\n    # Return the result\n    return result\n"}
{"task_id": "HumanEval/20", "completion": "\n    # Initialize minimum difference and the pair of numbers with minimum difference\n    min_diff = float('inf')  # Initialize with positive infinity\n    closest_pair = (numbers[0], numbers[1])\n\n    # Iterate over the list of numbers\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            # Calculate the absolute difference between the current pair of numbers\n            diff = abs(numbers[i] - numbers[j])\n\n            # If the current difference is less than the minimum difference found so far\n            if diff < min_diff:\n                # Update the minimum difference and the closest pair\n                min_diff = diff\n                closest_pair = (min(numbers[i], numbers[j]), max(numbers[i], numbers[j]))\n\n    # Return the closest pair of numbers\n    return closest_pair\n"}
{"task_id": "HumanEval/21", "completion": "\n    if len(numbers) < 2:\n        raise ValueError(\"Input list must have at least two elements\")\n\n    min_value = min(numbers)\n    max_value = max(numbers)\n    range_value = max_value - min_value\n    \n    rescaled_numbers = [(number - min_value) / range_value for number in numbers]\n    \n    return rescaled_numbers\n"}
{"task_id": "HumanEval/22", "completion": "\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    result = []\n    for value in values:\n        if isinstance(value, int):\n            result.append(value)\n    return result\n"}
{"task_id": "HumanEval/23", "completion": "\ndef strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n    length = 0\n    for char in string:\n        length += 1\n    return length\n"}
{"task_id": "HumanEval/24", "completion": "\ndef largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i\n    return 1\n"}
{"task_id": "HumanEval/25", "completion": "\n    factors = []\n    divisor = 2\n    while n > 1:\n        while n % divisor == 0:\n            n = n // divisor\n            factors.append(divisor)\n        divisor += 1\n    return factors\n"}
{"task_id": "HumanEval/26", "completion": "\n    seen_count = {}\n    result = []\n\n    for num in numbers:\n        if num in seen_count:\n            seen_count[num] += 1\n        else:\n            seen_count[num] = 1\n\n    for num in numbers:\n        if seen_count[num] == 1:\n            result.append(num)\n\n    return result\n"}
{"task_id": "HumanEval/27", "completion": "\n    result = \"\"\n\n    for char in string:\n        if char.islower():\n            result += char.upper()\n        elif char.isupper():\n            result += char.lower()\n        else:\n            result += char\n\n    return result\n"}
{"task_id": "HumanEval/28", "completion": "\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    result = ''\n    for string in strings:\n        result += string\n    return result\n"}
{"task_id": "HumanEval/29", "completion": "\nfrom typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n    filtered_strings = []\n    for string in strings:\n        if string.startswith(prefix):\n            filtered_strings.append(string)\n    return filtered_strings\n"}
{"task_id": "HumanEval/30", "completion": "\ndef get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    result = []\n    for num in l:\n        if num > 0:\n            result.append(num)\n    return result\n"}
{"task_id": "HumanEval/31", "completion": "\nimport math\n\ndef is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n"}
{"task_id": "HumanEval/32", "completion": "\n    if len(xs) % 2 != 0:\n        raise ValueError(\"List must have an even number of coefficients\")\n\n    if xs[-1] == 0:\n        raise ValueError(\"Largest coefficient must be non-zero\")\n\n    def derivative(xs: list):\n        \"\"\" Returns coefficients of the polynomial derivative \"\"\"\n        return [i * coeff for i, coeff in enumerate(xs) if i != 0]\n\n    def poly_derivative(xs: list, x: float):\n        \"\"\" Evaluates polynomial derivative with coefficients xs at point x \"\"\"\n        return sum([coeff * math.pow(x, i) for i, coeff in enumerate(derivative(xs))])\n\n    def newton_raphson(xs: list, x0: float, epsilon: float = 1e-5, max_iter: int = 1000):\n        \"\"\" Finds a root of the polynomial using Newton-Raphson method \"\"\"\n        x = x0\n        for _ in range(max_iter):\n            x_next = x - poly(xs, x) / poly_derivative(xs, x)\n            if abs(x_next - x) < epsilon:\n                return x_next\n            x = x_next\n        return x\n\n    # Start with an initial guess\n    x0 = 0.0\n    return newton_raphson(xs, x0)\n"}
{"task_id": "HumanEval/33", "completion": "\ndef sort_third(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"\n\n    third_elements = [l[i] for i in range(len(l)) if i % 3 == 0]\n    third_elements.sort()\n    result = []\n    index = 0\n    for i in range(len(l)):\n        if i % 3 == 0:\n            result.append(third_elements[index])\n            index += 1\n        else:\n            result.append(l[i])\n    return result\n"}
{"task_id": "HumanEval/34", "completion": "\ndef unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))\n"}
{"task_id": "HumanEval/35", "completion": "\ndef max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    if not l:  # Checks if the list is empty\n        return None  # Returns None if the list is empty\n    max_element = l[0]  # Initializes max_element with the first element of the list\n    for element in l:  # Iterate over the list\n        if element > max_element:  # If current element is greater than max_element\n            max_element = element  # Update max_element\n    return max_element  # Return max_element\n"}
{"task_id": "HumanEval/36", "completion": "\ndef fizz_buzz(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\n    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n"}
{"task_id": "HumanEval/37", "completion": "\ndef sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n    even_elements = [l[i] for i in range(0, len(l), 2)]\n    even_elements.sort()\n    result = []\n    even_idx = 0\n\n    for i, elem in enumerate(l):\n        if i % 2 == 0:\n            result.append(even_elements[even_idx])\n            even_idx += 1\n        else:\n            result.append(elem)\n\n    return result\n"}
{"task_id": "HumanEval/38", "completion": "\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # decycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n"}
{"task_id": "HumanEval/39", "completion": "\ndef is_prime(num: int) -> bool:\n    \"\"\"Helper function to check if number is prime\"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\n\ndef prime_fib(n: int):\n    \"\"\"\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> prime_fib(1)\n    2\n    >>> prime_fib(2)\n    3\n    >>> prime_fib(3)\n    5\n    >>> prime_fib(4)\n    13\n    >>> prime_fib(5)\n    89\n    \"\"\"\n    count = 0\n    fib_num = 0\n    prev = 1\n    curr = 1\n\n    while True:\n        if is_prime(curr) and curr != 0 and curr != 1:\n            count += 1\n\n        if count == n:\n            return curr\n\n        fib_num = prev\n        prev = curr\n        curr = fib_num + curr\n"}
{"task_id": "HumanEval/40", "completion": "\n    l.sort()\n    for i in range(len(l) - 2):\n        left, right = i + 1, len(l) - 1\n\n        while left < right:\n            total = l[i] + l[left] + l[right]\n            if total == 0:\n                return True\n            elif total < 0:\n                left += 1\n            else:\n                right -= 1\n\n    return False\n"}
{"task_id": "HumanEval/41", "completion": "\ndef car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n    # Calculate the number of pairs of cars that can be formed from the two sets\n    collisions = n * n\n    \n    # Return the number of collisions\n    return collisions\n"}
{"task_id": "HumanEval/42", "completion": "\ndef incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n    result = []\n    for elem in l:\n        result.append(elem + 1)\n    return result\n"}
{"task_id": "HumanEval/43", "completion": "\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False\n"}
{"task_id": "HumanEval/44", "completion": "\n    result = ''\n    while x > 0:\n        digit = x % base\n        x = x // base\n        result = str(digit) + result\n\n    return result if result != '' else '0'\n\n"}
{"task_id": "HumanEval/45", "completion": "\ndef triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    area = (a * h) / 2\n    return area\n"}
{"task_id": "HumanEval/46", "completion": "\ndef fib4(n: int):\n    \"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\n\n    # Handle edge cases where n < 0\n    if n < 0:\n        raise ValueError(\"n must be a non-negative integer\")\n\n    # Handle edge cases where n <= 3\n    if n <= 3:\n        if n == 0 or n == 1 or n == 3:\n            return 0\n        elif n == 2:\n            return 2\n\n    # Initialize the list to store fib4 values\n    fib4_values = [0] * (n + 1)\n    fib4_values[2] = 2  # Base case\n\n    # Calculate fib4 values iteratively\n    for i in range(4, n + 1):\n        fib4_values[i] = fib4_values[i - 1] + fib4_values[i - 2] + fib4_values[i - 3] + fib4_values[i - 4]\n\n    # Return the result\n    return fib4_values[n]\n"}
{"task_id": "HumanEval/47", "completion": "\n    # First, we need to sort the list in ascending order\n    sorted_list = sorted(l)\n\n    # Then, we find the length of the list\n    n = len(sorted_list)\n\n    # If the length of the list is even, the median is the average of the two middle numbers\n    if n % 2 == 0:\n        median = (sorted_list[n // 2 - 1] + sorted_list[n // 2]) / 2\n    # If the length of the list is odd, the median is the middle number\n    else:\n        median = sorted_list[n // 2]\n\n    return median\n"}
{"task_id": "HumanEval/48", "completion": "\n    text = ''.join(c for c in text if c.isalnum()).lower()  # Remove non-alphanumeric characters and convert to lowercase\n    left, right = 0, len(text) - 1  # Initialize two pointers, one at the start and one at the end of the string\n\n    while left < right:  # Continue until the pointers meet\n        if text[left] != text[right]:  # If the characters at the pointers are not equal, the string is not a palindrome\n            return False\n        left += 1  # Move the left pointer to the right\n        right -= 1  # Move the right pointer to the left\n\n    return True  # If the loop completes without finding any unequal characters, the string is a palindrome\n"}
{"task_id": "HumanEval/49", "completion": "\n    result = 1\n    base = 2\n\n    while n > 0:\n        if n % 2 == 1:\n            result = (result * base) % p\n        base = (base * base) % p\n        n = n // 2\n\n    return result\n"}
{"task_id": "HumanEval/50", "completion": "\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n"}
{"task_id": "HumanEval/51", "completion": "\ndef remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    \"\"\"\n    vowels = 'aeiouAEIOU'\n    return ''.join([char for char in text if char not in vowels])\n"}
{"task_id": "HumanEval/52", "completion": "\n    for num in l:\n        if num >= t:\n            return False\n\n    return True\n"}
{"task_id": "HumanEval/53", "completion": "\n    return x + y\n"}
{"task_id": "HumanEval/54", "completion": "\ndef same_chars(s0: str, s1: str):\n    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n    return set(s0) == set(s1)\n"}
{"task_id": "HumanEval/55", "completion": "\ndef fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"n must be a non-negative integer\")\n    elif n == 0 or n == 1:\n        return n\n\n    fib_sequence = [0, 1]\n    for i in range(2, n + 1):\n        next_fib = fib_sequence[i - 1] + fib_sequence[i - 2]\n        fib_sequence.append(next_fib)\n\n    return fib_sequence[-1]\n\n"}
{"task_id": "HumanEval/56", "completion": "\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n"}
{"task_id": "HumanEval/57", "completion": "\ndef monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    is_increasing = None\n\n    for i in range(len(l) - 1):\n        if l[i] < l[i + 1]:\n            if is_increasing is False:\n                return False\n            is_increasing = True\n        elif l[i] > l[i + 1]:\n            if is_increasing is True:\n                return False\n            is_increasing = False\n\n    return True\n"}
{"task_id": "HumanEval/58", "completion": "\ndef common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n    \"\"\"\n    set1 = set(l1)\n    set2 = set(l2)\n    common_elements = set1.intersection(set2)\n    sorted_common_elements = sorted(list(common_elements))\n    return sorted_common_elements\n"}
{"task_id": "HumanEval/59", "completion": "\nimport math\n\ndef largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n\n    def is_prime(num: int) -> bool:\n        \"\"\"Check if a number is prime.\"\"\"\n        i = 2\n        while i <= math.sqrt(num):\n            if num % i == 0:\n                return False\n            i += 1\n        return True\n\n    largest_factor = 1\n    i = 2\n    while i <= math.sqrt(n):\n        if is_prime(i):\n            while n % i == 0:\n                largest_factor = i\n                n //= i\n        i += 1\n\n    if n > 1:\n        largest_factor = n  # in case n is a prime number\n\n    return largest_factor\n"}
{"task_id": "HumanEval/60", "completion": "\n    result = 0\n    for i in range(1, n + 1):\n        result += i\n\n    return result\n"}
{"task_id": "HumanEval/61", "completion": "\ndef correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n\n    # Initialize a counter to keep track of the opening brackets\n    open_count = 0\n\n    # Iterate over each bracket in the string\n    for bracket in brackets:\n        # If the bracket is an opening bracket, increment the counter\n        if bracket == \"(\":\n            open_count += 1\n        # If the bracket is a closing bracket, decrement the counter\n        elif bracket == \")\":\n            # If the counter is already 0, that means there's a closing bracket without a matching opening bracket\n            if open_count == 0:\n                return False\n            open_count -= 1\n\n    # If the counter is 0 after iterating over all brackets, that means every opening bracket has a matching closing bracket\n    return open_count == 0\n"}
{"task_id": "HumanEval/62", "completion": "\ndef derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n    return [i * x for i, x in enumerate(xs) if i != 0]\n"}
{"task_id": "HumanEval/63", "completion": "\ndef fibfib(n: int):\n  \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  \"\"\"\n\n  if n <= 0:\n    return 0\n  if n == 1:\n    return 0\n  if n == 2:\n    return 1\n\n  dp = [0] * (n + 1)\n  dp[0] = 0\n  dp[1] = 0\n  dp[2] = 1\n\n  for i in range(3, n + 1):\n    dp[i] = dp[i-1] + dp[i-2] + dp[i-3]\n\n  return dp[n]\n"}
{"task_id": "HumanEval/64", "completion": "\n    s = s.lower()\n    count = 0\n    vowels = 'aeiou'\n\n    for char in s:\n        if char in vowels:\n            count += 1\n\n    if s[-1] == 'y':\n        count += 1\n\n    return count\n"}
{"task_id": "HumanEval/65", "completion": "\n    # Convert the integer into a string to easily access each digit\n    str_x = str(x)\n\n    # If shift is greater than the number of digits, return the digits reversed\n    if shift > len(str_x):\n        return str_x[::-1]\n\n    # Calculate the actual shift, considering cases where shift is greater than the number of digits\n    actual_shift = shift % len(str_x)\n\n    # Split the string into two parts at the shift position\n    first_part = str_x[-actual_shift:]\n    second_part = str_x[:-actual_shift]\n\n    # Combine the two parts in reverse order to get the circular shift\n    result = first_part + second_part\n\n    return result\n"}
{"task_id": "HumanEval/66", "completion": "\ndef digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\"\n    sum = 0\n    for char in s:\n        if char.isupper():\n            sum += ord(char)\n    return sum\n"}
{"task_id": "HumanEval/67", "completion": "\ndef fruit_distribution(s, n):\n    \"\"\"\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\n    # split the input string into parts based on the ' and ' substring\n    parts = s.split(' and ')\n\n    # extract the numbers from the strings\n    apples = int(parts[0].split(' ')[0])\n    oranges = int(parts[1].split(' ')[0])\n\n    # subtract the number of apples and oranges from the total number of fruits to get the number of mangoes\n    mangoes = n - apples - oranges\n\n    return mangoes\n\n# Chain of thought:\n# 1. Split the input string into parts to separate the numbers of apples and oranges.\n# 2. Extract the numbers from the strings.\n# 3. Subtract the number of apples and oranges from the total number of fruits to get the number of mangoes.\n"}
{"task_id": "HumanEval/68", "completion": "\n    smallest_even = float('inf')\n    smallest_even_index = -1\n\n    for i, num in enumerate(arr):\n        if num % 2 == 0 and num < smallest_even:\n            smallest_even = num\n            smallest_even_index = i\n\n    if smallest_even == float('inf'):\n        return []\n    else:\n        return [smallest_even, smallest_even_index]\n"}
{"task_id": "HumanEval/69", "completion": "\n    freq_dict = {}\n    for num in lst:\n        if num in freq_dict:\n            freq_dict[num] += 1\n        else:\n            freq_dict[num] = 1\n\n    max_num = -1\n    for num, freq in freq_dict.items():\n        if freq >= num and num > max_num:\n            max_num = num\n\n    return max_num\n"}
{"task_id": "HumanEval/70", "completion": "\n    result = []\n    while lst:\n        result.append(min(lst))\n        lst.remove(min(lst))\n        if lst:\n            result.append(max(lst))\n            lst.remove(max(lst))\n    return result\n"}
{"task_id": "HumanEval/71", "completion": "\ndef triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''\n    # Check if the sides form a valid triangle\n    # The sum of any two sides must be greater than the third side\n    is_valid_triangle = (a + b > c) and (a + c > b) and (b + c > a)\n    \n    # If the sides form a valid triangle, calculate the area\n    if is_valid_triangle:\n        # Use Heron's formula to calculate the area\n        # First calculate the semi-perimeter\n        s = (a + b + c) / 2\n        # Then calculate the area\n        area = (s*(s-a)*(s-b)*(s-c)) ** 0.5\n        # Return the area rounded to 2 decimal places\n        return round(area, 2)\n    else:\n        # If the sides do not form a valid triangle, return -1\n        return -1\n"}
{"task_id": "HumanEval/72", "completion": "\n    # Check if the list is palindromic\n    is_balanced = q == q[::-1]\n    \n    # Calculate the sum of the elements in the list\n    total_weight = sum(q)\n    \n    # Check if the sum of the elements is less than or equal to the maximum possible weight\n    is_within_weight_limit = total_weight <= w\n    \n    # Return True if the object is balanced and within the weight limit, False otherwise\n    return is_balanced and is_within_weight_limit\n"}
{"task_id": "HumanEval/73", "completion": "\ndef smallest_change(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n    count = 0\n    start_index = 0\n    end_index = len(arr) - 1\n\n    while start_index < end_index:\n        if arr[start_index] != arr[end_index]:\n            count += 1\n        start_index += 1\n        end_index -= 1\n\n    return count\n"}
{"task_id": "HumanEval/74", "completion": "\n    def total_match(lst1, lst2):\n        total_chars_lst1 = sum(len(string) for string in lst1)\n        total_chars_lst2 = sum(len(string) for string in lst2)\n\n        if total_chars_lst1 <= total_chars_lst2:\n            return lst1\n        else:\n            return lst2\n"}
{"task_id": "HumanEval/75", "completion": "\nfunction is_multiply_prime(a):\n    function is_prime(n):\n        if n is less than 2:\n            return false\n        for i from 2 to square root of n:\n            if n is divisible by i:\n                return false\n        return true\n\n    prime_numbers = []\n    for i from 2 to cube root of a:\n        if is_prime(i):\n            add i to prime_numbers\n\n    for p1 in prime_numbers:\n        for p2 in prime_numbers:\n            for p3 in prime_numbers:\n                if p1 * p2 * p3 equals a:\n                    return true\n\n    return false\n"}
{"task_id": "HumanEval/76", "completion": "\ndef is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n\n    max_limit = 100\n    for i in range(max_limit):\n        if n ** i == x:\n            return True\n    return False\n"}
{"task_id": "HumanEval/77", "completion": "\ndef iscube(a):\n    \"\"\"\n    This function determines if a given integer is a cube of another integer.\n    \n    Parameters:\n    a (int): The input integer to be checked.\n    \n    Returns:\n    bool: True if the integer is a cube of another integer, False otherwise.\n    \"\"\"\n    # Calculate the cube root of the absolute value of the input integer\n    cube_root = round(abs(a) ** (1/3))\n    \n    # Check if the cube of the calculated cube root is equal to the absolute value of the input integer\n    if cube_root ** 3 == abs(a):\n        # If they are equal, return True\n        return True\n    else:\n        # If they are not equal, return False\n        return False\n"}
{"task_id": "HumanEval/78", "completion": "\n    prime_hex_digits = ['2', '3', '5', '7', 'B', 'D']\n    return sum(1 for digit in num if digit in prime_hex_digits)\n\n"}
{"task_id": "HumanEval/79", "completion": "\ndef decimal_to_binary(decimal):\n    \"\"\"You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)   # returns \"db100000db\"\n    \"\"\"\n    binary = bin(decimal)[2:]  # Convert decimal to binary and remove '0b' prefix\n    result = 'db' + binary + 'db'  # Add 'db' at the beginning and end\n    return result\n\n"}
{"task_id": "HumanEval/80", "completion": "\ndef is_happy(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n    return True\n"}
{"task_id": "HumanEval/81", "completion": "\n    result = []\n    for grade in grades:\n        if grade >= 4.0:\n            result.append('A+')\n        elif grade > 3.7:\n            result.append('A')\n        elif grade > 3.3:\n            result.append('A-')\n        elif grade > 3.0:\n            result.append('B+')\n        elif grade > 2.7:\n            result.append('B')\n        elif grade > 2.3:\n            result.append('B-')\n        elif grade > 2.0:\n            result.append('C+')\n        elif grade > 1.7:\n            result.append('C')\n        elif grade > 1.3:\n            result.append('C-')\n        elif grade > 1.0:\n            result.append('D+')\n        elif grade > 0.7:\n            result.append('D')\n        elif grade > 0.0:\n            result.append('D-')\n        else:\n            result.append('E')\n\n    return result\n"}
{"task_id": "HumanEval/82", "completion": "\nimport math\n\ndef prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\"\n    length = len(string)\n    if length <= 1:\n        return False\n    else:\n        for num in range(2, int(math.sqrt(length)) + 1):\n            if length % num == 0:\n                return False\n        return True\n"}
{"task_id": "HumanEval/83", "completion": "\ndef starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    total_count = 9 * (10 ** (n - 1))\n    start_with_one_count = 1 * (10 ** (n - 1))\n    end_with_one_count = 9 * (10 ** (n - 2)) * 1\n    start_and_end_with_one_count = 1 * (10 ** (n - 2)) * 1\n    result = start_with_one_count + end_with_one_count - start_and_end_with_one_count\n    return result\n"}
{"task_id": "HumanEval/84", "completion": "\ndef solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n\n    binary_N = bin(N)[2:]  # Convert N to binary and remove the '0b' prefix\n    sum_of_digits = sum(int(digit) for digit in binary_N)  # Calculate the sum of the digits in the binary representation\n    binary_sum = bin(sum_of_digits)[2:]  # Convert the sum back to binary and remove the '0b' prefix\n    return binary_sum\n\n"}
{"task_id": "HumanEval/85", "completion": "\n    result = 0\n    for idx, elem in enumerate(lst):\n        if idx % 2 != 0 and elem % 2 == 0:\n            result += elem\n\n    return result\n"}
{"task_id": "HumanEval/86", "completion": "\n    words = s.split(' ')\n    ordered_words = []\n\n    for word in words:\n        # Separate punctuation from the word\n        punctuation = ''\n        while word and not word[-1].isalnum():\n            punctuation = word[-1] + punctuation\n            word = word[:-1]\n\n        # Order the characters in the word\n        ordered_word = ''.join(sorted(word))\n\n        # Add the punctuation back to the word\n        ordered_word += punctuation\n\n        ordered_words.append(ordered_word)\n\n    return ' '.join(ordered_words)\n"}
{"task_id": "HumanEval/87", "completion": "\n    result = []\n    for i, row in enumerate(lst):\n        for j, elem in enumerate(reversed(row)):\n            if elem == x:\n                result.append((i, len(row) - j - 1))\n\n    result.sort(key=lambda x: (x[0], -x[1]))\n    return result\n"}
{"task_id": "HumanEval/88", "completion": "\n    # Check if the array is empty\n    if not array:\n        return array\n\n    # Calculate the sum of the first and last index values\n    sum_of_first_and_last = array[0] + array[-1]\n\n    # If the sum is odd, sort the array in ascending order\n    if sum_of_first_and_last % 2 != 0:\n        return sorted(array)\n    # If the sum is even, sort the array in descending order\n    else:\n        return sorted(array, reverse=True)\n"}
{"task_id": "HumanEval/89", "completion": "\ndef encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\"\n\n    result = \"\"\n    shift = 2 * 2\n    for c in s:\n        if c.isalpha():\n            ascii_offset = 65 if c.isupper() else 97\n            result += chr((ord(c) - ascii_offset + shift) % 26 + ascii_offset)\n        else:\n            result += c\n    return result\n"}
{"task_id": "HumanEval/90", "completion": "\ndef next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    This function returns the 2nd smallest element of the list.\n    Returns None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    # Remove duplicates from the list by converting it to a set\n    unique_lst = set(lst)\n    \n    # If the list has less than two unique elements, return None\n    if len(unique_lst) < 2:\n        return None\n    \n    # Sort the list in ascending order\n    sorted_lst = sorted(unique_lst)\n    \n    # Return the second smallest element\n    return sorted_lst[1]\n"}
{"task_id": "HumanEval/91", "completion": "\nimport re\n\ndef is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n\n    # Split the input string into sentences based on '.', '?' or '!'.\n    sentences = re.split('(?<=[.!?]) +', S)\n\n    # Initialize a counter to store the number of boredoms.\n    boredom_count = 0\n\n    # For each sentence:\n    for sentence in sentences:\n        # Remove leading and trailing spaces.\n        sentence = sentence.strip()\n        \n        # Check if the sentence starts with the word \"I\".\n        if sentence and sentence.lower().startswith('i'):\n            # If it does, increment the boredom counter.\n            boredom_count += 1\n\n    # Return the boredom counter.\n    return boredom_count\n"}
{"task_id": "HumanEval/92", "completion": "\ndef any_int(x, y, z):\n    # Check if all three numbers are integers.\n    if not all(isinstance(i, int) for i in (x, y, z)):\n        return False\n\n    # Check if the sum of two numbers is equal to the third number.\n    if x == y + z or y == x + z or z == x + y:\n        return True\n\n    # If none of the conditions are met, return False.\n    return False\n"}
{"task_id": "HumanEval/93", "completion": "\n    vowels = 'aeiouAEIOU'\n    shifted_vowels = 'cdeoCDEO'\n    encoded_message = ''\n\n    for char in message:\n        if char.isalpha():\n            if char in vowels:\n                encoded_message += shifted_vowels[vowels.index(char)]\n            else:\n                encoded_message += char.swapcase()\n        else:\n            encoded_message += char\n\n    return encoded_message\n"}
{"task_id": "HumanEval/94", "completion": "\ndef is_prime(n: int) -> bool:\n    \"\"\"Check if a number is prime.\"\"\"\n    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    max_divisor = int(n**0.5) + 1\n    for d in range(3, max_divisor, 2):\n        if n % d == 0:\n            return False\n    return True\n\ndef sum_of_digits(n: int) -> int:\n    \"\"\"Calculate the sum of digits of a number.\"\"\"\n    return sum(int(digit) for digit in str(n))\n\ndef skjkasdkd(lst: list[int]) -> int:\n    \"\"\"Find the largest prime value in the list and return the sum of its digits.\"\"\"\n    max_prime = max((x for x in lst if is_prime(x)), default=0)\n    return sum_of_digits(max_prime)\n\n# Test cases\nprint(skjkasdkd([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]))  # Output: 10\nprint(skjkasdkd([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]))  # Output: 25\nprint(skjkasdkd([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]))  # Output: 13\nprint(skjkasdkd([0,724,32,71,99,32,6,0,5,91,83,0,5,6]))  # Output: 11\nprint(skjkasdkd([0,81,12,3,1,21]))  # Output: 3\nprint(skjkasdkd([0,8,1,2,1,7]))  # Output: 7\n"}
{"task_id": "HumanEval/95", "completion": "\n    if not dict:\n        return False\n    \n    first_key = next(iter(dict))\n    \n    # check if all keys are strings\n    if not all(isinstance(key, str) for key in dict):\n        return False\n    \n    # check if all keys are in the same case as the first key\n    if first_key.islower():\n        return all(key.islower() for key in dict)\n    elif first_key.isupper():\n        return all(key.isupper() for key in dict)\n    else:\n        return False\n"}
{"task_id": "HumanEval/96", "completion": "\ndef count_up_to(n):\n    \"\"\"Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1) => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\n    prime_numbers = []\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, int(i ** 0.5) + 1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            prime_numbers.append(i)\n    return prime_numbers\n"}
{"task_id": "HumanEval/97", "completion": "\ndef multiply(a, b):\n    \"\"\"Complete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n    def get_unit_digit(n):\n        return abs(n) % 10\n\n    unit_digit_a = get_unit_digit(a)\n    unit_digit_b = get_unit_digit(b)\n    product = unit_digit_a * unit_digit_b\n    return product\n"}
{"task_id": "HumanEval/98", "completion": "\n    count = 0\n    vowels = 'AEIOU'\n    s = s.replace(' ', '')\n\n    for i in range(len(s)):\n        if i % 2 == 0 and s[i] in vowels:\n            count += 1\n\n    return count\n\n"}
{"task_id": "HumanEval/99", "completion": "\nfrom decimal import Decimal, ROUND_HALF_UP\n\n\ndef closest_integer(value):\n    \"\"\"Return the closest integer to the given float.\n    If the float is equidistant from two integers, round it away from zero.\n    \n    Parameters\n    ----------\n    value : str\n        A string representing a float.\n\n    Returns\n    -------\n    int\n        The closest integer to the given float.\n    \"\"\"\n\n    # Chain-of-Thought approach:\n    # 1. Convert the input string to a float\n    # 2. Use the Decimal module's quantize function to round the float to the nearest integer\n    #   - We use ROUND_HALF_UP to round away from zero\n    # 3. Convert the rounded Decimal object to an integer and return it\n\n    decimal_value = Decimal(value)\n    rounded_value = decimal_value.quantize(Decimal('1'), rounding=ROUND_HALF_UP)\n    return int(rounded_value)\n"}
{"task_id": "HumanEval/100", "completion": "\ndef make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n\n    result = [n]\n    for i in range(1, n):\n        if n % 2 != 0:\n            n += 2\n        else:\n            if result[i-1] % 2 != 0:\n                n += 1\n            else:\n                n += 2\n        result.append(n)\n    return result\n"}
{"task_id": "HumanEval/101", "completion": "\n    return s.replace(',', ' ').split()\n"}
{"task_id": "HumanEval/102", "completion": "\n    # Check if x is greater than y, if so, return -1\n    if x > y:\n        return -1\n\n    # Initialize the biggest even number to -1\n    biggest_even = -1\n\n    # Iterate over the range from x to y (inclusive)\n    for num in range(x, y + 1):\n        # Check if the current number is even\n        if num % 2 == 0:\n            # If the current number is even, update the biggest even number\n            biggest_even = num\n\n    # Return the biggest even number\n    return biggest_even\n"}
{"task_id": "HumanEval/103", "completion": "\n    # First, check if n is greater than m. If true, return -1 as per the problem statement.\n    if n > m:\n        return -1\n    \n    # Calculate the sum of integers from n to m using the formula for the sum of an arithmetic series.\n    total_sum = (m + n) * (m - n + 1) // 2\n    \n    # Calculate the average by dividing the sum by the number of integers (m - n + 1).\n    average = total_sum // (m - n + 1)\n    \n    # Round the average to the nearest integer. In this case, we're already doing integer division, so the average is already rounded.\n    \n    # Convert the rounded average to binary and return it.\n    return bin(average)\n\n# Example usage:\nprint(rounded_avg(1, 5))   # Output: \"0b11\"\nprint(rounded_avg(7, 5))   # Output: -1\nprint(rounded_avg(10, 20)) # Output: \"0b1111\"\nprint(rounded_avg(20, 33)) # Output: \"0b11010\"\n"}
{"task_id": "HumanEval/104", "completion": "\ndef unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n\n    def has_even_digit(n):\n        \"\"\"Check if a number has any even digit.\"\"\"\n        for digit in str(n):\n            if int(digit) % 2 == 0:\n                return True\n        return False\n\n    # Filter out numbers with even digits from the input list\n    result = [number for number in x if not has_even_digit(number)]\n\n    # Sort the result list in increasing order\n    result.sort()\n\n    return result\n"}
{"task_id": "HumanEval/105", "completion": "\ndef by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    :param arr: A list of integers\n    :return: A list of string names corresponding to the sorted and reversed digits\n    \"\"\"\n\n    # First, filter the array to include only digits between 1 and 9 inclusive\n    filtered_arr = [x for x in arr if 1 <= x <= 9]\n    \n    # Then, sort the filtered array in ascending order\n    sorted_arr = sorted(filtered_arr)\n    \n    # Next, reverse the sorted array\n    reversed_arr = sorted_arr[::-1]\n    \n    # Define a dictionary to map digits to their corresponding names\n    digit_to_name = {\n        1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\",\n        5: \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"\n    }\n    \n    # Finally, replace each digit in the reversed array with its corresponding name\n    result = [digit_to_name[x] for x in reversed_arr]\n    \n    return result\n"}
{"task_id": "HumanEval/106", "completion": "\ndef f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 60]\n    \"\"\"\n    result = []\n    \n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            # calculate factorial\n            factorial = 1\n            for j in range(1, i + 1):\n                factorial *= j\n            result.append(factorial)\n        else:\n            # calculate sum\n            total = 0\n            for j in range(1, i + 1):\n                total += j\n            result.append(total)\n    \n    return result\n"}
{"task_id": "HumanEval/107", "completion": "\n    def is_palindrome(num: int) -> bool:\n        \"\"\"Check if a number is a palindrome.\"\"\"\n        return str(num) == str(num)[::-1]\n\n    even_count = 0\n    odd_count = 0\n\n    for i in range(1, n + 1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n\n    return (even_count, odd_count)\n"}
{"task_id": "HumanEval/108", "completion": "\n    def digit_sum(num: int) -> int:\n        return sum(int(digit) for digit in str(abs(num)))\n\n    count = 0\n    for num in arr:\n        if digit_sum(num) > 0:\n            count += 1\n    return count\n"}
{"task_id": "HumanEval/109", "completion": "\n    n = len(arr)\n    if n == 0:\n        return True\n\n    sorted_arr = sorted(arr)\n\n    for i in range(n):\n        rotated_arr = arr[i:] + arr[:i]\n        if rotated_arr == sorted_arr:\n            return True\n\n    return False\n"}
{"task_id": "HumanEval/110", "completion": "\ndef exchange(lst1, lst2):\n    \"\"\"In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n    \"\"\"\n\n    odd_count_in_lst1 = sum(1 for num in lst1 if num % 2 != 0)\n    even_count_in_lst2 = sum(1 for num in lst2 if num % 2 == 0)\n\n    if even_count_in_lst2 >= odd_count_in_lst1:\n        return \"YES\"\n    else:\n        return \"NO\"\n"}
{"task_id": "HumanEval/111", "completion": "\n    # Split the input string into a list of words\n    words = test.split()\n\n    # Create a dictionary to store the frequency of each word\n    frequency_dict = {}\n\n    # Iterate over each word in the list\n    for word in words:\n        # If the word is already in the dictionary, increment its count\n        if word in frequency_dict:\n            frequency_dict[word] += 1\n        # If the word is not in the dictionary, add it with a count of 1\n        else:\n            frequency_dict[word] = 1\n\n    # If the dictionary is empty, return an empty dictionary\n    if not frequency_dict:\n        return {}\n\n    # Find the maximum frequency\n    max_frequency = max(frequency_dict.values())\n\n    # Create a new dictionary with only the words that have the maximum frequency\n    result_dict = {word: frequency for word, frequency in frequency_dict.items() if frequency == max_frequency}\n\n    return result_dict\n"}
{"task_id": "HumanEval/112", "completion": "\ndef reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    result_string = ''.join([char for char in s if char not in c])\n    is_palindrome = result_string == result_string[::-1]\n    return (result_string, is_palindrome)\n"}
{"task_id": "HumanEval/113", "completion": "\n    result = []\n    for i, string in enumerate(lst):\n        odd_count = sum(1 for digit in string if int(digit) % 2 != 0)\n        result.append(f\"the number of odd elements {odd_count}n the str{odd_count}ng {odd_count} of the {odd_count}nput.\")\n    return result\n"}
{"task_id": "HumanEval/114", "completion": "\ndef minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    min_sum = current_sum = nums[0]\n    for num in nums[1:]:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum\n"}
{"task_id": "HumanEval/115", "completion": "\n    def max_fill(grid, capacity):\n        import math\n        \"\"\"\n        You are given a rectangular grid of wells. Each row represents a single well,\n        and each 1 in a row represents a single unit of water.\n        Each well has a corresponding bucket that can be used to extract water from it, \n        and all buckets have the same capacity.\n        Your task is to use the buckets to empty the wells.\n        Output the number of times you need to lower the buckets.\n\n        :param grid: A 2D list of wells with water represented by 1s and empty spaces by 0s.\n        :param capacity: The bucket's water capacity.\n        :return: The minimum times to lower the buckets to empty all wells.\n        \"\"\"\n        total_water = sum(sum(row) for row in grid)\n        return math.ceil(total_water / capacity)\n"}
{"task_id": "HumanEval/116", "completion": "\ndef sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def binary_ones_count(n):\n        return bin(abs(n)).count('1')\n\n    def sort_key(n):\n        return (binary_ones_count(n), abs(n))\n\n    return sorted(arr, key=sort_key)\n\n"}
{"task_id": "HumanEval/117", "completion": "\ndef select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n\n    def is_consonant(char):\n        vowels = 'aeiouAEIOU'\n        if char.isalpha() and char not in vowels:\n            return True\n        else:\n            return False\n\n    words = s.split()\n\n    result = []\n\n    for word in words:\n        consonant_count = 0\n        for char in word:\n            if is_consonant(char):\n                consonant_count += 1\n\n        if consonant_count == n:\n            result.append(word)\n\n    return result\n"}
{"task_id": "HumanEval/118", "completion": "\n    vowels = 'aeiouAEIOU'\n    word = word[::-1]  # Reverse the word to start checking from the right side\n\n    for idx, char in enumerate(word):\n        if char in vowels:\n            if idx < len(word) - 1 and idx > 0 and word[idx - 1] not in vowels and word[idx + 1] not in vowels:\n                return char\n\n    return \"\"\n"}
{"task_id": "HumanEval/119", "completion": "\n    # Calculate the total count of opening and closing parentheses\n    total_open = lst[0].count('(') + lst[1].count('(')\n    total_close = lst[0].count(')') + lst[1].count(')')\n\n    # If total opening and closing parentheses are not equal, return 'No'\n    if total_open != total_close:\n        return 'No'\n\n    # Check if the first string can be good by trying to concatenate it with the second string\n    count_open = 0\n    for c in lst[0]:\n        if c == '(':\n            count_open += 1\n        else:\n            count_open -= 1\n        if count_open < 0:\n            break\n    else:\n        # If the first string is good, return 'Yes'\n        return 'Yes'\n\n    # Check if the first string can be good when concatenated with the second string in reverse order\n    count_open = 0\n    for c in lst[1]:\n        if c == '(':\n            count_open += 1\n        else:\n            count_open -= 1\n        if count_open < 0:\n            break\n    else:\n        # If the first string is good, return 'Yes'\n        return 'Yes'\n\n    # If no way to make a good string, return 'No'\n    return 'No'\n"}
{"task_id": "HumanEval/120", "completion": "\n    # First, we sort the array in descending order to get the maximum numbers\n    sorted_arr = sorted(arr, reverse=True)\n    \n    # Then, we return the first k elements of the sorted array\n    # We use list slicing to get the first k elements\n    return sorted_arr[:k]\n"}
{"task_id": "HumanEval/121", "completion": "\n# Step 1: Identify the problem and the goal\n# The goal is to return the sum of all the odd elements in the even positions of the list.\n\n# Step 2: Break down the problem into smaller steps\n# We need to:\n#   1. Iterate over the list and keep track of the index.\n#   2. Check if the index is even.\n#   3. Check if the element at the current index is odd.\n#   4. If both conditions are met, add the element to the sum.\n\n# Step 3: Create pseudocode\n# Initialize sum to 0\n# For each element in the list:\n#   If the index is even and the element is odd:\n#       Add the element to the sum\n# Return the sum\n\n# Step 4: Write the code in Python\ndef solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    total_sum = 0\n    for idx, elem in enumerate(lst):\n        if idx % 2 == 0 and elem % 2 != 0:\n            total_sum += elem\n    return total_sum\n"}
{"task_id": "HumanEval/122", "completion": "\ndef add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    # Initialize the sum of two digit elements to 0\n    two_digit_sum = 0\n    \n    # Loop through the first k elements of the array\n    for i in range(min(k, len(arr))):\n        # Check if the current element has at most two digits\n        if -99 <= arr[i] <= 99:\n            # Add the current element to the sum of two digit elements\n            two_digit_sum += arr[i]\n    \n    # Return the sum of two digit elements\n    return two_digit_sum\n"}
{"task_id": "HumanEval/123", "completion": "\ndef get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n    \n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n    \n    Note: \n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n    \n    For example:\n    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    \"\"\"\n\n    sequence = [n]\n    while n != 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n        sequence.append(n)\n    \n    odd_numbers = [num for num in sequence if num % 2 != 0]\n    odd_numbers.sort()\n    return odd_numbers\n"}
{"task_id": "HumanEval/124", "completion": "\n    # Check if the date string is not empty\n    if not date:\n        return False\n\n    # Split the date string into month, day, and year\n    date_parts = date.split('-')\n\n    # Check if the date string is in the correct format\n    if len(date_parts) != 3:\n        return False\n\n    month, day, year = date_parts\n\n    # Check if the month, day, and year are numeric\n    if not (month.isdigit() and day.isdigit() and year.isdigit()):\n        return False\n\n    month, day, year = int(month), int(day), int(year)\n\n    # Check if the month is valid\n    if month < 1 or month > 12:\n        return False\n\n    # Check if the day is valid\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day > 31:\n            return False\n    elif month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n    else:\n        if day < 1 or day > 29:\n            return False\n\n    return True\n"}
{"task_id": "HumanEval/125", "completion": "\n    # First, try to split the string on whitespace\n    words = txt.split()\n    \n    # If no whitespace is found, try to split on commas\n    if len(words) == 1:\n        words = txt.split(',')\n\n    # If no commas are found, count the number of lower-case letters with odd order in the alphabet\n    if len(words) == 1:\n        count = sum(1 for char in txt if char.islower() and ord(char) % 2 != 0)\n        return count\n    else:\n        return words\n"}
{"task_id": "HumanEval/126", "completion": "\n    seen = set()\n    duplicates = set()\n\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n        elif lst[i] == lst[i + 1] and lst[i] in seen:\n            duplicates.add(lst[i])\n        seen.add(lst[i])\n\n    return len(duplicates) < 1\n"}
{"task_id": "HumanEval/127", "completion": "\ndef intersection(interval1, interval2):\n    \"\"\" Checks if the length of intersection of two intervals is a prime number \"\"\"\n    def is_prime(n):\n        \"\"\" Checks if a number is prime \"\"\"\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    intersection_start = max(interval1[0], interval2[0])\n    intersection_end = min(interval1[1], interval2[1])\n\n    if intersection_start <= intersection_end:\n        intersection_length = intersection_end - intersection_start + 1\n        if is_prime(intersection_length):\n            return \"YES\"\n        else:\n            return \"NO\"\n    else:\n        return \"NO\"\n"}
{"task_id": "HumanEval/128", "completion": "\ndef prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\n    if len(arr) == 0:\n        return None\n\n    total_magnitude = 0\n    sign_product = 1\n\n    for num in arr:\n        magnitude = abs(num)\n        sign = 1 if num > 0 else -1 if num < 0 else 0\n        total_magnitude += magnitude\n        sign_product *= sign\n\n    return total_magnitude * sign_product\n"}
{"task_id": "HumanEval/129", "completion": "\nfrom typing import List\n\ndef minPath(grid: List[List[int]], k: int) -> List[int]:\n    \"\"\"\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n    \"\"\"\n\n    def generate_paths(x, y, path):\n        if len(path) == k:\n            paths.append(path[:])\n            return\n        for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < len(grid) and 0 <= ny < len(grid[0]):\n                path.append(grid[nx][ny])\n                generate_paths(nx, ny, path)\n                path.pop()\n\n    paths = []\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            generate_paths(i, j, [grid[i][j]])\n\n    paths.sort()\n    return paths[0]\n"}
{"task_id": "HumanEval/130", "completion": "\ndef tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n\n    # handle base cases\n    if n == 0:\n        return [1.0]\n    elif n == 1:\n        return [1.0, 3.0]\n    elif n == 2:\n        return [1.0, 3.0, 2.0]\n\n    # initialize the sequence with the first three terms\n    sequence = [1.0, 3.0, 2.0]\n\n    # generate the rest of the sequence\n    for i in range(3, n + 1):\n        # calculate the next term as the sum of the three previous ones\n        next_term = sequence[i - 1] + sequence[i - 2] + sequence[i - 3]\n        # append the new term to the sequence\n        sequence.append(next_term)\n\n    return sequence\n"}
{"task_id": "HumanEval/131", "completion": "\ndef digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    product = 1\n    for digit in str(n):\n        digit_value = int(digit)\n        if digit_value % 2 != 0:\n            product *= digit_value\n    return product if product != 1 else 0\n"}
{"task_id": "HumanEval/132", "completion": "\ndef is_nested(string):\n    \"\"\"\n    This function checks if a given string of square brackets contains a valid subsequence \n    of nested brackets.\n\n    Args:\n    string (str): A string consisting only of square brackets.\n\n    Returns:\n    bool: True if the string contains a valid subsequence of nested brackets, False otherwise.\n    \"\"\"\n\n    # Initialize a counter to track the nesting level\n    nesting_level = 0\n\n    # Iterate over each character in the string\n    for bracket in string:\n        # If the character is an opening bracket, increment the nesting level\n        if bracket == '[':\n            nesting_level += 1\n        # If the character is a closing bracket, decrement the nesting level\n        elif bracket == ']':\n            # If the nesting level becomes negative, it means there's a closing bracket without a corresponding opening bracket\n            if nesting_level == 0:\n                return False\n            nesting_level -= 1\n        # If the nesting level is greater than 1 at any point, it means there are nested brackets\n        if nesting_level > 1:\n            return True\n\n    # If the function hasn't returned True by now, it means there are no nested brackets\n    return False\n"}
{"task_id": "HumanEval/133", "completion": "\n    import math\n\n    # First, we need to round each element in the list to the upper int (Ceiling)\n    # We can use a list comprehension to achieve this\n    rounded_list = [math.ceil(num) for num in lst]\n    \n    # Then, we need to square each number in the rounded list\n    # Again, we can use a list comprehension to achieve this\n    squared_list = [num ** 2 for num in rounded_list]\n    \n    # Finally, we need to sum up the squared numbers\n    # We can use the built-in sum function to achieve this\n    total_sum = sum(squared_list)\n    \n    return total_sum\n"}
{"task_id": "HumanEval/134", "completion": "\ndef check_if_last_char_is_a_letter(txt):\n    \"\"\"\n    Returns True if the last character of a given string is an alphabetical character \n    and is not a part of a word, and False otherwise.\n    \n    Args:\n        txt (str): The input string.\n\n    Returns:\n        bool: True if the last character is an alphabetical character and is not a part of a word, False otherwise.\n    \"\"\"\n    if not txt:  # Check if the input string is not empty\n        return False\n\n    txt = txt.rstrip()  # Remove trailing whitespace from the input string\n\n    words = txt.split()  # Split the string into words using space as the delimiter\n    last_word = words[-1]  # Get the last word in the list of words\n\n    if len(last_word) == 1:  # If the length of the last word is 1\n        if last_word.isalpha():  # Check if the last character is an alphabetical character\n            return True\n\n    return False\n"}
{"task_id": "HumanEval/135", "completion": "\ndef can_arrange(arr):\n    \"\"\"Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5]) = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\n\n    largest_index = -1\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i - 1]:\n            largest_index = i\n    return largest_index\n"}
{"task_id": "HumanEval/136", "completion": "\n    largest_negative = None\n    smallest_positive = None\n\n    for num in lst:\n        if num < 0:\n            if largest_negative is None or num > largest_negative:\n                largest_negative = num\n        elif num > 0:\n            if smallest_positive is None or num < smallest_positive:\n                smallest_positive = num\n\n    return (largest_negative, smallest_positive)\n"}
{"task_id": "HumanEval/137", "completion": "\n    def convert_to_float(var):\n        if isinstance(var, str):\n            return float(var.replace(',', '.'))\n        else:\n            return float(var)\n\n    a_float = convert_to_float(a)\n    b_float = convert_to_float(b)\n\n    if a_float > b_float:\n        if isinstance(a, str):\n            return a.replace('.', ',')\n        else:\n            return a\n    elif a_float < b_float:\n        if isinstance(b, str):\n            return b.replace('.', ',')\n        else:\n            return b\n    else:\n        return None\n"}
{"task_id": "HumanEval/138", "completion": "\ndef is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    is_equal_to_sum_even(4) == False\n    is_equal_to_sum_even(6) == False\n    is_equal_to_sum_even(8) == True\n    \"\"\"\n    # First, we need to check if the number is even, because the sum of 4 even numbers will always be even\n    if n % 2 != 0:\n        return False\n\n    # Then, we need to check if the number is greater than or equal to 8, because the smallest sum of 4 positive even numbers is 8\n    if n < 8:\n        return False\n\n    # Now, we can try to find 4 even numbers that sum up to n\n    # We can start with the smallest even number, which is 2\n    for a in range(2, n // 2 + 1, 2):\n        for b in range(a, (n - a) // 2 + 1, 2):\n            for c in range(b, (n - a - b) // 2 + 1, 2):\n                d = n - a - b - c\n                if d >= c and d >= 2 and d % 2 == 0:\n                    return True\n\n    # If we have tried all possible combinations and haven't found a solution, we return False\n    return False\n"}
{"task_id": "HumanEval/139", "completion": "\ndef special_factorial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n    result = 1\n    for i in range(n, 0, -1):\n        factorial = 1\n        for j in range(i, 0, -1):\n            factorial *= j\n        result *= factorial\n    return result\n"}
{"task_id": "HumanEval/140", "completion": "\ndef fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\"\n\n    # Remove leading and trailing spaces\n    text = text.strip()\n    \n    # Initialize variables to keep track of consecutive spaces\n    consecutive_spaces = 0\n    new_text = \"\"\n    \n    # Iterate over each character in the string\n    for i in range(len(text)):\n        # If the character is a space\n        if text[i] == \" \":\n            # Increment the consecutive spaces counter\n            consecutive_spaces += 1\n        else:\n            # If there were consecutive spaces before this character, replace them with a dash\n            if consecutive_spaces > 2:\n                new_text += \"-\"\n            # If there was one space before this character, replace it with an underscore\n            elif consecutive_spaces == 1:\n                new_text += \"_\"\n            # If there were two spaces before this character, replace them with two underscores\n            elif consecutive_spaces == 2:\n                new_text += \"__\"\n            # Reset the consecutive spaces counter\n            consecutive_spaces = 0\n            # Add the character to the new string\n            new_text += text[i]\n    \n    # If the string ended with consecutive spaces, replace them with a dash\n    if consecutive_spaces > 2:\n        new_text += \"-\"\n    # If the string ended with one space, replace it with an underscore\n    elif consecutive_spaces == 1:\n        new_text += \"_\"\n    # If the string ended with two spaces, replace them with two underscores\n    elif consecutive_spaces == 2:\n        new_text += \"__\"\n    \n    return new_text\n"}
{"task_id": "HumanEval/141", "completion": "\n    # Condition 1: Count the number of digits in the file name\n    digit_count = sum(c.isdigit() for c in file_name)\n    \n    # Condition 2: Check if the file name contains exactly one dot\n    dot_count = file_name.count('.')\n    \n    # Condition 3: Check if the substring before the dot is not empty and starts with a latin alphabet letter\n    if dot_count == 1:\n        before_dot = file_name.split('.')[0]\n        starts_with_letter = before_dot and before_dot[0].isalpha()\n    else:\n        starts_with_letter = False\n    \n    # Condition 4: Check if the substring after the dot is one of the allowed extensions\n    if dot_count == 1:\n        after_dot = file_name.split('.')[1]\n        allowed_extensions = ['txt', 'exe', 'dll']\n        is_allowed_extension = after_dot in allowed_extensions\n    else:\n        is_allowed_extension = False\n    \n    # Return 'Yes' if all conditions are met, 'No' otherwise\n    if digit_count <= 3 and dot_count == 1 and starts_with_letter and is_allowed_extension:\n        return 'Yes'\n    else:\n        return 'No'\n"}
{"task_id": "HumanEval/142", "completion": "\ndef sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries.\n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n\n    # Initialize total sum to 0\n    total_sum = 0\n\n    # Iterate over the list with index and value\n    for idx, val in enumerate(lst):\n        # If index is a multiple of 3, square the value and add to sum\n        if idx % 3 == 0:\n            total_sum += val ** 2\n        # If index is a multiple of 4 but not 3, cube the value and add to sum\n        elif idx % 4 == 0:\n            total_sum += val ** 3\n        # If index is neither a multiple of 3 nor 4, add the value as is to sum\n        else:\n            total_sum += val\n\n    # Return the total sum\n    return total_sum\n"}
{"task_id": "HumanEval/143", "completion": "\nimport math\n\ndef is_prime(n):\n    \"\"\" Check if a number is prime \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n\ndef words_in_sentence(sentence):\n    \"\"\"\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\n    result = []\n    words = sentence.split()\n    for word in words:\n        if is_prime(len(word)):\n            result.append(word)\n    return ' '.join(result)\n"}
{"task_id": "HumanEval/144", "completion": "\n    # Split the fractions into numerator and denominator pairs\n    x_num, x_denom = map(int, x.split('/'))\n    n_num, n_denom = map(int, n.split('/'))\n\n    # Calculate the product of the fractions\n    product_num = x_num * n_num\n    product_denom = x_denom * n_denom\n\n    # Check if the product of the denominators can divide the product of the numerators\n    # without any remainder, i.e., the product is a whole number\n    return product_num % product_denom == 0\n"}
{"task_id": "HumanEval/145", "completion": "\ndef order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_of_digits(num):\n        return sum(int(digit) for digit in str(abs(num)))\n\n    return sorted(enumerate(nums), key=lambda x: (sum_of_digits(x[1]), x[0]))\n\n\ndef order_by_points_other(nums):\n    # Calculate sum of digits and original index for each number\n    temps = [(x, sum(int(digit) for digit in str(abs(x))), i) for i, x in enumerate(nums)]\n    # Sort based on sum of digits and original index\n    temps.sort(key=lambda x: (x[1], x[2]))\n    # Return the sorted list\n    return [x[0] for x in temps]\n\nprint(order_by_points_other([1, 11, -1, -11, -12]))\nprint(order_by_points_other([]))\n"}
{"task_id": "HumanEval/146", "completion": "\ndef specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\"\n    count = 0\n    for num in nums:\n        if num > 10:\n            str_num = str(abs(num))  # Convert to string and remove negative sign\n            if str_num[0] in '13579' and str_num[-1] in '13579':\n                count += 1\n    return count\n"}
{"task_id": "HumanEval/147", "completion": "\ndef get_max_triples(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\n\n    # Create an array a of length n where each element a[i] = i * i - i + 1\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    \n    # Initialize a variable count to store the number of triples\n    count = 0\n    \n    # Iterate over the array a with three nested loops to generate all possible triples\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                # Check if the sum of each triple is a multiple of 3\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    # If it is, increment the count\n                    count += 1\n    \n    # Return the count\n    return count\n"}
{"task_id": "HumanEval/148", "completion": "\ndef bf(planet1, planet2):\n    planets = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n    \n    # Check if planet1 and planet2 are in the list of planets\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n\n    # Get the index of planet1 and planet2\n    idx1 = planets.index(planet1)\n    idx2 = planets.index(planet2)\n\n    # Sort the indices to ensure we're getting the planets between them\n    idx1, idx2 = min(idx1, idx2), max(idx1, idx2)\n\n    # Return the planets between planet1 and planet2\n    return tuple(planets[idx1+1:idx2])\n"}
{"task_id": "HumanEval/149", "completion": "\n    # First, filter out the strings with odd lengths\n    even_length_strings = [s for s in lst if len(s) % 2 == 0]\n    \n    # Then, sort the remaining strings based on their lengths and lexicographical order\n    sorted_strings = sorted(even_length_strings, key=lambda s: (len(s), s))\n    \n    # Finally, return the sorted list of strings\n    return sorted_strings\n"}
{"task_id": "HumanEval/150", "completion": "\ndef is_prime(num: int) -> bool:\n    \"\"\"Check if a number is prime.\"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\n\ndef x_or_y(n: int, x: int, y: int) -> int:\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    >>> x_or_y(7, 34, 12)\n    34\n    >>> x_or_y(15, 8, 5)\n    5\n    \"\"\"\n    if is_prime(n):\n        return x\n    else:\n        return y\n"}
{"task_id": "HumanEval/151", "completion": "\n    result = 0\n    for num in lst:\n        if isinstance(num, int) and num > 0 and num % 2 != 0:\n            result += num ** 2\n    return result\n"}
{"task_id": "HumanEval/152", "completion": "\n    return [abs(a - b) for a, b in zip(game, guess)]\n"}
{"task_id": "HumanEval/153", "completion": "\n    def calculate_strength(extension):\n        cap = sum(1 for char in extension if char.isupper())\n        sm = sum(1 for char in extension if char.islower())\n        return cap - sm\n\n    strongest_extension = max(extensions, key=calculate_strength)\n    return f\"{class_name}.{strongest_extension}\"\n"}
{"task_id": "HumanEval/154", "completion": "\n    # Generate all rotations of the second word\n    rotations = [b[i:] + b[:i] for i in range(len(b))]\n\n    # Check if any rotation is a substring of the first word\n    for rotation in rotations:\n        if rotation in a:\n            return True\n\n    return False\n"}
{"task_id": "HumanEval/155", "completion": "\n    even_count = 0\n    odd_count = 0\n\n    # Convert the number to a string to easily iterate over each digit\n    for digit in str(abs(num)):\n        # Convert the digit back to an integer to check if it's even or odd\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n\n    return (even_count, odd_count)\n"}
{"task_id": "HumanEval/156", "completion": "\ndef int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n\n    roman_numerals = {\n        1000: 'm',\n        900: 'cm',\n        500: 'd',\n        400: 'cd',\n        100: 'c',\n        90: 'xc',\n        50: 'l',\n        40: 'xl',\n        10: 'x',\n        9: 'ix',\n        5: 'v',\n        4: 'iv',\n        1: 'i'\n    }\n\n    result = ''\n    for value, numeral in roman_numerals.items():\n        while number >= value:\n            number -= value\n            result += numeral\n\n    return result\n"}
{"task_id": "HumanEval/157", "completion": "\n    # Sort the sides of the triangle in ascending order\n    sides = sorted([a, b, c])\n\n    # According to Pythagorean theorem, in a right-angled triangle, \n    # the square of the length of the hypotenuse (the side opposite the right angle) \n    # is equal to the sum of the squares of the lengths of the other two sides.\n    # So, we check if the square of the longest side is equal to the sum of the squares of the other two sides.\n    return sides[0]**2 + sides[1]**2 == sides[2]**2\n"}
{"task_id": "HumanEval/158", "completion": "\n    max_unique_chars = 0\n    result = \"\"\n\n    for word in words:\n        unique_chars = len(set(word))\n        \n        if unique_chars > max_unique_chars:\n            max_unique_chars = unique_chars\n            result = word\n        elif unique_chars == max_unique_chars:\n            if word < result:\n                result = word\n\n    return result\n"}
{"task_id": "HumanEval/159", "completion": "\ndef eat(number, need, remaining):\n    \"\"\"\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n    \"\"\"\n    total_needed = number + need\n    total_eaten = min(total_needed, number + remaining)\n    leftover = max(0, remaining + number - total_eaten)\n    return [total_eaten, leftover]\n"}
{"task_id": "HumanEval/160", "completion": "\n    result = operand[0]\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            result += operand[i + 1]\n        elif operator[i] == '-':\n            result -= operand[i + 1]\n        elif operator[i] == '*':\n            result *= operand[i + 1]\n        elif operator[i] == '//':\n            result //= operand[i + 1]\n        elif operator[i] == '**':\n            result **= operand[i + 1]\n\n    return result\n"}
{"task_id": "HumanEval/161", "completion": "\ndef solve(s):\n    \"\"\"You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa, \n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\n\n    result = s\n    has_letters = False\n    for c in s:\n        if c.isalpha():\n            has_letters = True\n            break\n    if not has_letters:\n        result = result[::-1]\n    else:\n        result = ''.join(c.swapcase() if c.isalpha() else c for c in s)\n\n    return result\n"}
{"task_id": "HumanEval/162", "completion": "\nimport hashlib\n\ndef string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if not text:\n        return None\n\n    md5_hash = hashlib.md5(text.encode()).hexdigest()\n    return md5_hash\n"}
{"task_id": "HumanEval/163", "completion": "\ndef generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\"\n\n    # Initialize an empty list result\n    result = []\n\n    # Determine the start and end values of the range (a and b)\n    start = min(a, b)\n    end = max(a, b)\n\n    # Iterate through each number i in the range from start to end\n    for i in range(start, end + 1):\n        # If i is even\n        if i % 2 == 0:\n            # Add i to the result list\n            result.append(i)\n\n    # Return the result list\n    return result\n"}
