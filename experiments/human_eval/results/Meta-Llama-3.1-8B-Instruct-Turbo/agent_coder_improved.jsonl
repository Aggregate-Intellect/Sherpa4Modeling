{"task_id": "HumanEval/0", "completion": "\nfrom typing import List\n\nclass Sorter:\n    def __init__(self):\n        self.instructions = {}\n\n    def save_instruction(self, index1: int, index2: int):\n        \"\"\" Save instruction: compare element at index1 with element at index2. \"\"\"\n        if (index1, index2) in self.instructions or (index2, index1) in self.instructions:\n            raise ValueError(\"Instruction already exists.\")\n        self.instructions[(index1, index2)] = None\n\n    def get_instruction(self, index1: int, index2: int):\n        \"\"\" Get instruction: return True if element at index1 is smaller than element at index2, False otherwise. \"\"\"\n        if (index1, index2) in self.instructions:\n            return self.instructions[(index1, index2)]\n        elif (index2, index1) in self.instructions:\n            return not self.instructions[(index2, index1)]\n        else:\n            raise ValueError(\"No instruction exists for this comparison.\")\n\n    def sort(self, elements: List[int]) -> List[int]:\n        \"\"\" Sort the list of elements using the saved instructions. \"\"\"\n        n = len(elements)\n        for i in range(n):\n            for j in range(i + 1, n):\n                if self.get_instruction(i, j):\n                    elements[i], elements[j] = elements[j], elements[i]\n\n        return elements\n\n\ndef main():\n    sorter = Sorter()\n    elements = [5, 2, 8, 3, 1, 6, 4]\n    print(\"Initial list:\", elements)\n\n    num_instructions = int(input(\"Enter the number of instructions: \"))\n    for i in range(num_instructions):\n        index1 = int(input(f\"Enter index 1 for instruction {i + 1}: \"))\n        index2 = int(input(f\"Enter index 2 for instruction {i + 1}: \"))\n        sorter.save_instruction(index1, index2)\n\n    print(\"Sorted list:\", sorter.sort(elements))\n\n\nif __name__ == \"__main__\":\n    main()\n\n"}
{"task_id": "HumanEval/1", "completion": "\nfrom typing import List\n\n\nclass Graph:\n    def __init__(self, vertices: int):\n        self.vertices = vertices\n        self.adj_list = [[] for _ in range(vertices + 1)]\n\n    def add_edge(self, u: int, v: int, weight: int):\n        self.adj_list[u].append((v, weight))\n        self.adj_list[v].append((u, weight))\n\n\ndef find_mst(graph: Graph) -> List[tuple]:\n    \"\"\" This function uses Kruskal's algorithm to find the Minimum Spanning Tree of the given graph.\n    >>> g = Graph(5)\n    >>> g.add_edge(1, 2, 2)\n    >>> g.add_edge(1, 5, 1)\n    >>> g.add_edge(5, 4, 5)\n    >>> g.add_edge(4, 3, 6)\n    >>> g.add_edge(2, 3, 3)\n    >>> g.add_edge(3, 4, 2)\n    >>> find_mst(g)\n    [(1, 5, 1), (5, 4, 5), (4, 3, 2), (2, 3, 3)]\n    \"\"\"\n\n"}
{"task_id": "HumanEval/2", "completion": "\ndef truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n"}
{"task_id": "HumanEval/3", "completion": "\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n\n    return False\n"}
{"task_id": "HumanEval/4", "completion": "\n    mean = sum(numbers) / len(numbers)\n    absolute_deviations = [abs(num - mean) for num in numbers]\n    sum_absolute_deviations = sum(absolute_deviations)\n    mad = sum_absolute_deviations / len(numbers)\n\n    return mad\n"}
{"task_id": "HumanEval/5", "completion": "\n    result = [numbers[0]]\n    for num in numbers[1:]:\n        result.append(delimeter)\n        result.append(num)\n\n    return result\n"}
{"task_id": "HumanEval/6", "completion": "\nfrom typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n\n"}
{"task_id": "HumanEval/7", "completion": "\nfrom typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n\n"}
{"task_id": "HumanEval/8", "completion": "\n    sum_result = 0\n    product_result = 1\n\n    for num in numbers:\n        sum_result += num\n        product_result *= num\n\n    return sum_result, product_result\n"}
{"task_id": "HumanEval/9", "completion": "\n    result = []\n    max_so_far = float('-inf')\n\n    for num in numbers:\n        if num > max_so_far:\n            max_so_far = num\n        result.append(max_so_far)\n\n    return result\n"}
{"task_id": "HumanEval/10", "completion": "\n    if is_palindrome(string):\n        return string\n\n    # Find the longest palindromic suffix of the input string\n    for i in range(len(string) - 1, -1, -1):\n        s = string[:i + 1]\n        if is_palindrome(s):\n            break\n\n    # Reverse the prefix of the input string and append it to the palindromic suffix\n    palindrome = s + s[::-1]\n    return palindrome\n"}
{"task_id": "HumanEval/11", "completion": "\n    result = ''\n    for a, b in zip(a, b):\n        result += str(ord(a) ^ ord(b))\n\n    return result\n"}
{"task_id": "HumanEval/12", "completion": "\n    if not strings:\n        return None\n\n    longest_str = strings[0]\n    max_len = len(longest_str)\n\n    for s in strings:\n        if len(s) > max_len:\n            longest_str = s\n            max_len = len(s)\n\n    return longest_str\n"}
{"task_id": "HumanEval/13", "completion": "\ndef greatest_common_divisor(a: int, b: int) -> int:\n    while b != 0:\n        a, b = b, a % b\n\n    return abs(a) if a != 0 else 1\n\n"}
{"task_id": "HumanEval/14", "completion": "\n    result = []\n\n    for i, char in enumerate(string):\n        prefix = string[:i+1]\n        result.append(prefix)\n\n    return sorted(result, key=len)\n"}
{"task_id": "HumanEval/15", "completion": "\n    return ' '.join(map(str, range(n + 1)))\n"}
{"task_id": "HumanEval/16", "completion": "\n    [Code]\ndef count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n\n    # Create an empty set to store unique characters\n    unique_chars = set()\n\n    # Convert the string to lowercase and iterate over it\n    for char in string.lower():\n        # Add each character to the set\n        unique_chars.add(char)\n\n    # The size of the set is the number of distinct characters\n    return len(unique_chars)\n\n"}
{"task_id": "HumanEval/17", "completion": "\nfrom typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n\n    result = []\n    prev_note_type = ''\n    current_note = 0\n    current_beats = 0\n\n    for c in music_string:\n        if c in ['o', 'o|']:\n            if current_note == 2:\n                result.append(current_beats)\n                current_beats = 0\n                current_note = 0\n            elif current_note == 1:\n                if c == 'o':\n                    current_beats += 4\n                else:\n                    current_beats += 2\n                current_note = 2\n            else:\n                current_note = 1\n                if c == 'o':\n                    current_beats = 4\n                else:\n                    current_beats = 2\n        elif c == '|':\n            if current_note == 1:\n                if prev_note_type == 'o':\n                    current_beats += 4\n                else:\n                    current_beats += 2\n            elif current_note == 2:\n                current_beats += 1\n        elif c == '.':\n            if current_note == 2:\n                current_beats += 1\n\n    if current_note == 2:\n        result.append(current_beats)\n\n    return result\n"}
{"task_id": "HumanEval/18", "completion": "\nfrom typing import List\n\n\ndef how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n"}
{"task_id": "HumanEval/19", "completion": "\n    # Remove any spaces from the input string and replace numbers with their integer equivalent\n    input_list = ['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine']\n    numbers = [input_list.index(num.strip()) for num in numbers.split()]\n\n    # Sort the numbers\n    numbers.sort()\n\n    # Replace integer numbers with their string equivalents and join back into a string\n    sorted_numbers = ' '.join([input_list[num] for num in numbers])\n\n    return sorted_numbers\n"}
{"task_id": "HumanEval/20", "completion": "\n    numbers.sort()\n\n    min_diff = float('inf')\n    closest_pair = (numbers[0], numbers[0])\n\n    for i in range(1, len(numbers)):\n        diff = numbers[i] - numbers[i-1]\n\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i-1], numbers[i])\n\n    return closest_pair\n"}
{"task_id": "HumanEval/21", "completion": "\n    min_val = min(numbers)\n    max_val = max(numbers)\n\n    if min_val == max_val:\n        return [0.0] * len(numbers)\n\n    return [(x - min_val) / (max_val - min_val) for x in numbers]\n"}
{"task_id": "HumanEval/22", "completion": "\n    return [x for x in values if isinstance(x, int)]\n"}
{"task_id": "HumanEval/23", "completion": "\nfrom typing import List, Tuple\n\n\ndef soundex_index(char: str) -> str:\n    \"\"\" Mapping English alphabets to Soundex Index\n    \"\"\"\n    soundex_indexes = {\n        'BFPV': '1', 'CGJKQSXZ': '2', 'DT': '3', 'L': '4',\n        'MN': '5', 'R': '6', 'AEIOUHWY': '0'\n    }\n\n    for soundex_index_set, index_value in soundex_indexes.items():\n        if char.upper() in soundex_index_set:\n            return index_value\n\n    return ''\n\n"}
{"task_id": "HumanEval/24", "completion": "\n    for divisor in range(n-1, 0, -1):\n        if n % divisor == 0:\n            return divisor\n\n    return 0  # If no divisor is found, return 0.\n"}
{"task_id": "HumanEval/25", "completion": "\nfrom typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n"}
{"task_id": "HumanEval/26", "completion": "\nfrom typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n\n"}
{"task_id": "HumanEval/27", "completion": "\n    result = ''\n    for c in string:\n        if c.isalpha():  # Check if character is alphabet\n            if c.islower():\n                result += c.upper()\n            else:\n                result += c.lower()\n        else:\n            result += c\n\n    return result\n"}
{"task_id": "HumanEval/28", "completion": "\nfrom typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    \n"}
{"task_id": "HumanEval/29", "completion": "\n    return [string for string in strings if string.startswith(prefix)]\n"}
{"task_id": "HumanEval/30", "completion": "\n    return [num for num in l if num > 0]\n"}
{"task_id": "HumanEval/31", "completion": "\n\n[Code]\nimport math\n\ndef is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n\n    if n <= 1:  # Edge cases: numbers less than or equal to 1 are not prime\n        return False\n\n    if n == 2:  # 2 is the only even prime number\n        return True\n\n    if n % 2 == 0:  # All other even numbers are not prime\n        return False\n\n    # Check for divisibility up to the square root of n\n    for i in range(3, math.isqrt(n) + 1, 2):\n        if n % i == 0:  # If n is divisible by any number between 3 and sqrt(n), it's not prime\n            return False\n\n    # If no divisors are found, n is prime\n    return True\n"}
{"task_id": "HumanEval/32", "completion": "\n[Code]\n"}
{"task_id": "HumanEval/33", "completion": "\n    l_out = []\n    for i, x in enumerate(l):\n        if i % 3 == 0:\n            l_out.append(x)\n        else:\n            l_out.append(x)\n\n    return l_out\n\n"}
{"task_id": "HumanEval/34", "completion": "\nfrom typing import List, Dict\n\ndef unique_element_counts(web_page: Dict[str, List[str]], keywords: List[str]) -> List[int]:\n    \"\"\" Web page is a dictionary. Each key in the dictionary is a unique path on web page, and its value is list of keywords occurring in that path. The function takes two input parameters - web page and list of keywords. It returns the list of counts of unique keywords in each path of all pages of the web application\n    \"\"\"\n\n"}
{"task_id": "HumanEval/35", "completion": "\ndef sum_of_element_in_range(l: list, start: int, end: int) -> int:\n    \"\"\"Return sum of elements in list from start index (inclusive) to end index (inclusive).\n    >>> sum_of_element_in_range([1, 2, 3, 4, 5, 6], 1, 3)\n    9 (2 + 3 + 4)\n    >>> sum_of_element_in_range([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 2, 5)\n    17 (-5 + 2 + -3 + 3)\n    \"\"\"\n\n"}
{"task_id": "HumanEval/36", "completion": "\nfrom typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n"}
{"task_id": "HumanEval/37", "completion": "\nfrom typing import List\n\n\ndef sort_even(l: list) -> List:\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indices of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n\n\n"}
{"task_id": "HumanEval/38", "completion": "\n    result = []\n    start = 0\n    for i in range(0, len(s), 3):\n        if i + 2 >= len(s):\n            result.append(s[start: i])\n        else:\n            result.append(s[start + 1:i + 2] + s[start])\n\n        start = i + 3\n\n    return ''.join(result)\n"}
{"task_id": "HumanEval/39", "completion": "\nimport sympy\n\n\ndef prime_fib(n: int):\n    i = 0\n    fib_num = 1\n    while len(prime_fib_list) < n:\n        fib_num = fib_num + fib_list[i]\n        fib_list.append(fib_num)\n        if sympy.isprime(fib_num):\n            prime_fib_list.append(fib_num)\n        i += 1\n\n    return prime_fib_list[-1]\n\n\nprime_fib_list = [1, 1]\nfib_list = [1, 1]\n"}
{"task_id": "HumanEval/40", "completion": "\ndef triples_sum_to_zero(lst):\n    \"\"\" \n    Check if there are three distinct elements in the list that sum to zero.\n    \n    Args:\n        lst (list): A list of integers\n\n    Returns:\n        bool: True if there are three distinct elements that sum to zero, False otherwise\n    \"\"\"\n    # Sort the list in ascending order\n    lst.sort()\n\n    for left in range(len(lst) - 2):\n        mid = left + 1\n        right = len(lst) - 1\n\n        while mid < right:\n            total = lst[left] + lst[mid] + lst[right]\n\n            if total == 0:\n                return True\n\n            # Adjust mid and right pointers\n            elif total < 0:\n                mid += 1\n            else:\n                right -= 1\n\n    # If no combination of three distinct elements sums to zero\n    return False\n"}
{"task_id": "HumanEval/41", "completion": "\n    def collide(car1: int, car2: int) -> (bool, int):\n        return car1 < n and car2 >= n\n\n    collision_count = 0\n    for car1 in range(n):\n        for car2 in range(n):\n            if collide(car1, car2):\n                collision_count += 1\n\n    return collision_count\n"}
{"task_id": "HumanEval/42", "completion": "\n    result = []\n\n    # The problem does not clearly state whether or not we should check if any element in the list is still 0.\n    # I assume that 0 should be incremented. Adjust the code accordingly for the real case.\n\n    for elem in l:\n        elem %= 1000000  # Optional, in case any element turns into 1,001,000.0 or such large number that can cause overflow\n        result.append(elem + 1)\n\n    return result\n"}
{"task_id": "HumanEval/43", "completion": "\ndef pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\"\n"}
{"task_id": "HumanEval/44", "completion": "\n[Code]\ndef change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n\n    result = ''\n    while x > 0:\n        remainder = x % base\n        result = str(remainder) + result\n        x = x // base\n\n    return result\n"}
{"task_id": "HumanEval/45", "completion": "\ndef triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    # Check if inputs are valid (non-negative)\n    if a <= 0 or h <= 0:\n        raise ValueError(\"Inputs must be positive numbers\")\n\n    # Calculate area using the formula 1/2 * base * height\n    area = 0.5 * a * h\n\n    return area\n"}
{"task_id": "HumanEval/46", "completion": "\n[Code]\nfrom typing import List\n\n\ndef fib4(n: int):\n    \"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci sequence that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\n\n    if n < 4:\n        return 0 if n in [0, 1, 3] else 2\n\n    fib4_arr = [0] * (n + 1)\n    fib4_arr[2] = 2\n\n    for i in range(4, n + 1):\n        fib4_arr[i] = fib4_arr[i - 1] + fib4_arr[i - 2] + fib4_arr[i - 3] + fib4_arr[i - 4]\n\n    return fib4_arr[n]\n"}
{"task_id": "HumanEval/47", "completion": "\ndef median(l: list):\n    # First, we sort the list in ascending order\n    sorted_l = sorted(l)\n\n    # Get the length of the list\n    length = len(sorted_l)\n\n    # If the length is odd, return the middle element\n    if length % 2 == 1:\n        return sorted_l[length // 2]\n\n    # If the length is even, return the average of the two middle elements\n    else:\n        mid1 = sorted_l[length // 2 - 1]\n        mid2 = sorted_l[length // 2]\n        return (mid1 + mid2) / 2\n\n"}
{"task_id": "HumanEval/48", "completion": "\n    # Convert the text to lowercase to make the comparison case-insensitive\n    text = text.lower()\n\n    # Remove any non-alphanumeric characters from the text\n    text = ''.join(char for char in text if char.isalnum())\n\n    # Compare the text with its reverse\n    return text == text[::-1]\n"}
{"task_id": "HumanEval/49", "completion": "\ndef factorial_modp(n: int, p: int):\n    \"\"\"Return n! modulo p (be aware of numerics).\n    >>> factorial_modp(3, 5)\n    2\n    >>> factorial_modp(1101, 101)\n    100\n    >>> factorial_modp(0, 101)\n    1\n    >>> factorial_modp(3, 11)\n    9\n    >>> factorial_modp(5, 7)\n    6\n    \"\"\"\n\n"}
{"task_id": "HumanEval/50", "completion": "\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n"}
{"task_id": "HumanEval/51", "completion": "\nfrom typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\"Check if in given list of numbers, are any two numbers closer to each other than given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n"}
{"task_id": "HumanEval/52", "completion": "\n[Code]\ndef below_threshold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    for num in l:\n        if num >= t:\n            return False\n\n    return True\n"}
{"task_id": "HumanEval/53", "completion": "\nfrom typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n\n    for idx, elem in enumerate(numbers):\n        for idx2, elem2 in enumerate(numbers):\n            if idx != idx2:\n                distance = abs(elem - elem2)\n                if distance < threshold:\n                    return True\n\n    return False\n\n# Example usage:\nnumbers = [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]\nthreshold = 0.3\nprint(has_close_elements(numbers, threshold))  # Output: True\n\n"}
{"task_id": "HumanEval/54", "completion": "\n[Code]\nfrom typing import List\n\n\ndef normalize_string(s: str) -> List[str]:\n    return sorted(s)\n\n\ndef same_chars(s0: str, s1: str) -> bool:\n    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\n    # Normalize the strings by sorting their characters\n    norm_s0 = normalize_string(s0)\n    norm_s1 = normalize_string(s1)\n\n    # Compare the sorted strings for equality\n    return norm_s0 == norm_s1\n\n"}
{"task_id": "HumanEval/55", "completion": "\ndef fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n"}
{"task_id": "HumanEval/56", "completion": "\n    stack = []\n\n    for c in brackets:\n        if c == '<':\n            stack.append(c)\n        elif c == '>':\n            if not stack:\n                return False\n            stack.pop()\n\n    return not stack\n"}
{"task_id": "HumanEval/57", "completion": "\n    increasing = all([l[i] <= l[i+1] for i in range(len(l)-1)])\n    decreasing = all([l[i] >= l[i+1] for i in range(len(l)-1)])\n\n    return increasing or decreasing\n\n"}
{"task_id": "HumanEval/58", "completion": "\n    return sorted(set(l1) & set(l2))\n"}
{"task_id": "HumanEval/59", "completion": "\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n\n"}
{"task_id": "HumanEval/60", "completion": "\n    result = 0\n    for i in range(1, n + 1):\n        # Add the current number to the result\n        result += i\n\n    return result\n"}
{"task_id": "HumanEval/61", "completion": "\n    stack = []\n\n    for c in brackets:\n        if c == '(':\n            stack.append(c)\n        elif c == ')':\n            if not stack:\n                return False\n            stack.pop()\n\n    return not stack\n"}
{"task_id": "HumanEval/62", "completion": "\ndef derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n\n    result = []\n    for i in range(1, len(xs)):\n        result.append(xs[i] * i)\n    return result\n"}
{"task_id": "HumanEval/63", "completion": "\nfunction fibfib(n):\n    if n == 0 or n == 1 or n == 2:\n        return n  # base case\n\n    # Initialize the first three elements of the sequence\n    a, b, c = 0, 0, 1\n\n    for i from 3 to n:\n        # Compute the next element of the sequence using the recursive formula\n        next_element = a + b + c\n        a, b, c = b, c, next_element\n\n    return c  # return the n-th element of the sequence\n"}
{"task_id": "HumanEval/64", "completion": "\ndef vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n\n    # Define vowels, making 'y' a vowel only at the end of the word\n    vowels = 'aeiou'\n    if s.endswith('y'):\n        vowels += 'y'\n\n    vowel_count = 0  # initialize counter\n    for i in range(len(s)):\n        if s[i].lower() in vowels:\n            vowel_count += 1\n\n    return vowel_count\n"}
{"task_id": "HumanEval/65", "completion": "\n    shift = abs(shift)\n    num_str = str(x)\n\n    if shift >= len(num_str):\n        return num_str[::-1]\n\n    shift_str = num_str[-shift:] + num_str[:-shift]\n    return shift_str\n"}
{"task_id": "HumanEval/66", "completion": "\n[Code]\ndef digitSum(s: str) -> int:\n    \"\"\" Returns the sum of the upper characters only ASCII codes in the given string.\n    >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\")\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\n    return sum(ord(c) for c in s if c.isupper())\n"}
{"task_id": "HumanEval/67", "completion": "\n[Code]\nfrom typing import List\n\n\ndef fruit_distribution(ingredients: str, total_fruits: int) -> int:\n    \"\"\"\n    Given a string of ingredients and the total number of fruits in a basket, return the number of mango fruits.\n\n    Parameters:\n    ingredients (str): String containing the number of apples and oranges, e.g. \"5 apples and 6 oranges\"\n    total_fruits (int): The total number of fruits in the basket\n\n    Returns:\n    int: The number of mango fruits in the basket\n    \"\"\"\n    import re\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n\n    for idx, elem in enumerate(numbers):\n        for idx2, elem2 in enumerate(numbers):\n            if idx != idx2:\n                distance = abs(elem - elem2)\n                if distance < threshold:\n                    return True\n\n    return False\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n\n\ndef fruit_distribution(s,n):\n    \"\"\"\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\n\n    # Extract the number of apples and oranges from the string\n    apples, oranges = map(int, re.findall(r'\\d+', s))\n\n    # Calculate the number of mango fruits\n    mangoes = total_fruits - apples - oranges\n\n    return mangoes\n"}
{"task_id": "HumanEval/68", "completion": "\nfrom typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n\n    return False\n"}
{"task_id": "HumanEval/69", "completion": "\n    frequency_dict = {}\n    for num in lst:\n        if num in frequency_dict:\n            frequency_dict[num] += 1\n        else:\n            frequency_dict[num] = 1\n\n    max_num = -1\n    for num, freq in frequency_dict.items():\n        if freq >= num and num > 0 and num > max_num:\n            max_num = num\n\n    return max_num\n"}
{"task_id": "HumanEval/70", "completion": "\ndef strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    unique_elements = sorted(set(lst))  # Step 1\n    indices = [i for i, x in enumerate(lst) if x in unique_elements]  # Step 1\n    sorted_indices = sorted(indices)  # Step 2\n\n    result = []\n    lastmin = True  # Step 3\n    for idx in sorted_indices:\n        if lastmin:\n            result.append(lst[idx])\n            lst.remove(lst[idx])  # Step 3\n            lastmin = not lastmin\n        else:\n            result.append(max(lst))  # Step 3\n            lst.remove(max(lst))  # Step 3\n            lastmin = not lastmin\n\n    if len(result) % 2 == 0 and lastmin:  # Step 3\n        result.append(min(lst))\n\n    return result\n"}
{"task_id": "HumanEval/71", "completion": "\ndef triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''\n"}
{"task_id": "HumanEval/72", "completion": "\n[Code]\ndef will_it_fly(q, w):\n    # Check if the list is balanced\n    reversed_q = q[::-1]\n    if reversed_q != q:\n        return False  # list is not balanced\n    \n    # Check if the sum of the elements is less than or equal to the maximum possible weight\n    sum_of_elements = sum(q)\n    if sum_of_elements > w:\n        return False  # sum of elements is too high\n    \n    return True\n"}
{"task_id": "HumanEval/73", "completion": "\n    n = len(arr)\n    dp = [[0] * n for _ in range(n)]\n\n    for i in range(n - 1, -1, -1):\n        dp[i][i] = 0\n        for j in range(i + 1, n):\n            if arr[i] == arr[j]:\n                dp[i][j] = dp[i + 1][j - 1]\n            else:\n                dp[i][j] = 1 + min(dp[i + 1][j], dp[i][j - 1])\n\n    return dp[0][n - 1]\n"}
{"task_id": "HumanEval/74", "completion": "\n[Code]\ndef total_match(lst1, lst2):\n    def total_char(lst):\n        return sum(len(s) for s in lst)\n\n    len1 = total_char(lst1)\n    len2 = total_char(lst2)\n\n    if len1 <= len2:\n        return lst1\n    elif len1 > len2:\n        return lst2\n    else:\n        return lst1\n"}
{"task_id": "HumanEval/75", "completion": "\n    def is_multiply_prime(a):\n        # Initialize list to store prime factors.\n        factors = []\n\n        # We need to know if  a can be divisible by number less then sqrt(a)\n        for i in range(2, int(a**0.5)+1):\n            while a % i == 0:\n                factors.append(i)\n                a = a // i\n\n        # add a itself if it's a prime number with prime factors less then sqrt(a) .\n        if a>2:\n            factors.append(a)\n\n        # Return True if there are 3 factors\n        return len(factors) == 3\n\n"}
{"task_id": "HumanEval/76", "completion": "\nimport math\n\n\ndef is_simple_power(x, n):\n    \"\"\"Check if a number x is a simple power of n.\n    A simple power of n means that n raised to an integer power equals x.\n    >>> is_simple_power(1, 4)\n    True\n    >>> is_simple_power(2, 2)\n    True\n    >>> is_simple_power(8, 2)\n    True\n    >>> is_simple_power(3, 2)\n    False\n    >>> is_simple_power(3, 1)\n    False\n    >>> is_simple_power(5, 3)\n    False\n    \"\"\"\n\n    # check edge cases\n    if x == 1:\n        return x == n\n    if n == 1:\n        return True\n\n    # calculate logarithm of x with base n\n    power = math.log(x, n)\n\n    # check if power is an integer\n    return power == int(power)\n"}
{"task_id": "HumanEval/77", "completion": "\n[Code]\ndef iscube(a: int) -> bool:\n    \"\"\"\n    Check if given integer is a cube of some integer number.\n\n    Args:\n        a (int): Input integer.\n\n    Returns:\n        bool: True if integer is a cube, False otherwise.\n\n    Examples:\n        >>> iscube(1)\n        True\n        >>> iscube(2)\n        False\n        >>> iscube(-1)\n        True\n        >>> iscube(64)\n        True\n        >>> iscube(0)\n        True\n        >>> iscube(180)\n        False\n    \"\"\"\n\n    # Pseudocode:\n    #   1. Start checking all integers from 1 (negative and positive), until we find a cube that equals to 'a' or we find that number that could be equal to root of 'a'.\n    #   2. We use negative possible roots as well, because we know that input to this function is always valid.\n\n    i = 1\n    while True:\n        cube = i ** 3\n        if cube == a:\n            # If we found match, return True\n            return True\n        elif cube > a:\n            # If found number that is greater than 'a', it means we already tried all possible integers. If 'a' is not a cube, we should return False as well.\n            return False\n        i += 1\n"}
{"task_id": "HumanEval/78", "completion": "\nfrom typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in giiven list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n\n"}
{"task_id": "HumanEval/79", "completion": "\ndef decimal_to_binary(decimal):\n    \"\"\"You will be given a number in decimal form and your task is to convert \\\n    it to binary format. The function should return a string, with each character \\\n    representing a binary number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the \\\n    end of the string. The extra characters are there to help with the format.\n\n    Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)   # returns \"db100000db\"\n    \"\"\"\n\n"}
{"task_id": "HumanEval/80", "completion": "\n[Code]\ndef is_happy(s: str) -> bool:\n    \"\"\"Check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct.\n    \"\"\"\n    if len(s) < 3:\n        return False  # String must be at least 3 characters long\n\n    # Iterate over the string in steps of 3\n    for i in range(0, len(s), 3):\n        chunk = s[i:i+3]\n        \n        # Check if all characters in the chunk are unique\n        if len(set(chunk)) != 3:\n            return False  # Chunk contains duplicate characters\n\n    return True  # All chunks have unique characters\n"}
{"task_id": "HumanEval/81", "completion": "\ndef numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n\n"}
{"task_id": "HumanEval/82", "completion": "\ndef prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\"\n"}
{"task_id": "HumanEval/83", "completion": "\nfrom typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n\n"}
{"task_id": "HumanEval/84", "completion": "\n    binary = ''\n    for digit in str(N):\n        binary += bin(int(digit))[2:]\n\n    return binary\n"}
{"task_id": "HumanEval/85", "completion": "\ndef add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n"}
{"task_id": "HumanEval/86", "completion": "\n[Code]\nfrom itertools import chain\n\ndef anti_shuffle(s):\n    \"\"\"\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n    \"\"\"\n\n    # Split the string into words and blank spaces\n    elements = s.split()\n\n    # Use a dictionary to keep track of the ASCII values of characters in each word\n    ascii_dict = {}\n\n    # Store the original index of each word or blank space\n    original_index = {}\n\n    # Iterate over the elements to get their ASCII values and original indices\n    for idx, elem in enumerate(chain(elements)):\n        original_index[idx] = elem\n        ascii_values = [ord(c) for c in elem]\n        ascii_dict[idx] = ascii_values\n\n    # Sort the ASCII values for each word in ascending order\n    for idx in ascii_dict:\n        ascii_dict[idx].sort()\n\n    # Create a new string where all characters in each word are in ascending order\n    result = []\n\n    for idx in ascii_dict:\n        new_word = ''.join([chr(ascii_val) for ascii_val in ascii_dict[idx]])\n        result.append(new_word)\n\n    # Join the resulting words and blank spaces back into a string\n    result_str = ' '.join(result)\n\n    return result_str\n"}
{"task_id": "HumanEval/87", "completion": "\n    result = []\n    for i, row in enumerate(lst):\n        try:\n            col = row.index(x)\n            result.append((i, col))\n        except ValueError:\n            pass\n\n    result.sort(key=lambda x: (x[0], -x[1]))  # Sort by row index and then by column index in descending order\n\n    return result\n"}
{"task_id": "HumanEval/88", "completion": "\n    # Create a copy of the array to avoid modifying the original array\n    array_copy = array.copy()\n\n    # Calculate the sum of the first and last index values\n    sum_first_last = array_copy[0] + array_copy[-1]\n\n    # Sort the array copy in ascending order if the sum is odd, or in descending order if the sum is even\n    array_copy.sort(reverse=(sum_first_last % 2 == 0))\n\n    return array_copy\n"}
{"task_id": "HumanEval/89", "completion": "\nfrom typing import List\n\ndef encrypt(s: str) -> str:\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\"\n"}
{"task_id": "HumanEval/90", "completion": "\n    [Code]\n    def next_smallest(lst):\n        \"\"\" Returns the 2nd smallest element of the list.\n        Return None if there is no such element.\n        \n        >>> next_smallest([1, 2, 3, 4, 5])\n        2\n        >>> next_smallest([5, 1, 4, 3, 2])\n        2\n        >>> next_smallest([])\n        None\n        >>> next_smallest([1, 1])\n        None\n        \"\"\"\n        if len(lst) < 2:\n            return None\n\n        lst.sort()\n        smallest = lst[0]\n        # Check if there's another unique element\n        for elem in lst[1:]:\n            if elem != smallest:\n                return elem\n\n        # If smallest element is repeated, return None\n        return None\n\n"}
{"task_id": "HumanEval/91", "completion": "\ndef is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    # split the string into sentences\n    sentences = S.split('. ')\n    sentences += S.split('? ')\n    sentences += S.split('! ')\n\n    # remove empty strings from the list\n    sentences = [s for s in sentences if s != '']\n\n    # count the number of sentences that start with 'I'\n    boredom_count = sum(1 for s in sentences if s.strip()[0].lower() == 'i')\n\n    return boredom_count\n"}
{"task_id": "HumanEval/92", "completion": "\nFOR each of the three numbers x, y, z\n  IF x is an integer AND y is an integer\n    FOR each combination of two numbers (x, y), (y, z), (x, z)\n      IF the sum of the two numbers equals the third number\n        RETURN True\n  ELSE IF one of the numbers is NOT an integer\n    RETURN False\nRETURN False\n"}
{"task_id": "HumanEval/93", "completion": "\ndef swap_case(message: str) -> str:\n    \"\"\"\n    This function takes a message, and swaps case of all letters.\n    \n    :param message: The input message\n    :return: The message with case swapped\n    \"\"\"\n    swap_case_result = \"\"\n    for c in message:\n        if c.islower():\n            swap_case_result += c.upper()\n        else:\n            swap_case_result += c.lower()\n    \n    return swap_case_result\n"}
{"task_id": "HumanEval/94", "completion": "\ndef is_prime(n):\n    \"\"\"Check if a number is prime.\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef skjkasdkd(lst):\n    \"\"\"Find the largest prime value and return the sum of its digits.\"\"\"\n    max_prime = 0\n    for num in lst:\n        if is_prime(num) and num > max_prime:\n            max_prime = num\n    return sum(int(digit) for digit in str(max_prime))\n\n"}
{"task_id": "HumanEval/95", "completion": "\nfrom typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n"}
{"task_id": "HumanEval/96", "completion": "\nfrom typing import List\n\n\ndef count_up_to(n: int) -> List[int]:\n    \"\"\"Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1) => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\n\n    result = []\n\n    if n == 0 or n == 1:\n        return []\n\n    def is_prime(num: int) -> bool:\n        \"\"\" checks if a number is prime or not \"\"\"\n        if num <= 1:\n            return False\n        if num <= 3:\n            return True\n        if num % 2 == 0 or num % 3 == 0:\n            return False\n        i = 5\n        while i * i <= num:\n            if num % i == 0 or num % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n\n    for i in range(2, n):\n        if is_prime(i):\n            result.append(i)\n            if len(result) == n - 1:\n                break\n\n    return result\n"}
{"task_id": "HumanEval/97", "completion": "\n[Code]\ndef multiply(a, b):\n    # Extract unit digits from both numbers\n    a_unit = a % 10\n    b_unit = b % 10\n\n    # Calculate product of unit digits\n    result = a_unit * b_unit\n\n    return result\n"}
{"task_id": "HumanEval/98", "completion": "\n    return sum(1 for i, c in enumerate(s.upper()) if i % 2 == 0 and c in 'AEIOU')\n\n"}
{"task_id": "HumanEval/99", "completion": "\n    import math\n    from typing import Union\n\n\n    def closest_integer(value: Union[int, float, str]) -> int:\n        \"\"\"\n        Returns the closest integer to the input value.\n        If the number is equidistant from two integers, round it away from zero.\n\n        :param value: A value (string) representing a number\n        :return: The closest integer to the input value\n        \"\"\"\n\n        # Convert the input value to a float\n        num = float(value)\n\n        # Calculate the distance to the next integer\n        dist_next_int = math.ceil(num) - num\n        dist_prev_int = num - math.floor(num)\n\n        # If num is equidistant from two integers, round it away from zero\n        if dist_next_int == dist_prev_int:\n            if num > 0:\n                return math.ceil(num)\n            else:\n                return math.floor(num)\n\n        # Otherwise, return the integer that is closest to num\n        elif dist_next_int < dist_prev_int:\n            return math.ceil(num)\n        else:\n            return math.floor(num)\n\n"}
{"task_id": "HumanEval/100", "completion": "\n    def make_a_pile(n):\n        \"\"\" Given a positive integer n, you have to make a pile of n levels of stones.\n            The first level has n stones.\n            The number of stones in the next level is:\n                - the next odd number if n is odd.\n                - the next even number if n is even.\n            Return the number of stones in each level in a list, where element at index\n            i represents the number of stones in the level (i+1).\n\n            Examples:\n            >>> make_a_pile(3)\n            [3, 5, 7]\n            \"\"\"\n        result = [n]  # First level has n stones\n\n        i = n  # Current number\n        while len(result) < n:  # While there are n levels\n            if i % 2 == 0:  # If number is even\n                i += 1  # Next number is next even number\n            else:  # If number is odd\n                i += 2  # Next number is next odd number\n            result.append(i)  # Add next number to the result list\n\n        return result\n"}
{"task_id": "HumanEval/101", "completion": "\nfrom typing import List\n\n\ndef words_string(s: str) -> List[str]:\n    \"\"\"\n    Split the input string into words and return a list of the words.\n\n    Args:\n    s (str): The input string.\n\n    Returns:\n    List[str]: A list of words from the input string.\n    \"\"\"\n\n    # Replace commas with spaces to create a consistent space-separated string\n    s = s.replace(',', ' ')\n\n    # Split the string into words\n    words = s.split()\n\n    # Return the list of words\n    return words\n"}
{"task_id": "HumanEval/102", "completion": "\n    # Initialize result with -1 to handle case when no even number found\n    result = -1\n\n    # Check if x is even number\n    if x % 2 == 0:\n        result = x\n    elif x + 1 <= y:\n        result = x + 1\n\n    # If result is still -1 after checking x, check y\n    if result == -1 and y % 2 == 0 and result == -1:\n        result = y\n\n    return result\n"}
{"task_id": "HumanEval/103", "completion": "\n    if n > m:\n        return -1\n\n    avg = round((n + m) / 2)\n\n    return bin(avg)[2:]\n"}
{"task_id": "HumanEval/104", "completion": "\n\ndef unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n\n"}
{"task_id": "HumanEval/105", "completion": "\nfrom typing import List\nfrom collections import deque\n\ndef by_length(arr: List[int]) -> List[str]:\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    \n    Parameters:\n    arr (List[int]): Input array of integers\n    \n    Returns:\n    List[str]: Array of corresponding string names for numbers in the array.\n    \"\"\"\n"}
{"task_id": "HumanEval/106", "completion": "\n[Code]\ndef f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            factorial = 1\n            for j in range(1, i + 1):\n                factorial *= j\n            result.append(factorial)\n        else:\n            sum_of_numbers = 0\n            for j in range(1, i + 1):\n                sum_of_numbers += j\n            result.append(sum_of_numbers)\n\n    return result\n"}
{"task_id": "HumanEval/107", "completion": "\n    even_count = 0\n    odd_count = 0\n\n    for i in range(1, n + 1):\n        str_i = str(i)\n        if str_i == str_i[::-1]:\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n\n    return (even_count, odd_count)\n"}
{"task_id": "HumanEval/108", "completion": "\n[Code]\ndef count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\n\n    def sum_of_digits(n):\n        return sum(int(digit) for digit in str(abs(n)))\n\n    return sum(1 for num in arr if sum_of_digits(num) > 0)\n"}
{"task_id": "HumanEval/109", "completion": "\n[Code]\ndef move_one_ball(arr):\n    \"\"\"Check if it is possible to get a sorted array by performing right shift operation\n    on the given array.\n    \n    Args:\n    arr (List[int]): The input array of integers.\n    \n    Returns:\n    bool: True if it is possible to get a sorted array, False otherwise.\n    \"\"\"\n    # If the array is empty, return True\n    if not arr:\n        return True\n\n    # Create a copy of the array and sort it\n    sorted_arr = sorted(arr)\n\n    # Initialize a variable to store the number of right shifts\n    right_shifts = 0\n\n    # Iterate over the array and the sorted array simultaneously\n    for i, (x, y) in enumerate(zip(arr, sorted_arr)):\n        # If the current elements are not equal, increment the right shifts\n        if x != y:\n            # If the current element in the sorted array is greater than the current element in the original array,\n            # it means we need to perform more right shifts to get the correct order\n            if y > x:\n                # If the current element in the sorted array is greater than the last element in the original array,\n                # it means we need to perform more right shifts than the length of the array\n                if y > arr[-1]:\n                    return False\n                # Otherwise, increment the right shifts by the difference between the current index and the last index\n                right_shifts += len(arr) - i - 1\n            # If the current element in the sorted array is less than the current element in the original array,\n            # it means we need to perform more right shifts to get the correct order\n            else:\n                # If the current element in the sorted array is less than the first element in the original array,\n                # it means we need to perform more right shifts than the length of the array\n                if y < arr[0]:\n                    return False\n                # Otherwise, increment the right shifts by the difference between the current index and 0\n                right_shifts += i + 1\n\n    # If the number of right shifts is less than or equal to the length of the array,\n    # it means we can get the sorted array by performing the right shift operation\n    return True\n\n"}
{"task_id": "HumanEval/110", "completion": "\n    even_list = []\n    for num in lst1:\n        if num % 2 == 0:\n            even_list.append(num)\n\n    for even_num in even_list:\n        lst1.remove(even_num)\n\n    for i in range(len(lst1)):\n        for j in range(len(lst2)):\n            if lst1[i] % 2 != 0 and lst2[j] % 2 == 0:\n                lst1[i], lst2[j] = lst2[j], lst1[i]\n\n    if all(num % 2 == 0 for num in lst1):\n        return \"YES\"\n    else:\n        return \"NO\"\n"}
{"task_id": "HumanEval/111", "completion": "\n    # Create an empty dictionary to store the character counts\n    char_count = {}\n\n    # Iterate over the input string and count the occurrence of each character\n    for c in test.split():\n        if c in char_count:\n            char_count[c] += 1\n        elif c:\n            char_count[c] = 1\n\n    # Find the maximum count\n    max_count = max(char_count.values(), default=0)\n\n    # Filter the characters with the maximum count\n    max_chars = {c: count for c, count in char_count.items() if count == max_count}\n\n    return max_chars\n"}
{"task_id": "HumanEval/112", "completion": "\ndef reverse_delete(s: str, c: str) -> tuple:\n    \"\"\"Return a tuple containing the result string and True/False for the 'is string palindrome'\n\n    Parameters:\n    s (str): The original string\n    c (str): The target characters to be deleted\n    \"\"\"\n\n    # Convert the characters to be deleted into a set for O(1) look ups\n    chars_to_delete = set(c)\n    \n    # Initialize an empty string to build the result string\n    result = ''\n\n    # Iterate over each character in the original string\n    for char in s:\n        # Check if the character is not in the set of characters to be deleted\n        if char not in chars_to_delete:\n            # Append the character to the result string\n            result += char\n\n    # Check if the result string is the same when reversed\n    is_palindrome = result == result[::-1]\n\n    # Return a tuple containing the result string and the 'is palindrome' result\n    return result, is_palindrome\n"}
{"task_id": "HumanEval/113", "completion": "\ndef odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\"\"\"\n    \n    # Initialize an empty list to store the results\n    result = []\n    \n    # Iterate over each string in the input list\n    for string in lst:\n        # Initialize a counter to count the odd digits\n        odd_count = 0\n        \n        # Iterate over each character in the string\n        for char in string:\n            # Check if the character is a digit\n            if char.isdigit():\n                # Convert the character to an integer and check if it's odd\n                if int(char) % 2 != 0:\n                    # If the digit is odd, increment the counter\n                    odd_count += 1\n        \n        # The query string is fixed, so we can directly replace the\n        # string index with the odd count and return the result\n        result.append(\"the number of odd elements \" + str(odd_count) + \"n the str\" + str(odd_count) + \"ng \" + str(odd_count) + \" of the \" + str(odd_count) + \"nput.\")\n    \n    # Return the list of results\n    return result\n\n"}
{"task_id": "HumanEval/114", "completion": "\n    min_sum = float('inf')\n    current_sum = 0\n\n    for num in nums:\n        current_sum += num\n        min_sum = min(min_sum, current_sum)\n\n        if current_sum > 0:\n            current_sum = 0\n\n    if min_sum == float('inf') and current_sum > 0:\n        min_sum = current_sum\n\n    return min_sum\n"}
{"task_id": "HumanEval/115", "completion": "\nimport math\n\ndef max_fill(grid, capacity):\n    # Calculate the total amount of water in the wells\n    total_water = sum(sum(row) for row in grid)\n    \n    # Calculate the number of times we need to lower the buckets\n    num_buckets_needed = math.ceil(total_water / capacity)\n    \n    return num_buckets_needed\n"}
{"task_id": "HumanEval/116", "completion": "\ndef sort_array(arr):\n    \"\"\"\n\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n\n    # Initialize an empty list to store the decimal value and binary representation count\n    sorted_array = []\n\n    # For each element in the input array\n    for num in arr:\n        # Convert the element to its binary representation and count the number of ones\n        bin_count = bin(num)[2:].count('1')\n\n        # Store the decimal value and the binary representation count as a tuple\n        sorted_array.append((num, bin_count))\n\n    # Sort the list of tuples based on the binary representation count and then the decimal value\n    sorted_array.sort(key=lambda x: (x[1], x[0]))\n\n    # Extract the sorted elements from the sorted list of tuples\n    final_sorted_array = [x[0] for x in sorted_array]\n\n    return final_sorted_array\n"}
{"task_id": "HumanEval/117", "completion": "\n    result = []\n    current_word = ''\n    current_consonants = 0\n\n    for c in s:\n        if c.isalpha():\n            current_word += c\n            if c.lower() not in 'aeiou':\n                current_consonants += 1\n        else:\n            if current_word and current_consonants == n:\n                result.append(current_word)\n            current_word = ''\n            current_consonants = 0\n\n    if current_word and current_consonants == n:\n        result.append(current_word)\n\n    return result\n"}
{"task_id": "HumanEval/118", "completion": "\n    vowels = 'aeiouAEIOU'\n\n    for idx in range(len(word) - 2):\n        if word[idx] not in vowels and word[idx + 1] not in vowels and word[idx + 2] not in vowels:\n            if word[idx + 1] in vowels:\n                return word[idx + 1]\n\n    return ''\n"}
{"task_id": "HumanEval/119", "completion": "\nimport collections\n\ndef match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n"}
{"task_id": "HumanEval/120", "completion": "\ndef maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n"}
{"task_id": "HumanEval/121", "completion": "\n    even_position_sum = 0\n    for idx, elem in enumerate(lst):\n        if idx % 2 == 0 and elem % 2 != 0:\n            even_position_sum += elem\n\n    return even_position_sum\n"}
{"task_id": "HumanEval/122", "completion": "\n    sum_of_elements = 0\n\n    for idx in range(k):\n        num_str = str(arr[idx])\n\n        if len(num_str) <= 2:\n            sum_of_elements += arr[idx]\n\n    return sum_of_elements\n\n"}
{"task_id": "HumanEval/123", "completion": "\n    collatz_seq = [n]\n    while collatz_seq[-1] != 1:\n        if collatz_seq[-1] % 2 == 0:\n            collatz_seq.append(collatz_seq[-1] // 2)\n        else:\n            collatz_seq.append(3 * collatz_seq[-1] + 1)\n\n    odd_collatz = [num for num in collatz_seq if num % 2 != 0]\n    return sorted(odd_collatz)\n"}
{"task_id": "HumanEval/124", "completion": "\nimport re\n\ndef valid_date(date):\n    # 1. Validate that the date string is not empty\n    if not date:\n        return False\n\n    # 2. Extract the month, day, and year from the string\n    match = re.match(r'^(\\d{2})-(\\d{2})-(\\d{4})$', date)\n    if not match:\n        return False\n\n    month, day, year = map(int, match.groups())\n\n    # 3. Validate that the month is between 1 and 12\n    if not 1 <= month <= 12:\n        return False\n\n    # 4. Validate that the number of days is valid for the given month\n    if month in [1, 3, 5, 7, 8, 10, 12]:  # 31 days\n        if not 1 <= day <= 31:\n            return False\n    elif month in [4, 6, 9, 11]:  # 30 days\n        if not 1 <= day <= 30:\n            return False\n    elif month == 2:  # Feb, do a leap year check\n        if not 1 <= day <= 29:\n            return False\n    else:\n        return False\n\n    return True\n"}
{"task_id": "HumanEval/125", "completion": "\n    words = txt.split()\n    if not words:\n        words = txt.replace(',', ' ').split()\n        if not words:\n            return sum(1 for i in range(ord('a'), ord('z')+1) if (i-1) % 2 == 0)\n\n    return words\n"}
{"task_id": "HumanEval/126", "completion": "\ndef is_sorted(lst):\n    '''\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n\n    Examples\n    is_sorted([5]) \u279e True\n    is_sorted([1, 2, 3, 4, 5]) \u279e True\n    is_sorted([1, 3, 2, 4, 5]) \u279e False\n    is_sorted([1, 2, 3, 4, 5, 6]) \u279e True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279e True\n    is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279e False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279e True\n    is_sorted([1, 2, 2, 2, 3, 4]) \u279e False\n    '''\n\n    # Check if the list is sorted in ascending order\n    if lst != sorted(lst):\n        return False\n\n    # Check if there are any duplicate numbers\n    if len(lst) != len(set(lst)):\n        return False\n\n    return True\n"}
{"task_id": "HumanEval/127", "completion": "\ndef is_prime(n: int) -> bool:\n    \"\"\"Check if a number is prime.\"\"\"\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\n\ndef intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n    \"\"\"\n    # Find the intersection of the two intervals\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n\n    # Check if the two intervals intersect\n    if start <= end:\n        # Calculate the length of the intersection\n        length = end - start + 1\n        # Check if the length of the intersection is a prime number\n        if is_prime(length):\n            return \"YES\"\n        else:\n            return \"NO\"\n    else:\n        return \"NO\"\n"}
{"task_id": "HumanEval/128", "completion": "\nfrom typing import List, Union\n\n\ndef prod_signs(arr: List[Union[int, float]]) -> Union[int, float, None]:\n    \"\"\"\n    Returns sum of magnitudes of integers multiplied by product of all signs of each number in the array.\n    Note: returns None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) is None\n    \"\"\"\n\n    if not arr:  # edge case: empty list\n        return None\n\n    product_of_signs = 1\n    magnitude_sum = 0\n\n    for elem in arr:\n        if elem == 0:\n            continue  # don't count 0 elements\n        elif elem < 0:  # < 0 -> 1 (for multiplicative)\n            product_of_signs *= -1\n        magnitude_sum += abs(elem)  # accumulate magnitude\n\n    return magnitude_sum * product_of_signs  # avoid excessive data type conversion\n\n"}
{"task_id": "HumanEval/129", "completion": "\nfrom collections import deque\nfrom typing import List\n\ndef find_min_path(grid: List[List[int]], k: int) -> List[int]:\n    \"\"\"\n    Finds the minimum path of length k in the grid.\n    \n    Args:\n    grid (List[List[int]]): A grid with N rows and N columns (N >= 2) where each cell contains a value.\n    k (int): The length of the path.\n    \n    Returns:\n    List[int]: An ordered list of the values on the cells that the minimum path go through.\n    \"\"\"\n\n    def get_neighbors(i: int, j: int) -> List[tuple]:\n        \"\"\"\n        Gets the neighboring cells of the cell at position (i, j).\n        \n        Args:\n        i (int): The row index of the cell.\n        j (int): The column index of the cell.\n        \n        Returns:\n        List[tuple): A list of tuples, where each tuple contains the row and column indices of a neighboring cell.\n        \"\"\"\n        neighbors = []\n        if i > 0:\n            neighbors.append((i - 1, j))\n        if i < len(grid) - 1:\n            neighbors.append((i + 1, j))\n        if j > 0:\n            neighbors.append((i, j - 1))\n        if j < len(grid[0]) - 1:\n            neighbors.append((i, j + 1))\n        return neighbors\n\n    # Create a queue for BFS and add all initial cells with their values\n    queue = deque([(positions, value) for positions, value in enumerate(grid[0])])\n    visited = [False] * len(grid[0])\n\n    for _ in range(k - 1):\n        # Get the size of the current queue\n        size = len(queue)\n        min_value = float('inf')\n\n        # Process all cells in the current level\n        for _ in range(size):\n            positions, value = queue.popleft()\n            for i, j in get_neighbors(positions // len(grid[0]), positions % len(grid[0])):\n                new_value = grid[i][j]\n                if not visited[i * len(grid[0]) + j]:\n                    # Add the new cell to the queue and mark it as visited\n                    queue.append(((i * len(grid[0]) + j, new_value)))\n                    visited[i * len(grid[0]) + j] = True\n                    # Update the minimum value if necessary\n                    min_value = min(min_value, new_value)\n\n    min_path = []\n    # Backtrack to find the minimum path of length k\n    while queue:\n        _, value = queue.popleft()\n        if value == min_value:\n            min_path.append(value)\n        else:\n            queue.append((0, min_value))\n\n    return min_path[::-1]\n"}
{"task_id": "HumanEval/130", "completion": "\ndef tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n\n    result = [3, 1, 2]\n\n    for i in range(3, n + 1):\n        if i % 2 != 0:\n            result.append(result[i - 3] + result[i - 2] + result[i-1])\n        else:\n            result.append(int(1 + i / 2))\n\n    return result\n"}
{"task_id": "HumanEval/131", "completion": "\n    product = 1\n\n    # Convert the number to a string to easily iterate over each digit\n    n_str = str(n)\n\n    for digit in n_str:\n        # Convert the current digit back to an integer\n        digit_int = int(digit)\n\n        # Check if the digit is odd\n        if digit_int % 2 != 0:\n            # Multiply the product by the odd digit\n            product *= digit_int\n\n    return product\n"}
{"task_id": "HumanEval/132", "completion": "\ndef is_nested(string):\n    stack = []\n    for c in string:\n        if c == '[':\n            stack.append(c)\n        elif c == ']':\n            if not stack:\n                return False\n            stack.pop()\n\n    return not stack\n"}
{"task_id": "HumanEval/133", "completion": "\nfrom typing import List\n\n\ndef sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n\n\n\"\"\"\n"}
{"task_id": "HumanEval/134", "completion": "\n    txt = txt.strip()  # remove leading and trailing spaces\n    if not txt:  # check if the string is empty\n        return False\n    last_char = txt[-1].lower()  # get the last character and convert it to lowercase\n    return last_char.isalpha() and not last_char.isspace() and (txt[-2:] == 'e ' if len(txt) == 3 else not txt[-2].isalpha() and not txt[-2].isspace())\n"}
{"task_id": "HumanEval/135", "completion": "\n    max_index = float('-inf')\n\n    for idx, elem in enumerate(arr):\n        if idx > 0 and elem <= arr[idx - 1]:\n            max_index = max(max_index, idx)\n\n    return max_index if max_index != float('-inf') else -1\n"}
{"task_id": "HumanEval/136", "completion": "\ndef largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n"}
{"task_id": "HumanEval/137", "completion": "\n[Code]\ndef compare_one(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n    Parameters:\n        a (int or float or str): The first number.\n        b (int or float or str): The second number.\n    Returns:\n        int or float or str: The larger of a and b.\n    \"\"\"\n\n    # Try to convert both a and b to float\n    try:\n        a = float(a)\n        b = float(b)\n    # If a is a string and cannot be converted to float, it must be the larger number\n    except ValueError:\n        if a == a:  # Straitjacket to confirm a is a string not due to ValueError on a\n            return a\n        else:\n            raise ValueError(\"a is not a string, float or int\")\n\n    # Compare a and b\n    if a > b:\n        return a\n    elif a == b:\n        return None\n    else:\n        return b\n"}
{"task_id": "HumanEval/138", "completion": "\ndef is_equal_to_sum_even(n: int) -> bool:\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    is_equal_to_sum_even(4) == False\n    is_equal_to_sum_even(6) == False\n    is_equal_to_sum_even(8) == True\n    \"\"\"\n"}
{"task_id": "HumanEval/139", "completion": "\nfunction special_factorial(n):\n    result = 1\n    for i from n down to 1:\n        result = result * math.factorial(i)\n    return result\n"}
{"task_id": "HumanEval/140", "completion": "\ndef fix_spaces(text: str) -> str:\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\"\n"}
{"task_id": "HumanEval/141", "completion": "\n    def is_valid_name(name: str) -> bool:\n        # Check if the name contains exactly one dot\n        if name.count('.') != 1:\n            return False\n\n        # Split the name into two parts at the dot\n        name_before_dot, name_after_dot = name.split('.')\n\n        # Check if the name before the dot starts with a letter\n        if not name_before_dot[0].isalpha():\n            return False\n\n        # Check if the name after the dot is one of the allowed extensions\n        if name_after_dot not in ['txt', 'exe', 'dll']:\n            return False\n\n        # Check if there are more than three digits in the name\n        if sum(c.isdigit() for c in name) > 3:\n            return False\n\n        return True\n\n    return 'Yes' if is_valid_name(file_name) else 'No'\n"}
{"task_id": "HumanEval/142", "completion": "\nfrom typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n\n    if threshold < 0:\n        return True  # For negative thresholds, all pairs have distance less than threshold.\n\n    for idx, elem in enumerate(numbers):\n        for idx2, elem2 in enumerate(numbers):\n            if idx != idx2:\n                distance = abs(elem - elem2)\n                if distance < threshold:\n                    return True\n\n    return False\n"}
{"task_id": "HumanEval/143", "completion": "\n    def is_prime(n: int) -> bool:\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    result = []\n\n    for word in words:\n        if is_prime(len(word)):\n            result.append(word)\n\n    return ' '.join(result)\n"}
{"task_id": "HumanEval/144", "completion": "\nimport re\n\n\ndef simplify(x, n):\n    \"\"\"Your task is to implement a function that will simplify the expression\n    x * n. The function returns True if x * n evaluates to a whole number and False\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = True\n    simplify(\"1/6\", \"2/1\") = False\n    simplify(\"7/10\", \"10/2\") = False\n    \"\"\"\n\n    # Step 1: Extract numerator and denominator from the string\n    def extract_fraction(s):\n        m = re.search(r'(\\d+)/(\\d+)', s)\n        return (int(m.group(1)), int(m.group(2)))\n\n    x_num, x_den = extract_fraction(x)\n    n_num, n_den = extract_fraction(n)\n\n    # Step 2: If x and n are expressed with different denominator, we need to find a common one\n    def common_denominator(a, b):\n        return a * b // math.gcd(a, b)\n\n    common_den = common_denominator(x_den, n_den)\n    new_x_num = x_num * (common_den // x_den)\n    new_n_num = n_num * (common_den // n_den)\n    product_num = new_x_num * new_n_num\n\n    # Step 3: Check if the product is a whole number\n    return product_num % common_den == 0\n\n\nimport math\n"}
{"task_id": "HumanEval/145", "completion": "\n[Code]\nfrom typing import List\n\n\ndef order_by_points(nums: List[int]) -> List[int]:\n    \"\"\" Return sorted list of given integers, where sorting is based on the sum of their digits.\n    Items with similar sum of digits are ordered based on their original index.\n    >>> order_by_points([1, 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n    []\n    \"\"\"\n\n    # Step 1: Create a list of tuples, where each tuple contains the original index and the sum of digits for each number\n    index_sum_list = [(i, sum(int(digit) for digit in str(abs(num)))) for i, num in enumerate(nums)]\n\n    # Step 2: Sort this list first based on the sum of digits, then based on the original index\n    sorted_list = sorted(index_sum_list, key=lambda x: (x[1], x[0]))\n\n    # Step 3: Create a new list with the numbers sorted according to the sorted list of tuples\n    sorted_nums = [num for _, num in sorted(index_sum_list, key=lambda x: (x[1], x[0]))]\n\n    return sorted_nums\n\n"}
{"task_id": "HumanEval/146", "completion": "\ndef specialFilter(nums):\n    \"\"\"Return the number of elements in the array that are greater than 10 \n    and both first and last digits of a number are odd (1, 3, 5, 7, 9).\n    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33, -2, -3, 45, 21, 109])\n    2\n    \"\"\"\n\n    count = 0\n\n    for num in nums:\n        # Check if the number is greater than 10\n        if num > 10:\n            # Get the last digit of the number using the modulus operator\n            last_digit = num % 10\n            # Get the first digit of the number by integer division\n            first_digit = abs(num // 10)\n            # Check if both digits are odd\n            if last_digit % 2 != 0 and first_digit % 2 != 0:\n                # If both digits are odd, increment the count\n                count += 1\n\n    return count\n"}
{"task_id": "HumanEval/147", "completion": "\n    max_arr = [i * i - i + 1 for i in range(1, n + 1)]\n    results = set()\n\n    for i, elem_i in enumerate(max_arr):\n        for j, elem_j in enumerate(max_arr[i + 1:], i + 1):\n            for k, elem_k in enumerate(max_arr[j + 1:], j + 1):\n                if (elem_i + elem_j + elem_k) % 3 == 0:\n                    results.add((elem_i, elem_j, elem_k))\n\n    return len(results)\n\n"}
{"task_id": "HumanEval/148", "completion": "\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    planet_order = {\"Mercury\": 0, \"Venus\": 1, \"Earth\": 2, \"Mars\": 3, \"Jupiter\": 4, \"Saturn\": 5, \"Uranus\": 6, \"Neptune\": 7}\n\n    if planet1 not in planet_order or planet2 not in planet_order:\n        return ()\n\n    start_idx = min(planet_order[planet1], planet_order[planet2])\n    end_idx = max(planet_order[planet1], planet_order[planet2])\n\n    return tuple(planets[start_idx+1:end_idx])\n"}
{"task_id": "HumanEval/149", "completion": "\nfrom typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n"}
{"task_id": "HumanEval/150", "completion": "\nfrom typing import Callable, Tuple\n\n\ndef is_prime(n: int, max_divisor: int = None) -> bool:\n    \"\"\"Check if a number `n` is prime.\"\"\"\n    if max_divisor is None:\n        max_divisor = int(n**0.5) + 1\n    if n < 2:\n        return False\n    for d in range(2, min(max_divisor, int(n**0.5) + 1)):\n        if n % d == 0:\n            return False\n    return True\n\n\ndef x_or_y(n: int, x: int, y: int) -> int:\n    \"\"\"Return `x` if `n` is a prime number, otherwise return `y`.\"\"\"\n    return x if is_prime(n) else y\n"}
{"task_id": "HumanEval/151", "completion": "\n    result = 0\n\n    for num in lst:\n        if num > 0 and num % 2 != 0:\n            result += num ** 2\n\n    return result\n\n"}
{"task_id": "HumanEval/152", "completion": "\n    result = []\n    \n    for game, guess in zip(game, guess):\n        if game == guess:\n            result.append(0)\n        else:\n            result.append(abs(game - guess))\n\n    return result\n"}
{"task_id": "HumanEval/153", "completion": "\n    strongest_extension = None\n    highest_strength = float('-inf')\n\n    for extension in extensions:\n        cap = sum(1 for c in extension if c.isupper())\n        sm = sum(1 for c in extension if c.islower())\n        strength = cap - sm\n\n        if strength > highest_strength:\n            highest_strength = strength\n            strongest_extension = extension\n        elif strength == highest_strength:\n            # if there's a tie, keep the first occurrence\n            break\n\n    return f'{class_name}.{strongest_extension}'\n"}
{"task_id": "HumanEval/154", "completion": "\nfrom typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n"}
{"task_id": "HumanEval/155", "completion": "\n    [Code]\ndef even_odd_count(num: int) -> tuple:\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n\n    # Convert the absolute value of num to string\n    num_str = str(abs(num))\n\n    # Use a dictionary to map each character to whether it is even or odd\n    even_char = '0'\n    odd_chars = '13579'\n\n    # Split the string into a list of characters\n    num_list = list(num_str)\n\n    # Base cases: If the number is zero or empty.\n    if len(num_list) == 0 or len(num_list) == 1:\n        return (len(num_list), 0) if num > 0 else (0, len(num_list))\n\n    # Initialize counts for even and odd digits\n    even_count = 0\n    odd_count = len(num_list)\n\n    # Process every digit\n    for digit in num_list:\n        # Check whether the current digit is even or odd\n        if digit in odd_chars:\n            # If it is odd, decrement the count of odd digits\n            odd_count -= 1\n        else:\n            # If it is even, increment the count of even digits\n            even_count += 1\n\n    return (even_count, odd_count)\n"}
{"task_id": "HumanEval/156", "completion": "\n[Code]\nfrom typing import Dict\n\n\ndef int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    # Define a dictionary to store the Roman numeral values\n    roman_values = {\n        1000: 'm',\n        900: 'cm',\n        500: 'd',\n        400: 'cd',\n        100: 'c',\n        90: 'xc',\n        50: 'l',\n        40: 'xl',\n        10: 'x',\n        9: 'ix',\n        5: 'v',\n        4: 'iv',\n        1: 'i'\n    }\n\n    # Check the input number\n    if not isinstance(number, int) or number < 1 or number > 1000:\n        raise ValueError(\"Input must be an integer between 1 and 1000\")\n\n    # Initialize the result string\n    result = ''\n\n    # Iterate over the Roman numeral values in descending order\n    for value, numeral in sorted(roman_values.items(), reverse=True):\n        # Subtract the current Roman numeral value from the number as many times as possible\n        while number >= value:\n            number -= value\n            result += numeral\n\n    # Return the result in lowercase\n    return result.lower()\n"}
{"task_id": "HumanEval/157", "completion": "\ndef right_angle_triangle(a, b, c):\n    \"\"\" Check if three given sides form a right-angled triangle.\n    Return True if Triangle Inequality Holds, and a square of one side\n    is less than the square of the sum or the difference of the other two sides.\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1, 2, 3)\n    False\n    \"\"\"\n"}
{"task_id": "HumanEval/158", "completion": "\n    max_chars = 0\n    result = \"\"\n\n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_chars:\n            max_chars = unique_chars\n            result = word\n        elif unique_chars == max_chars:\n            result = min(result, word)\n\n    return result\n"}
{"task_id": "HumanEval/159", "completion": "\n    total_eaten = number\n    remaining = remaining - number\n    remaining_needed = need - number\n\n    if remaining < 0:\n        total_needed = need\n        remaining_stock = 0\n    else:\n        total_needed = need\n        if remaining_needed > remaining:\n            total_needed = number + remaining\n            remaining_stock = 0\n        else:\n            total_needed = number + remaining_needed\n            remaining_stock = remaining - remaining_needed\n\n    return total_eaten + total_needed, remaining_stock\n"}
{"task_id": "HumanEval/160", "completion": "\nfrom typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n\n    # Step 1: Sort the list in ascending order to make it easier to compare elements\n    numbers.sort()\n    \n    # Step 2: Iterate through each pair of adjacent elements in the sorted list\n    for idx, elem in enumerate(numbers):\n        if idx != len(numbers) - 1: # Make sure we are not at the last element\n            distance = abs(elem - numbers[idx + 1]) # Calculate the distance between the two elements\n            if distance < threshold: # If the distance is smaller than the threshold, return True\n                return True\n\n    # If we have iterated through all pairs of adjacent elements and haven't returned True, we return False\n    return False\n\n\n"}
{"task_id": "HumanEval/161", "completion": "\n    s = list(s)\n    result = []\n\n    for char in s:\n        if char.isalpha():\n            if char.islower():\n                result.append(char.upper())\n            else:\n                result.append(char.lower())\n        else:\n            result.append(char)\n\n    if not any(char.isalpha() for char in result):\n        return ''.join(result[::-1])\n\n    return ''.join(result)\n\n"}
{"task_id": "HumanEval/162", "completion": "\nimport hashlib\n\ndef string_to_md5(text: str) -> str:\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n\n    if not text:\n        return None\n\n    # We create an MD5 hash object\n    md5_hash = hashlib.md5()\n\n    # Update the hash object with the bytes of the string\n    md5_hash.update(text.encode('utf-8'))\n\n    # Get the hexadecimal representation of the MD5 hash\n    md5_hex = md5_hash.hexdigest()\n\n    return md5_hex\n\n"}
{"task_id": "HumanEval/163", "completion": "\n    # We can use a generator expression with a for loop to generate even digits between a and b\n    even_digits = (num for num in range(min(a, b), max(a, b) + 1) if num % 2 == 0)\n\n    return sorted(list(even_digits))\n"}
