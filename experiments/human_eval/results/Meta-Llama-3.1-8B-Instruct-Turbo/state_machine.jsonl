{"task_id": "HumanEval/0", "completion": "\nfrom typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\"\n    Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n\n    Args:\n    numbers (List[float]): A list of float numbers.\n    threshold (float): The maximum allowed difference between two numbers.\n\n    Returns:\n    bool: True if any two numbers are closer to each other than the threshold, False otherwise.\n    \"\"\"\n    # Calculate the length of the list of numbers\n    n = len(numbers)\n\n    # If the list has 1 or 0 elements, there are no possible pairs to compare.\n    if n < 2:\n        return False\n\n    # Iterate over all pairs of numbers in the list.\n    for i in range(n):\n        for j in range(i + 1, n):\n            # If the difference between the two numbers is less than the threshold, return True.\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n\n    # If no pair of numbers was found to be closer than the threshold, return False.\n    return False\n\n\n# Test cases\nprint(has_close_elements([1.0, 2.0, 3.0], 0.5))  # False\nprint(has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3))  # True\n"}
{"task_id": "HumanEval/1", "completion": "\nfrom typing import List\n\nimport re\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\"\n    Input to this function is a string containing multiple groups of nested parentheses.\n    The goal is to separate those groups into separate strings and return the list of those.\n\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other.\n    Ignore any spaces in the input string.\n\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # Remove spaces from the input string\n    paren_string = paren_string.replace(' ', '')\n\n    # Find all groups of nested parentheses\n    groups = re.findall(r'\\([^()]+\\)', paren_string)\n\n    return groups\n"}
{"task_id": "HumanEval/2", "completion": "\nimport math\n\ndef truncate_number(number: float) -> float:\n    \"\"\"\n    Given a positive floating point number, it can be decomposed into\n    an integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    # Calculate the integer part of the number\n    integer_part = math.floor(number)\n    \n    # Calculate the decimal part of the number\n    decimal_part = number - integer_part\n    \n    return decimal_part\n"}
{"task_id": "HumanEval/3", "completion": "\nfrom typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\"\n    This function determines if the balance of a bank account falls below zero at any point \n    given a list of deposit and withdrawal operations.\n\n    Args:\n        operations (List[int]): A list of deposit and withdrawal operations.\n\n    Returns:\n        bool: True if the balance falls below zero at any point, False otherwise.\n    \"\"\"\n    balance = 0  # Initialize the balance to zero\n    for operation in operations:  # Iterate over each operation in the list\n        balance += operation  # Add the operation to the balance\n        if balance < 0:  # Check if the balance falls below zero\n            return True  # If it does, return True\n    return False  # If the loop completes without the balance falling below zero, return False\n\n# Test cases\nprint(below_zero([1, 2, 3]))  # False\nprint(below_zero([1, 2, -4, 5]))  # True\n"}
{"task_id": "HumanEval/4", "completion": "\nfrom typing import List\nimport numpy as np\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n    # Calculate the mean of the input list\n    mean_value = np.mean(numbers)\n    \n    # Calculate the absolute deviations from the mean\n    absolute_deviations = np.abs(numbers - mean_value)\n    \n    # Calculate the mean absolute deviation\n    mad = np.mean(absolute_deviations)\n    \n    return mad\n\n# Example usage:\nnumbers = [1.0, 2.0, 3.0, 4.0]\nprint(mean_absolute_deviation(numbers))\n"}
{"task_id": "HumanEval/5", "completion": "\nfrom typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\"\n    Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    \n    Args:\n        numbers (List[int]): The input list of numbers.\n        delimeter (int): The number to be inserted as a delimiter.\n    \n    Returns:\n        List[int]: The list with delimeters inserted.\n    \n    Examples:\n        >>> intersperse([], 4)\n        []\n        >>> intersperse([1, 2, 3], 4)\n        [1, 4, 2, 4, 3]\n    \"\"\"\n    result = [numbers[0]]  # Start the result with the first number\n    for i in range(1, len(numbers)):  # Iterate over the rest of the numbers\n        result.append(delimeter)  # Insert the delimiter\n        result.append(numbers[i])  # Append the current number\n    return result\n"}
{"task_id": "HumanEval/6", "completion": "\nfrom typing import List\n\ndef calculate_depth(s: str) -> int:\n    \"\"\" Calculates the depth of nesting in a string of parentheses. \"\"\"\n    depth = 0\n    max_depth = 0\n    for char in s:\n        if char == '(':\n            depth += 1\n            max_depth = max(max_depth, depth)\n        elif char == ')':\n            depth -= 1\n    return max_depth\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    \n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    groups = paren_string.split()\n    return [calculate_depth(group) for group in groups]\n"}
{"task_id": "HumanEval/7", "completion": "\nfrom typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\"\n    Filter an input list of strings only for ones that contain given substring.\n\n    Args:\n    strings (List[str]): The list of strings to be filtered.\n    substring (str): The substring to be searched in each string.\n\n    Returns:\n    List[str]: A list of strings that contain the given substring.\n\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [string for string in strings if substring in string]\n\n# Example usage:\nstrings = ['abc', 'bacd', 'cde', 'array']\nsubstring = 'a'\nfiltered_strings = filter_by_substring(strings, substring)\nprint(filtered_strings)  # Output: ['abc', 'bacd', 'array']\n"}
{"task_id": "HumanEval/8", "completion": "\nfrom typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\"\n    For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    \n    Args:\n        numbers (List[int]): A list of integers.\n\n    Returns:\n        Tuple[int, int]: A tuple containing the sum and product of all integers in the list.\n    \"\"\"\n    # Initialize sum and product variables to 0 and 1 respectively\n    sum_of_numbers = 0\n    product_of_numbers = 1\n    \n    # Iterate over each number in the list\n    for number in numbers:\n        # Add the current number to the sum\n        sum_of_numbers += number\n        # Multiply the current number to the product\n        product_of_numbers *= number\n    \n    # Return a tuple containing the sum and product\n    return sum_of_numbers, product_of_numbers\n\n# Test the function\nprint(sum_product([]))  # Expected output: (0, 1)\nprint(sum_product([1, 2, 3, 4]))  # Expected output: (10, 24)\n"}
{"task_id": "HumanEval/9", "completion": "\nfrom typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\"\n    From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n\n    Args:\n        numbers (List[int]): A list of integers.\n\n    Returns:\n        List[int]: A list of rolling maximum elements.\n\n    Example:\n        >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n        [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    if not numbers:\n        return []\n\n    max_so_far = numbers[0]\n    rolling_max_list = [max_so_far]\n\n    for num in numbers[1:]:\n        if num >= max_so_far:\n            max_so_far = num\n        rolling_max_list.append(max_so_far)\n\n    return rolling_max_list\n"}
{"task_id": "HumanEval/10", "completion": "\ndef is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return ''\n\n    # Find the longest postfix that is a palindrome\n    for i in range(len(string), 1, -1):\n        if is_palindrome(string[i:]):\n            return string + string[:i-1][::-1]\n\n\n# Example usage:\nprint(make_palindrome(''))  # ''\nprint(make_palindrome('cat'))  # 'catac'\nprint(make_palindrome('cata'))  # 'catac'\n"}
{"task_id": "HumanEval/11", "completion": "\nfrom typing import List\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\"\n    Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    Args:\n    a (str): The first input string consisting only of 1s and 0s.\n    b (str): The second input string consisting only of 1s and 0s.\n    Returns:\n    str: The binary XOR of a and b as a string.\n    Examples:\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    # Convert the input strings to lists of integers for easier manipulation\n    a_list = [int(i) for i in a]\n    b_list = [int(i) for i in b]\n    \n    # Use list comprehension to perform the XOR operation\n    result_list = [a ^ b for a, b in zip(a_list, b_list)]\n    \n    # Convert the result list back to a string\n    result_str = ''.join(map(str, result_list))\n    \n    return result_str\n"}
{"task_id": "HumanEval/12", "completion": "\nfrom typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\" \n    Out of list of strings, return the longest one. \n    Return the first one in case of multiple strings of the same length. \n    Return None in case the input list is empty.\n    \n    Args:\n    strings (List[str]): A list of strings.\n    \n    Returns:\n    Optional[str]: The longest string in the list, or None if the list is empty.\n    \"\"\"\n    \n    # Check if the input list is empty\n    if not strings:\n        return None\n    \n    # Initialize the longest string as the first one in the list\n    longest_str = strings[0]\n    \n    # Iterate over the list of strings to find the longest one\n    for s in strings:\n        # Compare the length of the current string with the longest one found so far\n        if len(s) > len(longest_str):\n            # If the current string is longer, update the longest one\n            longest_str = s\n    \n    # Return the longest string found\n    return longest_str\n\n\n# Test cases\nprint(longest([]))  # Should print: None\nprint(longest(['a', 'b', 'c']))  # Should print: 'a'\nprint(longest(['a', 'bb', 'ccc']))  # Should print: 'ccc'\n"}
{"task_id": "HumanEval/13", "completion": "\nimport math\n\ndef greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    # Use the math.gcd function to calculate the greatest common divisor\n    return math.gcd(a, b)\n"}
{"task_id": "HumanEval/14", "completion": "\nfrom typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\"\n    Return list of all prefixes from shortest to longest of the input string\n\n    Args:\n        string (str): The input string\n\n    Returns:\n        List[str]: List of prefixes of the input string\n\n    Example:\n        >>> all_prefixes('abc')\n        ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = []\n    for i in range(1, len(string) + 1):\n        prefixes.append(string[:i])\n    return prefixes\n"}
{"task_id": "HumanEval/15", "completion": "\ndef string_sequence(n: int) -> str:\n    \"\"\"\n    Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    \n    Parameters:\n    n (int): The upper limit of the sequence.\n    \n    Returns:\n    str: A string of space-delimited numbers from 0 to n.\n    \n    Examples:\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return ' '.join(map(str, range(n + 1)))\n"}
{"task_id": "HumanEval/16", "completion": "\nfrom typing import Dict\n\ndef count_distinct_characters(string: str) -> int:\n    \"\"\"\n    Given a string, find out how many distinct characters (regardless of case) it consists of.\n    \n    Args:\n    string (str): The input string.\n    \n    Returns:\n    int: The number of distinct characters in the string.\n    \n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    \n    # Convert the string to lowercase to make the function case-insensitive\n    string = string.lower()\n    \n    # Create a dictionary to store the frequency of each character\n    char_freq: Dict[str, int] = {}\n    \n    # Iterate over each character in the string\n    for char in string:\n        # If the character is already in the dictionary, increment its count\n        if char in char_freq:\n            char_freq[char] += 1\n        # If the character is not in the dictionary, add it with a count of 1\n        else:\n            char_freq[char] = 1\n    \n    # The number of distinct characters is the number of keys in the dictionary\n    distinct_chars = len(char_freq)\n    \n    return distinct_chars\n"}
{"task_id": "HumanEval/17", "completion": "\nfrom typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\"\n    Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    note last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    notes = {\n        'o': 4,\n        'o|': 2,\n        '.|': 1\n    }\n    \n    result = []\n    for note in music_string.split():\n        result.append(notes[note])\n    \n    return result\n\n# Test the function\nprint(parse_music('o o| .| o| o| .| .| .| .| o o'))\n"}
{"task_id": "HumanEval/18", "completion": "\ndef how_many_times(string: str, substring: str) -> int:\n    \"\"\"\n    Find how many times a given substring can be found in the original string.\n    Count overlapping cases.\n\n    Args:\n        string (str): The original string.\n        substring (str): The substring to be searched.\n\n    Returns:\n        int: The number of times the substring can be found in the original string.\n\n    Examples:\n        >>> how_many_times('', 'a')\n        0\n        >>> how_many_times('aaa', 'a')\n        3\n        >>> how_many_times('aaaa', 'aa')\n        3\n    \"\"\"\n    count = 0\n    if not substring:  # edge case: empty substring\n        return 0\n    for i in range(len(string)):\n        if string[i:].startswith(substring):\n            count += 1\n    return count\n"}
{"task_id": "HumanEval/19", "completion": "\nfrom typing import List\n\n# Define a dictionary to map string numbers to integers\nnum_dict = {\n    'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4,\n    'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9\n}\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\"\n    Input is a space-delimited string of string numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\n\n    # Split the input string into a list of string numbers\n    num_list: List[str] = numbers.split()\n\n    # Map each string number to its integer value and sort the list\n    num_list = sorted(num_list, key=lambda x: num_dict[x])\n\n    # Join the sorted list back into a string with spaces in between\n    sorted_str: str = ' '.join(num_list)\n\n    return sorted_str\n"}
{"task_id": "HumanEval/20", "completion": "\nfrom typing import List, Tuple\nimport itertools\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\"\n    From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n\n    Args:\n        numbers (List[float]): A list of numbers.\n\n    Returns:\n        Tuple[float, float]: A tuple of two numbers that are the closest to each other.\n\n    Examples:\n        >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n        (2.0, 2.2)\n        >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n        (2.0, 2.0)\n    \"\"\"\n    # Generate all possible pairs of numbers\n    pairs = list(itertools.combinations(numbers, 2))\n    \n    # Initialize the minimum difference and the pair with the minimum difference\n    min_diff = float('inf')\n    closest_pair = None\n    \n    # Iterate over all pairs\n    for pair in pairs:\n        # Calculate the absolute difference between the two numbers in the pair\n        diff = abs(pair[0] - pair[1])\n        \n        # If the difference is smaller than the current minimum difference, update the minimum difference and the closest pair\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = pair\n    \n    # Return the closest pair\n    return tuple(sorted(closest_pair))\n"}
{"task_id": "HumanEval/21", "completion": "\nfrom typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\"\n    Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n\n    Args:\n        numbers (List[float]): A list of numbers\n\n    Returns:\n        List[float]: The rescaled list of numbers\n\n    Example:\n        >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n        [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"List must contain at least two elements\")\n\n    min_value = min(numbers)\n    max_value = max(numbers)\n\n    if min_value == max_value:\n        return [0.0] * len(numbers)\n\n    return [(x - min_value) / (max_value - min_value) for x in numbers]\n"}
{"task_id": "HumanEval/22", "completion": "\nfrom typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\"\n    Filter given list of any python values only for integers\n\n    Args:\n        values (List[Any]): A list of any python values\n\n    Returns:\n        List[int]: A list of integers from the input list\n\n    Examples:\n        >>> filter_integers(['a', 3.14, 5])\n        [5]\n        >>> filter_integers([1, 2, 3, 'abc', {}, []])\n        [1, 2, 3]\n    \"\"\"\n    return [value for value in values if isinstance(value, int)]\n"}
{"task_id": "HumanEval/23", "completion": "\ndef strlen(string: str) -> int:\n    \"\"\"\n    Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n    return len(string)\n"}
{"task_id": "HumanEval/24", "completion": "\ndef largest_divisor(n: int) -> int:\n    \"\"\"\n    For a given number n, find the largest number that divides n evenly, smaller than n\n\n    Args:\n        n (int): The input number\n\n    Returns:\n        int: The largest divisor of n\n\n    Examples:\n        >>> largest_divisor(15)\n        5\n    \"\"\"\n    for i in range(n - 1, 0, -1):\n        if n % i == 0:\n            return i\n"}
{"task_id": "HumanEval/25", "completion": "\nfrom typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\"\n    Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appears in factorization.\n    Input number should be equal to the product of all factors\n\n    Args:\n        n (int): The number to be factorized\n\n    Returns:\n        List[int]: A list of prime factors of the input number\n\n    Examples:\n        >>> factorize(8)\n        [2, 2, 2]\n        >>> factorize(25)\n        [5, 5]\n        >>> factorize(70)\n        [2, 5, 7]\n    \"\"\"\n    i = 2\n    factors = []\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors\n"}
{"task_id": "HumanEval/26", "completion": "\nfrom typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\"\n    From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    \n    Args:\n        numbers (List[int]): A list of integers.\n    \n    Returns:\n        List[int]: A list of integers with duplicates removed.\n    \n    Example:\n        >>> remove_duplicates([1, 2, 3, 2, 4])\n        [1, 3, 4]\n    \"\"\"\n    seen = set()\n    result = []\n    \n    for num in numbers:\n        if num not in seen:\n            result.append(num)\n            seen.add(num)\n    \n    return result\n"}
{"task_id": "HumanEval/27", "completion": "\ndef flip_case(string: str) -> str:\n    \"\"\"\n    For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    \n    Args:\n        string (str): The input string.\n    \n    Returns:\n        str: The string with case flipped.\n    \n    Example:\n        >>> flip_case('Hello')\n        'hELLO'\n    \"\"\"\n    return ''.join(char.swapcase() for char in string)\n"}
{"task_id": "HumanEval/28", "completion": "\nfrom typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    result = ''\n    for string in strings:\n        result += string\n    return result\n\n# Alternative solution using the join() method\ndef concatenate_alternative(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate_alternative([])\n    ''\n    >>> concatenate_alternative(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    return ''.join(strings)\n"}
{"task_id": "HumanEval/29", "completion": "\nfrom typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    Args:\n        strings (List[str]): A list of strings to filter.\n        prefix (str): The prefix to filter by.\n    \n    Returns:\n        List[str]: A list of strings that start with the given prefix.\n    \n    Examples:\n        >>> filter_by_prefix([], 'a')\n        []\n        >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n        ['abc', 'array']\n    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\n\n# Test the function\nprint(filter_by_prefix([], 'a'))  # Output: []\nprint(filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a'))  # Output: ['abc', 'array']\n"}
{"task_id": "HumanEval/30", "completion": "\ndef get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return [num for num in l if num > 0]\n"}
{"task_id": "HumanEval/31", "completion": "\ndef is_prime(n):\n    \"\"\"\n    Return true if a given number is prime, and false otherwise.\n    \n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n    # Check if number is less than 2, in which case it's not prime\n    if n < 2:\n        return False\n    \n    # Check if number is 2 or 3, in which case it's prime\n    if n in (2, 3):\n        return True\n    \n    # Check if number is divisible by 2 or 3, in which case it's not prime\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    \n    # Check divisibility up to the square root of the number\n    for i in range(5, int(n**0.5) + 1, 6):\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n    \n    # If all checks pass, the number is prime\n    return True\n"}
{"task_id": "HumanEval/32", "completion": "\nimport math\nimport numpy as np\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[2] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs: list):\n    \"\"\"\n    xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only one zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    \"\"\"\n    # Check if the number of coefficients is even\n    if len(xs) % 2 != 0:\n        raise ValueError(\"The number of coefficients must be even\")\n\n    # Find the largest non-zero coefficient\n    non_zero_coeffs = [coeff for coeff in xs if coeff != 0]\n    if not non_zero_coeffs:\n        raise ValueError(\"The polynomial must have at least one non-zero coefficient\")\n\n    largest_non_zero = max(non_zero_coeffs)\n\n    # Use numpy to find the roots of the polynomial\n    coefficients = xs[::-1]  # Reverse the coefficients to match numpy's order\n    roots = np.roots(coefficients)\n\n    # Find the root that is closest to the largest non-zero coefficient\n    closest_root = min(roots, key=lambda x: abs(x - largest_non_zero))\n\n    return closest_root\n\n# Test the function\nprint(round(find_zero([1, 2]), 2))  # f(x) = 1 + 2x\nprint(round(find_zero([-6, 11, -6, 1]), 2))  # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n"}
{"task_id": "HumanEval/33", "completion": "\ndef sort_third(l: list):\n    \"\"\"\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, \n    while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    \n    Args:\n        l (list): The input list\n    \n    Returns:\n        list: The modified list\n    \"\"\"\n    def sort_elements(i):\n        \"\"\"\n        Sorts the elements at index i in the list\n        \"\"\"\n        if i % 3 == 0 and len(l) >= i:\n            return sorted([l[i]])\n        else:\n            return [l[i]]\n    \n    return [sort_elements(i)[0] if i % 3 == 0 else l[i] for i in range(len(l))]\n\n# Test cases\nprint(sort_third([1, 2, 3]))  # [1, 2, 3]\nprint(sort_third([5, 6, 3, 4, 8, 9, 2]))  # [2, 6, 3, 4, 8, 9, 5]\n"}
{"task_id": "HumanEval/34", "completion": "\nfrom typing import List\n\ndef unique(l: List[int]) -> List[int]:\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))\n\n# Example usage:\nprint(unique([5, 3, 5, 2, 3, 3, 9, 0, 123]))\n"}
{"task_id": "HumanEval/35", "completion": "\ndef max_element(l: list) -> int:\n    \"\"\"\n    Return maximum element in the list.\n    \n    Args:\n        l (list): A list of numbers.\n    \n    Returns:\n        int: The maximum element in the list.\n    \n    Examples:\n        >>> max_element([1, 2, 3])\n        3\n        >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n        123\n    \"\"\"\n    return max(l)\n\n# Example usage:\nprint(max_element([1, 2, 3]))  # Output: 3\nprint(max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]))  # Output: 123\n"}
{"task_id": "HumanEval/36", "completion": "\ndef fizz_buzz(n: int):\n    \"\"\"\n    Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\n    Args:\n        n (int): The upper limit.\n\n    Returns:\n        int: The number of times the digit 7 appears.\n\n    Examples:\n        >>> fizz_buzz(50)\n        0\n        >>> fizz_buzz(78)\n        2\n        >>> fizz_buzz(79)\n        3\n    \"\"\"\n    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            str_i = str(i)\n            count += str_i.count('7')\n    return count\n"}
{"task_id": "HumanEval/37", "completion": "\nfrom typing import List\n\ndef sort_even(l: List[int]) -> List[int]:\n    \"\"\"\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    \n    Args:\n        l (List[int]): The input list.\n    \n    Returns:\n        List[int]: The modified list.\n    \n    Examples:\n        >>> sort_even([1, 2, 3])\n        [1, 2, 3]\n        >>> sort_even([5, 6, 3, 4])\n        [3, 6, 5, 4]\n    \"\"\"\n    # Separate the even and odd indices\n    even_indices = [l[i] for i in range(len(l)) if i % 2 == 0]\n    odd_indices = [l[i] for i in range(len(l)) if i % 2 != 0]\n    \n    # Sort the even indices\n    even_indices.sort()\n    \n    # Combine the sorted even indices with the odd indices\n    result = [None] * len(l)\n    for i in range(len(l)):\n        if i % 2 == 0:\n            result[i] = even_indices[i // 2]\n        else:\n            result[i] = odd_indices[i // 2]\n    \n    return result\n"}
{"task_id": "HumanEval/38", "completion": "\ndef encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # decode groups by cycling elements in reverse order.\n    groups = [group[-1] + group[:-1] if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\n# Example usage\noriginal_string = \"abcdabcdabcd\"\nencoded_string = encode_cyclic(original_string)\nprint(\"Encoded string:\", encoded_string)\ndecoded_string = decode_cyclic(encoded_string)\nprint(\"Decoded string:\", decoded_string)\n"}
{"task_id": "HumanEval/39", "completion": "\ndef is_prime(num: int) -> bool:\n    \"\"\"\n    Checks if a number is prime.\n    \n    Args:\n    num (int): The number to check.\n    \n    Returns:\n    bool: True if the number is prime, False otherwise.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef fibonacci() -> list:\n    \"\"\"\n    Generates Fibonacci sequence.\n    \n    Yields:\n    int: Fibonacci numbers.\n    \"\"\"\n    a, b = 0, 1\n    while True:\n        yield a\n        a, b = b, a + b\n\ndef prime_fib(n: int) -> int:\n    \"\"\"\n    Returns n-th number that is a Fibonacci number and it's also prime.\n    \n    Args:\n    n (int): The sequence position to find.\n    \n    Returns:\n    int: The n-th prime Fibonacci number.\n    \"\"\"\n    fib_gen = fibonacci()\n    count = 0\n    num = 0\n    for fib_num in fib_gen:\n        num = fib_num\n        if is_prime(num):\n            count += 1\n            if count == n:\n                return num\n"}
{"task_id": "HumanEval/40", "completion": "\nfrom typing import List\n\ndef triples_sum_to_zero(l: List[int]):\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    False\n    >>> triples_sum_to_zero([1])\n    False\n    >>> triples_sum_to_zero([-1, 0, 1])\n    True\n    \"\"\"\n    # Sort the list to group identical elements together\n    l.sort()\n\n    # Iterate over the list to consider all possible triplets\n    for i in range(len(l) - 2):\n        # Initialize two pointers, one starting from the next element\n        j = i + 1\n        k = len(l) - 1\n\n        # Continue the iteration until the two pointers meet\n        while j < k:\n            # Calculate the sum of the three elements\n            total = l[i] + l[j] + l[k]\n\n            # If the sum equals zero, return True\n            if total == 0:\n                return True\n\n            # If the sum is greater than zero, move the right pointer to the left\n            elif total > 0:\n                k -= 1\n\n            # If the sum is less than zero, move the left pointer to the right\n            else:\n                j += 1\n\n    # If no triplet sums to zero, return False\n    return False\n"}
{"task_id": "HumanEval/41", "completion": "\nimport math\n\ndef car_race_collision(n: int):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n    # The number of collisions is equal to the sum of the first n-1 positive integers\n    # This is because each pair of cars will collide once\n    collisions = math.comb(n, 2)\n    \n    return collisions\n"}
{"task_id": "HumanEval/42", "completion": "\nfrom typing import List\n\ndef incr_list(l: List[int]) -> List[int]:\n    \"\"\"\n    Return list with elements incremented by 1.\n\n    Args:\n        l (List[int]): List of integers to increment.\n\n    Returns:\n        List[int]: List of incremented integers.\n\n    Example:\n        >>> incr_list([1, 2, 3])\n        [2, 3, 4]\n        >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n        [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n    return [i + 1 for i in l]\n"}
{"task_id": "HumanEval/43", "completion": "\ndef pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\"\n    pairs = set()\n    seen = set()\n    for i in l:\n        if -i in seen:\n            return True\n        seen.add(i)\n    return False\n\nimport doctest\ndoctest.testmod(name='pairs_sum_to_zero', verbose=True)\n"}
{"task_id": "HumanEval/44", "completion": "\ndef change_base(x: int, base: int):\n    \"\"\"\n    Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base number is less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    convertString = \"0123456789\"\n    if x == 0:\n        return '0'\n    digits = []\n    while x > 0:\n        digits.append(convertString[x % base])\n        x = x // base\n    return ''.join(reversed(digits))\n\n# Test cases\nprint(change_base(8, 3))  # Output: 22\nprint(change_base(8, 2))  # Output: 1000\nprint(change_base(7, 2))  # Output: 111\n"}
{"task_id": "HumanEval/45", "completion": "\n# Import necessary modules\nimport math\n\ndef triangle_area(a, h):\n    \"\"\"\n    Given length of a side and height (also known as altitute for the area, of a triangle return area.\n    \n    Parameters:\n    a (float): The length of the side\n    h (float): The altitude of the triangle\n    \n    Returns:\n    float: The area of the triangle\n    \n    Examples:\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    # Calculate the area using the formula: area = 0.5 * base * height\n    return 0.5 * a * h\n\n# Test the function\nprint(triangle_area(5, 3))\n"}
{"task_id": "HumanEval/46", "completion": "\n# Import the necessary module for memoization\nfrom functools import lru_cache\n\ndef fib4(n: int):\n    \"\"\"\n    The Fib4 number sequence is a sequence similar to the Fibbonacci sequence that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    \n    Parameters:\n    n (int): The nth element of the fib4 number sequence.\n    \n    Returns:\n    int: The nth element of the fib4 number sequence.\n    \"\"\"\n    # Use memoization to store the results of expensive function calls and reuse them when the same inputs occur again.\n    @lru_cache(maxsize=None)\n    def fib4_refs(n: int):\n        if n == 0 or n == 1:\n            return 0\n        elif n == 2:\n            return 2\n        elif n == 3:\n            return 0\n        else:\n            return fib4_refs(n - 1) + fib4_refs(n - 2) + fib4_refs(n - 3) + fib4_refs(n - 4)\n\n    return fib4_refs(n)\n\n# Test the function\nprint(fib4(5))   # Output: 4\nprint(fib4(6))   # Output: 8\nprint(fib4(7))   # Output: 14\nprint(fib4(12)) # Output: 96\n"}
{"task_id": "HumanEval/47", "completion": "\nimport statistics\n\ndef median(lst: list):\n    \"\"\"\n    Return the median of elements in the list lst.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    # Check if the list is empty\n    if not lst:\n        raise ValueError(\"Cannot calculate median of an empty list\")\n    \n    # Sort the list in ascending order\n    sorted_lst = sorted(lst)\n    \n    # Get the length of the list\n    n = len(sorted_lst)\n    \n    # If the length of the list is even, the median is the average of the two middle numbers\n    if n % 2 == 0:\n        median = (sorted_lst[n // 2 - 1] + sorted_lst[n // 2]) / 2\n    # If the length of the list is odd, the median is the middle number\n    else:\n        median = sorted_lst[n // 2]\n    \n    return median\n```\n\nNote: In the original code, the function is named `median` but in Python, we use `lst` as the variable name following the standard Python convention for lists. Also, I've added a check to handle empty lists, and improved the median calculation by using the built-in `sorted` function to sort the list.\n\nHowever, if you want to roll out your own code and implement the logic for calculating the median without using the `statistics` module, here's an alternative implementation:\n\n```python\ndef median(lst: list):\n    \"\"\"\n    Return the median of elements in the list lst.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    # Check if the list is empty\n    if not lst:\n        raise ValueError(\"Cannot calculate median of an empty list\")\n    \n    # Sort the list in ascending order\n    sorted_lst = sorted(lst)\n    \n    # Get the length of the list\n    n = len(sorted_lst)\n    \n    # If the length of the list is even, the median is the average of the two middle numbers\n    if n % 2 == 0:\n        median = (sorted_lst[n // 2 - 1] + sorted_lst[n // 2]) / 2\n    # If the length of the list is odd, the median is the middle number\n    else:\n        median = sorted_lst[n // 2]\n    \n    return median\n```\n\nYou can use the `statistics` module's `median` function like this:\n\n```python\nimport statistics\n\nnumbers = [3, 1, 2, 4, 5]\nprint(statistics.median(numbers))  # Output: 3\n\nnumbers = [-10, 4, 6, 1000, 10, 20]\nprint(statistics.median(numbers))  # Output: 15.0\n"}
{"task_id": "HumanEval/48", "completion": "\ndef is_palindrome(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n\n    A palindrome is a word, phrase, number, or other sequence of characters that\n    reads the same forward and backward (ignoring spaces, punctuation, and capitalization).\n\n    Args:\n        text (str): The string to be checked.\n\n    Returns:\n        bool: True if the string is a palindrome, False otherwise.\n\n    Examples:\n        >>> is_palindrome('')\n        True\n        >>> is_palindrome('aba')\n        True\n        >>> is_palindrome('aaaaa')\n        True\n        >>> is_palindrome('zbcd')\n        False\n    \"\"\"\n    # Remove non-alphanumeric characters and convert to lowercase\n    cleaned_text = ''.join(e for e in text if e.isalnum()).lower()\n    # Compare the cleaned text with its reverse\n    return cleaned_text == cleaned_text[::-1]\n"}
{"task_id": "HumanEval/49", "completion": "\ndef modp(n: int, p: int) -> int:\n    \"\"\"\n    Return 2^n modulo p (be aware of numerics).\n    \n    Args:\n        n (int): The exponent.\n        p (int): The modulus.\n    \n    Returns:\n        int: The result of 2^n modulo p.\n    \n    Examples:\n        >>> modp(3, 5)\n        3\n        >>> modp(1101, 101)\n        2\n        >>> modp(0, 101)\n        1\n        >>> modp(3, 11)\n        8\n        >>> modp(100, 101)\n        1\n    \"\"\"\n    result = 1\n    for _ in range(n):\n        result = (result * 2) % p\n    return result\n"}
{"task_id": "HumanEval/50", "completion": "\nfrom string import ascii_lowercase\n\ndef encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every lowercase character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr((ord(ch) - ord(\"a\") + 5) % 26 + ord(\"a\")) if ch in ascii_lowercase else ch for ch in s])\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr((ord(ch) - ord(\"a\") - 5) % 26 + ord(\"a\")) if ch in ascii_lowercase else ch for ch in s])\n"}
{"task_id": "HumanEval/51", "completion": "\nimport re\n\ndef remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    \"\"\"\n    vowels = 'aeiouAEIOU'\n    pattern = '[' + re.escape(vowels) + ']'\n    return re.sub(pattern, '', text)\n\n\n# Test cases\nif remove_vowels('') == '':\n    print(\"Test case 1 passed.\")\nelse:\n    print(\"Test case 1 failed.\")\n\nif remove_vowels(\"abcdef\\nghijklm\") == 'bcdf\\nghjklm':\n    print(\"Test case 2 passed.\")\nelse:\n    print(\"Test case 2 failed.\")\n\nif remove_vowels('abcdef') == 'bcdf':\n    print(\"Test case 3 passed.\")\nelse:\n    print(\"Test case 3 failed.\")\n\nif remove_vowels('aaaaa') == '':\n    print(\"Test case 4 passed.\")\nelse:\n    print(\"Test case 4 failed.\")\n\nif remove_vowels('aaBAA') == 'B':\n    print(\"Test case 5 passed.\")\nelse:\n    print(\"Test case 5 failed.\")\n\nif remove_vowels('zbcd') == 'zbcd':\n    print(\"Test case 6 passed.\")\nelse:\n    print(\"Test case 6 failed.\")\n"}
{"task_id": "HumanEval/52", "completion": "\ndef below_threshold(lst: list, threshold: int) -> bool:\n    \"\"\"\n    Return True if all numbers in the list lst are below threshold.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    return all(i < threshold for i in lst)\n"}
{"task_id": "HumanEval/53", "completion": "\n# Import the necessary module for docstring testing\nimport doctest\n\ndef add(x: int, y: int):\n    \"\"\"\n    Add two numbers x and y\n\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n\n    :param x: The first number\n    :param y: The second number\n    :return: The sum of x and y\n    \"\"\"\n    return x + y\n\n# Test the function with the docstring examples\ndoctest.testmod()\n"}
{"task_id": "HumanEval/54", "completion": "\nfrom collections import Counter\n\ndef same_chars(s0: str, s1: str):\n    \"\"\"\n    Check if two words have the same characters.\n    \n    Args:\n    s0 (str): The first word.\n    s1 (str): The second word.\n    \n    Returns:\n    bool: True if the words have the same characters, False otherwise.\n    \n    Examples:\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n    # Remove duplicate characters and count the frequency of each character\n    counter0 = Counter(s0)\n    counter1 = Counter(s1)\n    \n    # Compare the two counters\n    return counter0 == counter1\n"}
{"task_id": "HumanEval/55", "completion": "\ndef fib(n: int):\n    \"\"\"\n    Return n-th Fibonacci number.\n\n    Args:\n        n (int): The position of the Fibonacci number to return.\n\n    Returns:\n        int: The n-th Fibonacci number.\n\n    Examples:\n        >>> fib(10)\n        55\n        >>> fib(1)\n        1\n        >>> fib(8)\n        21\n    \"\"\"\n    if n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        a, b = 1, 1\n        for _ in range(2, n):\n            a, b = b, a + b\n        return b\n\n# Test the function\nprint(fib(10))  # Output: 55\nprint(fib(1))   # Output: 1\nprint(fib(8))   # Output: 21\n"}
{"task_id": "HumanEval/56", "completion": "\ndef correct_bracketing(brackets: str):\n    \"\"\" \n    brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n    \n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    \n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if not stack:\n                # if the stack is empty, there is no opening bracket to match the closing bracket\n                return False\n            else:\n                # if the stack is not empty, pop the opening bracket from the stack\n                stack.pop()\n    \n    # after iterating over all brackets, if the stack is empty, it means every opening bracket has a corresponding closing bracket\n    return not stack\n"}
{"task_id": "HumanEval/57", "completion": "\ndef monotonic(l: list):\n    \"\"\"\n    Return True if list elements are monotonically increasing or decreasing.\n    \n    Args:\n    l (list): A list of elements.\n    \n    Returns:\n    bool: True if the list elements are monotonically increasing or decreasing, False otherwise.\n    \n    Examples:\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return all(l[i] <= l[i+1] for i in range(len(l)-1)) or all(l[i] >= l[i+1] for i in range(len(l)-1))\n"}
{"task_id": "HumanEval/58", "completion": "\nimport math\nimport re\n\ndef common(l1: list, l2: list):\n    \"\"\"\n    Return sorted unique common elements for two lists.\n    \n    Args:\n        l1 (list): First list of elements.\n        l2 (list): Second list of elements.\n    \n    Returns:\n        list: A sorted list of unique common elements.\n    \n    Example:\n        >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n        [1, 5, 653]\n        >>> common([5, 3, 2, 8], [3, 2])\n        [2, 3]\n    \"\"\"\n\n    # Convert lists to sets to remove duplicates and find common elements\n    set1 = set(l1)\n    set2 = set(l2)\n\n    # Find the intersection of two sets (common elements)\n    common_elements = set1.intersection(set2)\n\n    # Convert the set back to a list and sort it\n    common_elements = sorted(list(common_elements))\n\n    return common_elements\n\n"}
{"task_id": "HumanEval/59", "completion": "\ndef largest_prime_factor(n: int):\n    \"\"\"\n    Return the largest prime factor of n. \n    Assume n > 1 and is not a prime.\n    \n    Parameters:\n    n (int): The number to find the largest prime factor of.\n    \n    Returns:\n    int: The largest prime factor of n.\n\n    Example:\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n\n"}
{"task_id": "HumanEval/60", "completion": "\ndef sum_to_n(n: int):\n    \"\"\"\n    sum_to_n is a function that sums numbers from 1 to n.\n\n    Args:\n        n (int): The upper limit of the sum.\n\n    Returns:\n        int: The sum of numbers from 1 to n.\n\n    Examples:\n        >>> sum_to_n(30)\n        465\n        >>> sum_to_n(100)\n        5050\n        >>> sum_to_n(5)\n        15\n        >>> sum_to_n(10)\n        55\n        >>> sum_to_n(1)\n        1\n    \"\"\"\n    return sum(range(1, n + 1))\n"}
{"task_id": "HumanEval/61", "completion": "\ndef correct_bracketing(brackets: str):\n    \"\"\"\n    brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n"}
{"task_id": "HumanEval/62", "completion": "\ndef derivative(xs: list):\n    \"\"\"\n    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n    if len(xs) == 0:\n        return []\n    if len(xs) == 1:\n        return []\n    new_coeffs = []\n    degree = len(xs) - 1  # highest power of x in the polynomial\n    for power in range(1, degree + 1):\n        new_coeff = power * xs[power]\n        if power >= len(new_coeffs):\n            new_coeffs.append(0)\n        new_coeffs[power - 1] = new_coeff\n    return new_coeffs\n"}
{"task_id": "HumanEval/63", "completion": "\nfrom functools import lru_cache\n\ndef fibfib(n: int):\n    \"\"\"\n    The FibFib number sequence is a sequence similar to the Fibonacci sequence that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    \n    Args:\n        n (int): The index of the FibFib number to compute.\n    \n    Returns:\n        int: The n-th element of the FibFib number sequence.\n    \n    Examples:\n        >>> fibfib(1)\n        0\n        >>> fibfib(5)\n        4\n        >>> fibfib(8)\n        24\n    \"\"\"\n    @lru_cache(maxsize=None)\n    def fibfib_helper(k: int):\n        if k == 0 or k == 1:\n            return 0\n        elif k == 2:\n            return 1\n        else:\n            return fibfib_helper(k-1) + fibfib_helper(k-2) + fibfib_helper(k-3)\n    \n    return fibfib_helper(n)\n"}
{"task_id": "HumanEval/64", "completion": "\ndef vowels_count(s):\n    \"\"\"\n    This function counts the number of vowels in a given string.\n    Vowels are 'a', 'e', 'i', 'o', 'u'.\n    'y' is considered a vowel only when it is at the end of the word.\n\n    Args:\n    s (str): The input string.\n\n    Returns:\n    int: The count of vowels in the string.\n    \"\"\"\n    # Convert the string to lowercase to make the function case insensitive\n    s = s.lower()\n    \n    # Use a set to store the vowels for efficient look up\n    vowels = set('aeiou')\n    \n    # Count the number of vowels in the string\n    count = sum(1 for char in s if char in vowels)\n    \n    # If 'y' is at the end of the string, consider it as a vowel\n    if s and s[-1] == 'y':\n        count += 1\n    \n    return count\n\n# Add more test cases here (as per the FIX instruction)\n\n# Test cases\nprint(vowels_count(\"abcde\"))  # Should print 2\nprint(vowels_count(\"ACEDY\"))  # Should print 3\nprint(vowels_count(\"aeiou\"))  # Should print 5\nprint(vowels_count(\"yioe\"))  # Should print 5\nprint(vowels_count(\"bcdfgh\"))  # Should print 0\n"}
{"task_id": "HumanEval/65", "completion": "\ndef circular_shift(x, shift):\n    \"\"\"\n    Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    \n    Parameters:\n    x (int): The integer to be shifted.\n    shift (int): The number of positions to shift the digits.\n    \n    Returns:\n    str: The shifted integer as a string.\n    \"\"\"\n    # Convert the integer to a string to easily access and manipulate its digits\n    str_x = str(x)\n    \n    # Calculate the effective shift, considering cases where shift > number of digits\n    effective_shift = shift % len(str_x)\n    \n    # Split the string into two parts at the effective shift position\n    first_part = str_x[-effective_shift:]\n    second_part = str_x[:-effective_shift]\n    \n    # Combine the two parts in reverse order to achieve the circular shift\n    result = first_part + second_part\n    \n    return result\n\n# Test cases\nprint(circular_shift(12, 1))  # Output: \"21\"\nprint(circular_shift(12, 2))  # Output: \"21\"\nprint(circular_shift(123, 2))  # Output: \"321\"\nprint(circular_shift(123, 5))  # Output: \"321\"\n"}
{"task_id": "HumanEval/66", "completion": "\ndef digitSum(s):\n    \"\"\"\n    This function calculates the sum of ASCII codes of only the upper case characters in a given string.\n\n    Parameters:\n    s (str): The input string.\n\n    Returns:\n    int: The sum of ASCII codes of upper case characters.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\"\n    # Return the sum of ASCII values of all characters in the string\n    return sum(ord(char) for char in s if char.isupper())\n"}
{"task_id": "HumanEval/67", "completion": "\nimport re\n\ndef fruit_distribution(s, n):\n    \"\"\"\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n\n    Parameters:\n    s (str): The string that represents the total number of apples and oranges.\n    n (int): The integer that represents the total number of fruits in the basket.\n\n    Returns:\n    int: The number of the mango fruits in the basket.\n    \"\"\"\n    \n    # Use regular expression to extract the numbers of apples and oranges from the string\n    match = re.search(r\"(\\d+)\\s*(apples|oranges)\", s)\n    \n    if match:\n        # If a match is found, extract the numbers of apples and oranges\n        apples, _ = match.groups()\n        apples = int(apples)\n    else:\n        # If no match is found, assume the numbers of apples and oranges are 0\n        apples = 0\n\n    # Return the number of mango fruits, which is the total number of fruits minus the number of apples and oranges\n    return n - apples - (int(re.search(r\"(\\d+)\\s*oranges\", s).group(1)) if re.search(r\"(\\d+)\\s*oranges\", s) else 0)\n"}
{"task_id": "HumanEval/68", "completion": "\ndef pluck(arr):\n    \"\"\"\n    Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smallest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n    # Initialize the smallest even value and its index\n    smallest_even = float('inf')\n    smallest_even_index = -1\n\n    # Iterate over the array\n    for i, num in enumerate(arr):\n        # Check if the number is even\n        if num % 2 == 0:\n            # If the number is smaller than the current smallest even value, update it\n            if num < smallest_even:\n                smallest_even = num\n                smallest_even_index = i\n            # If the number is equal to the current smallest even value, update its index\n            elif num == smallest_even:\n                smallest_even_index = min(smallest_even_index, i)\n\n    # If there are no even values, return an empty list\n    if smallest_even == float('inf'):\n        return []\n    # Otherwise, return the smallest even value and its index\n    else:\n        return [smallest_even, smallest_even_index]\n"}
{"task_id": "HumanEval/69", "completion": "\nfrom collections import Counter\n\ndef search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    frequency = Counter(lst)\n    max_num = max(lst)\n    for i in range(max_num, 0, -1):\n        if i in frequency and frequency[i] >= i:\n            return i\n    return -1\n"}
{"task_id": "HumanEval/70", "completion": "\nimport heapq\n\ndef strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if not lst:\n        return []\n\n    min_heap = [x for x in lst]  # convert list to a list\n    heapq.heapify(min_heap)  # convert list to heap\n\n    max_heap = []  # Max heap to store max of remaining elements\n    max_index = len(lst) // 2  # put max of first half in max heap\n    for i in range(max_index):\n        max_heap.append(-heapq.heappop(min_heap))  # negation for max heap\n\n    result = []  # to store final order of elements\n    while min_heap or max_heap:\n        if min_heap and not max_heap:\n            result.append(heapq.heappop(min_heap))\n        else:\n            if max_heap[0] < -min_heap[0]:  # if max heap element is bigger\n                result.append(-heapq.heappop(max_heap))  # append min of max heap\n            else:  # append min from both heaps\n                result.append(heapq.heappop(min_heap))\n                # if max heap still has elements, append min of max_heap else append all of max heap\n                if max_heap and -max_heap[0] > -min_heap[0]:\n                    # empty max heap and append whole max heap\n                    while max_heap:\n                        result.append(-heapq.heappop(max_heap))\n                # max heap may not be an heap anymore after above operations\n                # so we heapify again\n                if max_heap:\n                    heapq.heapify(max_heap)\n\n    return result\n"}
{"task_id": "HumanEval/71", "completion": "\nimport math\n\ndef triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''\n    # Check if the sides form a valid triangle\n    if not (a + b > c and a + c > b and b + c > a):\n        return -1\n    \n    # Calculate the semi-perimeter\n    s = (a + b + c) / 2\n    \n    # Calculate the area using Heron's formula\n    area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n    \n    # Round the area to 2 decimal points\n    area = round(area, 2)\n    \n    return area\n"}
{"task_id": "HumanEval/72", "completion": "\ndef will_it_fly(q, w):\n    '''\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279e False \n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279e False\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279e True\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3], 5) \u279e True\n    # 3 is less than the maximum possible weight, and it's balanced.\n    '''\n    # Check if the list is a palindrome by comparing it to its reversed version\n    return q == q[::-1] and sum(q) <= w\n"}
{"task_id": "HumanEval/73", "completion": "\nfrom collections import Counter\n\ndef smallest_change(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n    n = len(arr)\n    if n % 2 == 0:\n        # Even count of elements, we can make two halves of array the same\n        half_count = n // 2\n    else:\n        # Odd count of elements, the extra element in the middle can be any value\n        half_count = (n - 1) // 2\n\n    freq = Counter(arr[:half_count])\n    i = n - 1\n    changes = 0\n    while i > half_count:\n        if arr[i] in freq:\n            # Mirror element in the left half has the same value\n            i -= 1\n        else:\n            # Mirror element in the left half has a different value\n            changes += 1\n            i -= 1\n    returning_value = max(changes, half_count - max(freq.keys()))\n    return returning_value\n\n# Example usage:\nprint(smallest_change([1,2,3,5,4,7,9,6])) # Output: 4\nprint(smallest_change([1, 2, 3, 4, 3, 2, 2])) # Output: 1\nprint(smallest_change([1, 2, 3, 2, 1])) # Output: 0\n"}
{"task_id": "HumanEval/74", "completion": "\nfrom typing import List\n\ndef total_match(lst1: List[str], lst2: List[str]) -> List[str]:\n    '''\n    Write a function that accepts two lists of strings and returns the list that has \n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    total_match([], []) \u279e []\n    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n    '''\n    # Calculate total characters in first list\n    total_chars_lst1 = sum(len(string) for string in lst1)\n\n    # Calculate total characters in second list\n    total_chars_lst2 = sum(len(string) for string in lst2)\n\n    # Compare the total characters in both lists\n    if total_chars_lst1 <= total_chars_lst2:\n        return lst1\n    else:\n        return lst2\n"}
{"task_id": "HumanEval/75", "completion": "\nimport sympy\n\ndef is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    \n    Args:\n        a (int): The number to be checked.\n    \n    Returns:\n        bool: True if the number is the multiplication of 3 prime numbers, False otherwise.\n    \n    Example:\n        is_multiply_prime(30) == True\n        30 = 2 * 3 * 5\n    \"\"\"\n    def is_prime(n):\n        # Check if a number is prime\n        return sympy.isprime(n)\n    \n    # Generate all prime numbers up to 'a'\n    primes = [i for i in range(2, a) if is_prime(i)]\n    \n    # Check if 'a' can be represented as the product of 3 distinct primes\n    if len(primes) < 3:\n        return False\n    \n    # Generate all combinations of 3 distinct primes\n    combinations = [(primes[i], primes[j], primes[k]) for i in range(len(primes)) \n                    for j in range(i + 1, len(primes)) \n                    for k in range(j + 1, len(primes))]\n    \n    # Check if any combination's product equals 'a'\n    for p, q, r in combinations:\n        if p * q * r == a:\n            return True\n    \n    # If no combination's product equals 'a', return False\n    return False\n"}
{"task_id": "HumanEval/76", "completion": "\nimport math\n\ndef is_simple_power(x, n):\n    \"\"\"\n    Returns true if a number x is a simple power of n and false in other cases.\n    \n    x is a simple power of n if n**y = x where y is an integer\n    \n    Parameters:\n    x (int): The number to check\n    n (int): The base\n    \n    Returns:\n    bool: Whether x is a simple power of n\n    \"\"\"\n    \n    if n <= 0:  # Define simple power conditions\n        return False\n    \n    log_x = math.log(x, n)\n    \n    return log_x.is_integer()\n"}
{"task_id": "HumanEval/77", "completion": "\ndef iscube(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this integer is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    '''\n    return round(a ** (1. / 3)) ** 3 == a\n"}
{"task_id": "HumanEval/78", "completion": "\ndef hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    \n    # Define a function to check if a number is prime\n    def is_prime(n):\n        \"\"\"Check if a number is prime.\"\"\"\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    # Define a dictionary to map hexadecimal digits to decimal\n    hex_map = {'0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9, 'A': 10, 'B': 11, 'C': 12, 'D': 13, 'E': 14, 'F': 15}\n\n    # Initialize a counter for prime digits\n    count = 0\n\n    # Iterate over each character in the input string\n    for char in num:\n        # Check if the character is a hexadecimal digit\n        if char in hex_map:\n            # Check if the decimal equivalent of the hexadecimal digit is prime\n            if is_prime(hex_map[char]):\n                # If it is, increment the counter\n                count += 1\n\n    # Return the count of prime digits\n    return count\n"}
{"task_id": "HumanEval/79", "completion": "\ndef decimal_to_binary(decimal):\n    \"\"\"\n    Convert a decimal number to a binary string with 'db' at the beginning and end.\n\n    Args:\n        decimal (int): A decimal number.\n\n    Returns:\n        str: A binary string with 'db' at the beginning and end.\n    \"\"\"\n    return \"db\" + bin(decimal)[2:] + \"db\"\n\n# Test cases\nprint(decimal_to_binary(15))   # Output: db1111db\nprint(decimal_to_binary(32))   # Output: db100000db\n"}
{"task_id": "HumanEval/80", "completion": "\ndef is_happy(s):\n    \"\"\"\n    You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n    # Check if the length of the string is at least 3\n    if len(s) < 3:\n        return False\n    \n    # Iterate over the string in steps of 3\n    for i in range(len(s) - 2):\n        # Check if the current 3 consecutive letters are distinct\n        if len(set(s[i:i+3])) != 3:\n            return False\n    \n    # If the function hasn't returned False by now, the string is happy\n    return True\n"}
{"task_id": "HumanEval/81", "completion": "\ndef numerical_letter_grade(grades):\n    \"\"\"\n    It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    # Define a dictionary to map GPA ranges to letter grades\n    grade_map = {\n        (4.0, float('inf')): 'A+',\n        (3.7, 4.0): 'A',\n        (3.3, 3.7): 'A-',\n        (3.0, 3.3): 'B+',\n        (2.7, 3.0): 'B',\n        (2.3, 2.7): 'B-',\n        (2.0, 2.3): 'C+',\n        (1.7, 2.0): 'C',\n        (1.3, 1.7): 'C-',\n        (1.0, 1.3): 'D+',\n        (0.7, 1.0): 'D',\n        (0.0, 0.7): 'D-',\n        (0.0, 0.0): 'E'\n    }\n\n    # Initialize an empty list to store the letter grades\n    letter_grades = []\n\n    # Iterate over each GPA in the input list\n    for gpa in grades:\n        # Initialize a flag to indicate if the GPA has been mapped\n        mapped = False\n\n        # Iterate over each GPA range in the grade map\n        for (gpa_range, letter_grade) in grade_map.items():\n            # Check if the GPA falls within the current range\n            if gpa_range[0] <= gpa < gpa_range[1]:\n                # If it does, append the corresponding letter grade to the list\n                letter_grades.append(letter_grade)\n                # Set the flag to indicate that the GPA has been mapped\n                mapped = True\n                # Break out of the inner loop since we've found a match\n                break\n\n        # If the GPA hasn't been mapped, append 'E' to the list\n        if not mapped:\n            letter_grades.append('E')\n\n    # Return the list of letter grades\n    return letter_grades\n\n# Test the function\nprint(numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]))  # Output: ['A+', 'B', 'C-', 'C', 'A-']\n"}
{"task_id": "HumanEval/82", "completion": "\ndef is_prime(n):\n    \"\"\"Check if a number is prime.\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef prime_length(string):\n    \"\"\"Check if the string length is a prime number.\"\"\"\n    return is_prime(len(string))\n\n# Test cases\nprint(prime_length('Hello'))  # True\nprint(prime_length('abcdcba'))  # True\nprint(prime_length('kittens'))  # True\nprint(prime_length('orange'))  # False\n"}
{"task_id": "HumanEval/83", "completion": "\ndef starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"Input must be a non-negative integer\")\n    if n == 0:\n        return 0\n    return 10 ** (n - 1) * 2 + 9 * (10 ** (n - 1) - 1)\n"}
{"task_id": "HumanEval/84", "completion": "\ndef solve(N):\n    \"\"\"\n    Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    # Convert the number to binary and remove the '0b' prefix\n    binary = bin(N)[2:]\n    \n    # Calculate the sum of the digits in the binary string\n    sum_of_digits = sum(int(digit) for digit in binary)\n    \n    # Convert the sum to binary and remove the '0b' prefix\n    binary_sum = bin(sum_of_digits)[2:]\n    \n    return binary_sum\n\n# Test the function\nprint(solve(1000))  # Output: 1\nprint(solve(150))   # Output: 110\nprint(solve(147))   # Output: 1100\n"}
{"task_id": "HumanEval/85", "completion": "\ndef add(lst):\n    \"\"\"Given a non-empty list of integers lst, add the even elements that are at odd indices.\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 8\n\"\"\"    \n    even_sum = 0\n    for index, num in enumerate(lst):\n        if index % 2 != 0 and num % 2 == 0:\n            even_sum += num\n    return even_sum\n"}
{"task_id": "HumanEval/86", "completion": "\ndef anti_shuffle(s):\n    \"\"\"\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi') returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\n    return ' '.join(''.join(sorted(word)) for word in s.split())\n\n# Test the function\nprint(anti_shuffle('Hi'))  # returns 'Hi'\nprint(anti_shuffle('hello'))  # returns 'ehllo'\nprint(anti_shuffle('Hello World!!!'))  # returns 'Hello !!!Wdlor'\n"}
{"task_id": "HumanEval/87", "completion": "\nimport itertools\n\ndef get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n    coordinates = [(i, k) for i, row in enumerate(lst) for k, val in enumerate(row) if val == x]\n    coordinates.sort(key=lambda x: (x[0], -x[1]))\n    return coordinates\n\n# Test cases\nprint(get_row([\n  [1,2,3,4,5,6],\n  [1,2,3,4,1,6],\n  [1,2,3,4,5,1]\n], 1)) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\nprint(get_row([], 1)) == []\nprint(get_row([[], [1], [1, 2, 3]], 3)) == [(2, 2)]\n"}
{"task_id": "HumanEval/88", "completion": "\ndef sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    # Check if the array is empty\n    if not array:\n        return []\n\n    # Calculate the sum of the first and last index values\n    array_sum = array[0] + array[-1]\n\n    # Create a copy of the array\n    array_copy = array.copy()\n\n    # Sort the copied array in ascending or descending order based on the sum\n    if array_sum % 2 == 0:\n        array_copy.sort(reverse=True)\n    else:\n        array_copy.sort()\n\n    return array_copy\n\n# Test cases\nprint(sort_array([]))  # Output: []\nprint(sort_array([5]))  # Output: [5]\nprint(sort_array([2, 4, 3, 0, 1, 5]))  # Output: [0, 1, 2, 3, 4, 5]\nprint(sort_array([2, 4, 3, 0, 1, 5, 6]))  # Output: [6, 5, 4, 3, 2, 1, 0]\n"}
{"task_id": "HumanEval/89", "completion": "\nimport string\n\ndef encrypt(s):\n    \"\"\"\n    Encrypts a string by shifting the alphabet down by 4 places.\n\n    Args:\n        s (str): The input string to be encrypted.\n\n    Returns:\n        str: The encrypted string.\n    \"\"\"\n    alphabet = string.ascii_lowercase\n    encrypted = \"\"\n\n    for char in s:\n        if char.isalpha():\n            index = alphabet.index(char)\n            encrypted += alphabet[(index + 4) % 26]\n        else:\n            encrypted += char\n\n    return encrypted\n"}
{"task_id": "HumanEval/90", "completion": "\ndef next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    if len(lst) < 2:\n        return None\n    unique_lst = sorted(set(lst))\n    if len(unique_lst) < 2:\n        return None\n    return unique_lst[1]\n"}
{"task_id": "HumanEval/91", "completion": "\nimport re\n\ndef is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    # Split the input string S into sentences\n    sentences = re.split(r'[.!?]', S)\n    \n    # Filter out empty strings\n    sentences = [sentence for sentence in sentences if sentence]\n    \n    # Count the number of sentences that start with 'I'\n    boredoms = sum(1 for sentence in sentences if sentence.strip().lower().startswith('i'))\n    \n    return boredoms\n"}
{"task_id": "HumanEval/92", "completion": "\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n    '''\n    \n    # Check if all inputs are integers\n    if not (isinstance(x, int) and isinstance(y, int) and isinstance(z, int)):\n        return False\n    \n    # Check if any of the numbers is equal to the sum of the other two\n    if (x == y + z) or (y == x + z) or (z == x + y):\n        return True\n    \n    # If none of the above conditions are met, return False\n    return False\n"}
{"task_id": "HumanEval/93", "completion": "\ndef encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    vowels = 'aeiouAEIOU'\n    encoded_message = ''\n    \n    for char in message:\n        if char in vowels:\n            # Find the index of the vowel in 'aeiouAEIOU'\n            index = vowels.index(char)\n            # Calculate the new index (2 places ahead) by subtracting index from 26 and taking the modulus to account for wrap around\n            new_index = (index + 2) % 26\n            # Find the new vowel at the new index\n            encoded_message += 'aeiouAEIOU'[new_index]\n        elif char.isalpha():\n            # If the character is a letter, swap its case\n            encoded_message += char.swapcase()\n        else:\n            # If the character is not a letter, leave it unchanged\n            encoded_message += char\n    \n    return encoded_message\n"}
{"task_id": "HumanEval/94", "completion": "\ndef largest_prime_sum(lst):\n    \"\"\"\n    This function finds the largest prime value in a given list of integers and returns the sum of its digits.\n\n    Parameters:\n    lst (list): A list of integers\n\n    Returns:\n    int: The sum of the digits of the largest prime value in the list\n\n    \"\"\"\n    def is_prime(n):\n        \"\"\"\n        Helper function to check if a number is prime\n        \"\"\"\n        if n <= 1:\n            return False\n        if n <= 3:\n            return True\n        if n % 2 == 0 or n % 3 == 0:\n            return False\n        i = 5\n        while i * i <= n:\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n\n    def sum_of_digits(n):\n        \"\"\"\n        Helper function to calculate the sum of digits of a number\n        \"\"\"\n        return sum(int(digit) for digit in str(n))\n\n    max_prime = 0\n    for num in lst:\n        if is_prime(num) and num > max_prime:\n            max_prime = num\n\n    if max_prime == 0:\n        return 0\n    else:\n        return sum_of_digits(max_prime)\n\n# Test cases\nprint(largest_prime_sum([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]))  # Output: 10\nprint(largest_prime_sum([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]))  # Output: 25\nprint(largest_prime_sum([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]))  # Output: 13\nprint(largest_prime_sum([0,724,32,71,99,32,6,0,5,91,83,0,5,6]))  # Output: 11\nprint(largest_prime_sum([0,81,12,3,1,21]))  # Output: 3\nprint(largest_prime_sum([0,8,1,2,1,7]))  # Output: 7\n"}
{"task_id": "HumanEval/95", "completion": "\ndef check_dict_case(dictionary):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if not dictionary:\n        return False  # Return False if the dictionary is empty\n\n    key_set = set(dictionary.keys())  # Convert the dictionary keys to a set\n\n    are_all_lower = all(str(key).islower() for key in key_set)\n    are_all_upper = all(str(key).isupper() for key in key_set)\n\n    return are_all_lower or are_all_upper  # Return True if all keys are lower case or upper case\n"}
{"task_id": "HumanEval/96", "completion": "\ndef count_up_to(n):\n    \"\"\"\n    Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n\n    Args:\n        n (int): A non-negative integer.\n\n    Returns:\n        list: A list of the first n prime numbers less than n.\n    \"\"\"\n    def is_prime(num):\n        \"\"\"Check if a number is prime.\"\"\"\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    prime_numbers = []\n    num = 2\n    while len(prime_numbers) < n:\n        if num < n and is_prime(num):\n            prime_numbers.append(num)\n        num += 1\n    return prime_numbers\n\n# Test cases\nprint(count_up_to(5))  # => [2,3]\nprint(count_up_to(11))  # => [2,3,5,7]\nprint(count_up_to(0))   # => []\nprint(count_up_to(20))  # => [2,3,5,7,11,13,17,19]\nprint(count_up_to(1))   # => []\nprint(count_up_to(18))  # => [2,3,5,7,11,13,17]\n"}
{"task_id": "HumanEval/97", "completion": "\ndef multiply(a, b):\n    \"\"\"\n    This function takes two integers and returns \n    the product of their unit digits.\n\n    Args:\n        a (int): The first integer.\n        b (int): The second integer.\n\n    Returns:\n        int: The product of the unit digits of a and b.\n\n    Examples:\n        multiply(148, 412) should return 16.\n        multiply(19, 28) should return 72.\n        multiply(2020, 1851) should return 0.\n        multiply(14,-15) should return 20.\n    \"\"\"\n    return (a % 10) * (b % 10)\n"}
{"task_id": "HumanEval/98", "completion": "\ndef count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCd\u011bf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n    upper_vowels = 'AEIOU'\n    count = 0\n    for i in range(len(s)):\n        if i % 2 == 0 and s[i] in upper_vowels:\n            count += 1\n    return count\n\n# Test the function\nprint(count_upper('aBCd\u011bf'))  # should return 1\nprint(count_upper('abcdefg'))  # should return 0\nprint(count_upper('dBBE'))  # should return 0\n"}
{"task_id": "HumanEval/99", "completion": "\nimport math\n\ndef closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the farthest from zero.\n    For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    '''\n    # Convert the input string to a float number\n    value = float(value)\n    # Get the decimal part of the number\n    decimal_part = abs(value % 1)\n    # If decimal part is 0.5, we need to check if it's closer to the next or previous integer\n    if decimal_part == 0.5:\n        # If value is negative, the next integer is closer to zero, so we take the previous integer\n        if value < 0:\n            return math.floor(value)\n        # If value is positive, the next integer is not closer to zero, so we take the next integer\n        else:\n            return math.ceil(value)\n    # If decimal part is not 0.5, we use the built-in round function to get the closest integer\n    else:\n        return round(value)\n"}
{"task_id": "HumanEval/100", "completion": "\nimport math\n\ndef is_odd(n):\n    \"\"\"Return True if the number is odd, False otherwise.\"\"\"\n    return n % 2 != 0\n\ndef next_odd(n):\n    \"\"\"Return the next odd number after n.\"\"\"\n    if is_odd(n):\n        return n + 2\n    else:\n        return n + 1\n\ndef next_even(n):\n    \"\"\"Return the next even number after n.\"\"\"\n    return n + 2\n\ndef make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    pile = [n]\n    while len(pile) < n:\n        if is_odd(n):\n            pile.append(next_odd(pile[-1]))\n        else:\n            pile.append(next_even(pile[-1]))\n    return pile\n"}
{"task_id": "HumanEval/101", "completion": null}
{"task_id": "HumanEval/102", "completion": "\ndef choose_num(x, y):\n    \"\"\"\n    This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive.\n    If there's no such number, then the function should return -1.\n\n    Args:\n        x (int): The lower bound of the range (inclusive).\n        y (int): The upper bound of the range (inclusive).\n\n    Returns:\n        int: The biggest even integer in the range [x, y] if it exists, -1 otherwise.\n    \"\"\"\n    if x > y:\n        return -1\n    for i in range(y, x - 1, -1):\n        if i % 2 == 0:\n            return i\n    return -1\n"}
{"task_id": "HumanEval/103", "completion": "\ndef rounded_avg(n, m):\n    \"\"\"\n    You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    \n    Args:\n    n (int): The first integer\n    m (int): The second integer\n    \n    Returns:\n    str or int: The binary representation of the rounded average, or -1 if n is greater than m\n    \"\"\"\n    \n    # Check if n is greater than m, return -1 if true\n    if n > m:\n        return -1\n    \n    # Calculate the sum of integers from n to m\n    total = sum(range(n, m + 1))\n    \n    # Calculate the average\n    average = total / (m - n + 1)\n    \n    # Round the average to the nearest integer\n    rounded_average = round(average)\n    \n    # Convert the rounded average to binary and remove the '0b' prefix\n    binary_average = bin(rounded_average)[2:]\n    \n    return \"0b\" + binary_average\n\n# Test the function with examples\nprint(rounded_avg(1, 5))       # Output: \"0b11\"\nprint(rounded_avg(7, 5))       # Output: -1\nprint(rounded_avg(10, 20))    # Output: \"0b1111\"\nprint(rounded_avg(20, 33))   # Output: \"0b11010\"\n"}
{"task_id": "HumanEval/104", "completion": "\ndef unique_digits(x):\n    \"\"\"\n    Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    def has_even_digit(n):\n        # Check if a number has any even digit\n        return any(int(digit) % 2 == 0 for digit in str(n))\n\n    # Filter out numbers with even digits and sort the result\n    return sorted([num for num in x if not has_even_digit(num)])\n"}
{"task_id": "HumanEval/105", "completion": "\nimport numpy as np\n\ndef by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n    # Filter the array to include only numbers between 1 and 9\n    filtered_arr = np.array([num for num in arr if 1 <= num <= 9])\n    \n    # Sort the filtered array\n    sorted_arr = np.sort(filtered_arr)\n    \n    # Reverse the sorted array\n    reversed_arr = np.sort(sorted_arr)[::-1]\n    \n    # Define a dictionary to map numbers to their corresponding names\n    num_to_name = {\n        1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", \n        5: \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"\n    }\n    \n    # Replace each digit by its corresponding name from the dictionary\n    result = [num_to_name[num] for num in reversed_arr]\n    \n    return result\n"}
{"task_id": "HumanEval/106", "completion": "\nimport math\n\ndef f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    return [math.factorial(i) if i % 2 == 0 else sum(range(1, i+1)) for i in range(1, n+1)]\n"}
{"task_id": "HumanEval/107", "completion": "\ndef even_odd_palindrome(n):\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n    \"\"\"\n\n    # Initialize counters for even and odd palindromes\n    even_palindromes = 0\n    odd_palindromes = 0\n\n    # Iterate over the range from 1 to n (inclusive)\n    for i in range(1, n + 1):\n        # Convert the number to a string to check if it's a palindrome\n        str_i = str(i)\n        \n        # Check if the number is a palindrome\n        if str_i == str_i[::-1]:\n            # Check if the number is even or odd\n            if i % 2 == 0:\n                # If the number is even, increment the even palindrome counter\n                even_palindromes += 1\n            else:\n                # If the number is odd, increment the odd palindrome counter\n                odd_palindromes += 1\n\n    # Return a tuple with the counts of even and odd palindromes\n    return (even_palindromes, odd_palindromes)\n"}
{"task_id": "HumanEval/108", "completion": "\ndef count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\n    def sum_digits(n):\n        # convert number to string to handle negative numbers and find the sign\n        sign = -1 if n < 0 else 1\n        n = abs(n)\n        digit_sum = 0\n        # calculate the sum of digits\n        for digit in str(n):\n            digit_sum += int(digit)\n        return (digit_sum + sign) * sign > 0\n\n    return sum(sum_digits(num) for num in arr)\n"}
{"task_id": "HumanEval/109", "completion": "\ndef move_one_ball(arr):\n    \"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing \n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n    \n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index. \n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return True else return False.\n    If the given array is empty then return True.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3, 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n                \n    \"\"\"\n    if not arr:  # If the array is empty, return True\n        return True\n\n    sorted_arr = sorted(arr)  # Sort the array in non-decreasing order\n    for i in range(len(arr)):  # Perform right shift operation\n        if arr == sorted_arr[i:] + sorted_arr[:i]:  # Check if the array is equal to the sorted array after right shift operation\n            return True\n    return False  # If no right shift operation can make the array sorted, return False\n"}
{"task_id": "HumanEval/110", "completion": "\ndef exchange(lst1, lst2):\n    \"\"\"\n    This function checks if it's possible to make list lst1 a list of only even numbers\n    by exchanging elements with list lst2.\n    \n    Args:\n    lst1 (list): The list of numbers that needs to be made even.\n    lst2 (list): The list of numbers that can be exchanged with lst1.\n    \n    Returns:\n    str: \"YES\" if it's possible to make lst1 a list of only even numbers, \"NO\" otherwise.\n    \"\"\"\n    def is_even(x):\n        \"\"\"\n        Helper function to check if a number is even.\n        \n        Args:\n        x (int): The number to check.\n        \n        Returns:\n        bool: True if the number is even, False otherwise.\n        \"\"\"\n        return x % 2 == 0\n    \n    odd_in_lst1 = 0  # Count of odd numbers in lst1\n    for num in lst1:\n        if not is_even(num):\n            odd_in_lst1 += 1\n    \n    if odd_in_lst1 + lst2.count(1) > len(lst2): # Since lst2 must also have an odd number  \n        # for every odd number in lst1\n        return \"NO\"\n    \n    even_in_lst2 = 0  # Count of even numbers in lst2\n    for num in lst2:\n        if is_even(num):\n            even_in_lst2 += 1\n    \n    if odd_in_lst1 <= even_in_lst2:\n        return \"YES\"\n    else:\n        return \"NO\"\n"}
{"task_id": "HumanEval/111", "completion": "\nfrom collections import Counter\n\ndef histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    # Split the string into a list of letters\n    letters = test.split()\n    \n    # Count the occurrence of each letter\n    letter_counts = Counter(letters)\n    \n    # Find the maximum count\n    max_count = max(letter_counts.values(), default=0)\n    \n    # Return a dictionary of letters with the maximum count\n    return {letter: count for letter, count in letter_counts.items() if count == max_count}\n"}
{"task_id": "HumanEval/112", "completion": "\ndef reverse_delete(s, c):\n    \"\"\"\n    This function deletes all characters in string s that are present in string c.\n    It then checks if the resulting string is a palindrome.\n    \n    Args:\n        s (str): The original string.\n        c (str): The string containing characters to be deleted.\n    \n    Returns:\n        tuple: A tuple containing the resulting string and a boolean indicating whether the string is a palindrome.\n    \"\"\"\n    # Convert string c to a set for efficient lookups\n    c_set = set(c)\n    \n    # Use a list comprehension to filter out characters in c from string s\n    result = [char for char in s if char not in c_set]\n    \n    # Join the characters back into a string\n    result_str = ''.join(result)\n    \n    # Check if the resulting string is a palindrome\n    is_palindrome = result_str == result_str[::-1]\n    \n    # Return the result string and the palindrome check\n    return result_str, is_palindrome\n```\n\nExample use cases:\n```python\nprint(reverse_delete(\"abcde\", \"ae\"))  # Output: ('bcd', False)\nprint(reverse_delete(\"abcdef\", \"b\"))  # Output: ('acdef', False)\nprint(reverse_delete(\"abcdedcba\", \"ab\"))  # Output: ('cdedc', True)\n"}
{"task_id": "HumanEval/113", "completion": "\nimport re\n\ndef odd_count(lst):\n    \"\"\"\n    Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n    \n    Parameters:\n    lst (list): List of strings, each consisting of digits\n    \n    Returns:\n    list: List of strings where each string contains the count of odd digits in the\n          corresponding string from the input list\n    \"\"\"\n    result = []\n    for i, string in enumerate(lst, 1):\n        # Count the number of odd digits in the string\n        count = (len(re.sub('\\d\\d', '', string)) + len(string)) // 2\n    \n        # Replace all the digit placeholders in the output string with the count\n        output = re.sub(r'\\d+', str(count), \"the number of odd elements %sin the straw%sin of the %sinput.\" % (''.join('d' for _ in range(len(string))), ''.join('r' for _ in range(len(string))), ''.join('d' for _ in range(len(string)))))\n        \n        result.append(output)\n    \n    return result\n\nprint(odd_count(['1234567']))\nprint(odd_count(['3',\"11111111\"]))\n"}
{"task_id": "HumanEval/114", "completion": "\ndef minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if not nums:\n        return 0\n    \n    min_sum = float('inf')\n    current_sum = 0\n    \n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    \n    return min_sum\n"}
{"task_id": "HumanEval/115", "completion": "\nimport math\nimport numpy as np\n\ndef max_fill(grid, capacity):\n    \"\"\"\n    This function calculates the maximum number of times you need to lower the buckets \n    to empty the wells in a given grid.\n\n    Parameters:\n    grid (list of lists): A rectangular grid of wells. \n                             Each row represents a single well, and each 1 in a row represents a single unit of water.\n    capacity (int): The capacity of the bucket.\n\n    Returns:\n    int: The maximum number of times you need to lower the buckets.\n\n    Example 1:\n        Input: \n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input: \n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n    \n    Example 3:\n        Input: \n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n    \"\"\"\n    \n    # Convert the grid to a numpy array for easier manipulation\n    grid = np.array(grid)\n\n    # Calculate the total amount of water in the grid\n    total_water = np.sum(grid)\n\n    # Calculate the maximum number of times you can lower the bucket\n    max_times = math.ceil(total_water / capacity)\n\n    return max_times\n\n\n# Example usage:\ngrid1 = [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\nbucket_capacity1 = 1\nprint(max_fill(grid1, bucket_capacity1))  # Output: 6\n\ngrid2 = [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\nbucket_capacity2 = 2\nprint(max_fill(grid2, bucket_capacity2))  # Output: 5\n  \ngrid3 = [[0,0,0], [0,0,0]]\nbucket_capacity3 = 5\nprint(max_fill(grid3, bucket_capacity3))  # Output: 0\n"}
{"task_id": "HumanEval/116", "completion": "\ndef sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    Args:\n        arr (list): A list of non-negative integers.\n\n    Returns:\n        list: The sorted list of integers according to the rules.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) == [0, 1, 2, 3, 4]\n    \"\"\"\n    def count_ones(num):\n        return bin(num).count('1')\n\n    return sorted(arr, key=lambda x: (count_ones(x) if x >= 0 else -count_ones(-x), x if x >= 0 else -x))\n"}
{"task_id": "HumanEval/117", "completion": "\nimport itertools\n\ndef select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    # Split the string into words\n    words = s.split()\n    \n    # Use a list comprehension to filter the words that contain exactly n consonants\n    # A consonant is any letter that is not a vowel (assuming both lowercase and uppercase letters)\n    consonants = filter(lambda word: sum(1 for char in word if char.lower() in 'bcdfghjklmnpqrstvwxyz'), words)\n    result = [word for word in consonants if sum(1 for char in word.lower() if char in 'bcdfghjklmnpqrstvwxyz') == n]\n    \n    # Initialize an empty list to store the result\n    result_in_order = []\n    \n    # Iterate over the filtered words and add them to the result in order\n    for word in words:\n        if sum(1 for char in word.lower() if char in 'bcdfghjklmnpqrstvwxyz') == n:\n            result_in_order.append(word)\n    \n    # Return the result\n    return result_in_order\n"}
{"task_id": "HumanEval/118", "completion": "\ndef get_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n    vowels = 'AEIOUaeiou'\n    for i in range(len(word) - 1, 0, -1):\n        if word[i] in vowels:\n            left = word[i - 1] if i - 1 >= 0 else None\n            right = word[i + 1] if i + 1 < len(word) else None\n            if left != None and right != None:\n                if left not in vowels and right not in vowels:\n                    return word[i]\n    return \"\"\n\n# Test cases\nprint(get_closest_vowel(\"yogurt\"))  # \"u\"\nprint(get_closest_vowel(\"FULL\"))  # \"U\"\nprint(get_closest_vowel(\"quick\"))  # \"\"\nprint(get_closest_vowel(\"ab\"))  # \"\"\n"}
{"task_id": "HumanEval/119", "completion": "\nimport collections\n\ndef match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    \n    # Merge the two strings into one\n    stack = collections.deque()\n    for char in lst[0] + lst[1]:\n        # If the character is an open parenthesis, push it to the stack\n        if char == '(':\n            stack.append(char)\n        # If the character is a close parenthesis\n        elif char == ')':\n            # If the stack is empty, return 'No' because there's no matching open parenthesis\n            if not stack:\n                return 'No'\n            # If the stack is not empty, pop the matching open parenthesis\n            else:\n                stack.pop()\n            \n    # If the stack is empty after processing all characters, return 'Yes'\n    # because all parentheses are balanced\n    return 'Yes' if not stack else 'No'\n\n# Example usage:\nprint(match_parens(['()(', ')']))  # Output: Yes\nprint(match_parens([')', ')']))  # Output: No\n"}
{"task_id": "HumanEval/120", "completion": "\nimport heapq\n\ndef maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    # Use a heap to store the k largest numbers\n    # The heap will automatically maintain the maximum number at the top\n    max_heap = []\n    \n    # Iterate over the array\n    for num in arr:\n        # Push each number into the heap\n        # The heap will automatically adjust the position of the numbers\n        heapq.heappush(max_heap, num)\n        \n        # If the heap size exceeds k, remove the minimum number (which is the smallest in the heap)\n        if len(max_heap) > k:\n            heapq.heappop(max_heap)\n    \n    # After iterating over the array, the heap will contain the k largest numbers\n    # We return a sorted list of these numbers\n    return sorted(max_heap)\n"}
{"task_id": "HumanEval/121", "completion": "\ndef solution(lst):\n    \"\"\"\n    Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n\n    Args:\n        lst (list): A non-empty list of integers.\n\n    Examples:\n        solution([5, 8, 7, 1]) ==> 12\n        solution([3, 3, 3, 3, 3]) ==> 9\n        solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    return sum(num for i, num in enumerate(lst) if i % 2 == 0 and num % 2 != 0)\n"}
{"task_id": "HumanEval/122", "completion": "\ndef add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    :param arr: a non-empty array of integers\n    :param k: an integer\n    :return: the sum of the elements with at most two digits from the first k elements of arr\n    \"\"\"\n    filtered_elements = [num for num in arr[:k] if num >= 10 and num <= 99]  # filter numbers with at most two digits\n    return sum(filtered_elements)  # return the sum of the filtered elements\n\n# Example usage\nprint(add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4))  # Output: 24\n"}
{"task_id": "HumanEval/123", "completion": "\ndef get_collatz(n):\n    \"\"\"\n    Given a positive integer n, return the Collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n        2. Collatz(2) is [2, 1].\n\n    For example:\n    get_collatz(5) returns [5, 16, 8, 4, 2, 1]\n    \"\"\"\n    sequence = [n]\n    while n != 1:\n        if n % 2 == 0:\n            n = int(n / 2)\n        else:\n            n = n * 3 + 1\n        sequence.append(n)\n    return sequence\n\ndef get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    For example:\n    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    \"\"\"\n    collatz_sequence = get_collatz(n)\n    return sorted([num for num in collatz_sequence if num % 2 != 0])\n\nprint(get_odd_collatz(5))  # [1, 5]\nprint(get_odd_collatz(2))  # [2, 1]\nprint(get_odd_collatz(10)) # [3, 10, 5]\n"}
{"task_id": "HumanEval/124", "completion": "\nimport re\n\ndef valid_date(date):\n    \"\"\"\n    You have to write a function which validates a given date string and \n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. \n       And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. \n       And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example:\n    valid_date('03-11-2000') => True\n    \n    valid_date('15-01-2012') => False\n    \n    valid_date('04-0-2040') => False\n    \n    valid_date('06-04-2020') => True\n    \n    valid_date('06/04/2020') => False\n    \"\"\"\n    # Check if the date string is not empty\n    if not date:\n        return False\n    \n    # Use regular expression to check if the date string is in the format: mm-dd-yyyy\n    if re.search(r'\\d{2}-\\d{2}-\\d{4}', date):\n        # Check if the month is in the range 1-12\n        month, day, year = map(int, date.split('-'))\n        if 1 <= month <= 12:\n            # Check if the number of days is valid based on the month\n            if month in [1, 3, 5, 7, 8, 10, 12]:\n                return 1 <= day <= 31\n            elif month in [4, 6, 9, 11]:\n                return 1 <= day <= 30\n            elif month == 2:\n                return 1 <= day <= 29\n            else:\n                return False\n        else:\n            return False\n    else:\n        return False\n\n# Test the function\nprint(valid_date('03-11-2000'))  # True\nprint(valid_date('15-01-2012'))  # False\nprint(valid_date('04-0-2040'))  # False\nprint(valid_date('06-04-2020'))  # True\nprint(valid_date('06/04/2020'))  # False\n"}
{"task_id": "HumanEval/125", "completion": "\nimport re\nimport string\n\ndef split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 2 \n    '''\n    # Check if the text contains whitespace\n    if re.search(r'\\s', txt):\n        return txt.split()\n    \n    # Check if the text contains comma\n    elif re.search(r',', txt):\n        return txt.split(',')\n    \n    # If no whitespace and no comma, count the number of lower-case letters with odd order in the alphabet\n    else:\n        return sum(1 for i, c in enumerate(txt.lower()) if 0 <= ord(c)-ord('a') <= 25 and (ord(c)-ord('a')) % 2 == 1)\n\n# Test cases\nprint(split_words(\"Hello world!\"))  # Output: [\"Hello\", \"world!\"]\nprint(split_words(\"Hello,world!\"))  # Output: [\"Hello\", \"world!\"]\nprint(split_words(\"abcdef\"))  # Output: 3\n"}
{"task_id": "HumanEval/126", "completion": "\nfrom collections import Counter\n\ndef is_sorted(lst):\n    '''\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n\n    Examples\n    is_sorted([5]) \u279e True\n    is_sorted([1, 2, 3, 4, 5]) \u279e True\n    is_sorted([1, 3, 2, 4, 5]) \u279e False\n    is_sorted([1, 2, 3, 4, 5, 6]) \u279e True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279e True\n    is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279e False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279e True\n    is_sorted([1, 2, 2, 2, 3, 4]) \u279e False\n    '''\n    \n    # Check if the list has more than 1 duplicate of the same number\n    if len(Counter(lst)) < len(lst):\n        return False\n    \n    # Check if the list is sorted in ascending order\n    return all(lst[i] <= lst[i+1] for i in range(len(lst)-1))\n\n# Test the function\nprint(is_sorted([5]))  # True\nprint(is_sorted([1, 2, 3, 4, 5]))  # True\nprint(is_sorted([1, 3, 2, 4, 5]))  # False\nprint(is_sorted([1, 2, 3, 4, 5, 6]))  # True\nprint(is_sorted([1, 2, 3, 4, 5, 6, 7]))  # True\nprint(is_sorted([1, 3, 2, 4, 5, 6, 7]))  # False\nprint(is_sorted([1, 2, 2, 3, 3, 4]))  # True\nprint(is_sorted([1, 2, 2, 2, 3, 4]))  # False\n"}
{"task_id": "HumanEval/127", "completion": "\ndef is_prime(n):\n    \"\"\"Check if a number is prime\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n\ndef intersection(interval1, interval2):\n    \"\"\"Check if the length of intersection of two intervals is prime\"\"\"\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    intersection_length = max(0, end - start)\n    return \"YES\" if is_prime(intersection_length) else \"NO\"\n\n\n# Test cases\nprint(intersection((1, 2), (2, 3)))  # ==> \"NO\"\nprint(intersection((-1, 1), (0, 4)))  # ==> \"NO\"\nprint(intersection((-3, -1), (-5, 5)))  # ==> \"YES\"\n"}
{"task_id": "HumanEval/128", "completion": "\nimport numpy as np\n\ndef prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\n    if not arr:  # Check if array is empty\n        return None\n    \n    # Separate positive numbers, negative numbers and zero\n    positives = [num for num in arr if num > 0]\n    negatives = [-num for num in arr if num < 0]\n    zeros = [num for num in arr if num == 0]\n    \n    # Calculate product of all signs\n    sign_product = prod([-1 if num < 0 else 1 if num > 0 else 0 for num in arr])\n    \n    # Calculate sum of magnitudes of integers multiplied by product of all signs\n    result = sum(positive * sign_product for positive in positives) + sum(negative * sign_product for negative in negatives)\n    \n    # Subtract the number of negative numbers multiplied by sign_product because they are not added in the sum above\n    if arr.count(0) == 0:\n        result -= len(negatives) * sign_product\n    return result\n\nimport math\ndef prod(iterable):\n    \"\"\"\n    Return the product of all elements in iterable If the iterable is empty, return 1.\n    \"\"\"\n    p = 1\n    for n in iterable:\n        p *= n\n    return p\n"}
{"task_id": "HumanEval/129", "completion": "\nfrom collections import deque\nfrom typing import List\n\ndef minPath(grid: List[List[int]], k: int) -> List[int]:\n    \"\"\"\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n    \"\"\"\n    m, n = len(grid), len(grid[0])\n    visited = [[False]*n for _ in range(m)]\n    queue = deque([(i, j, []) for i in range(m) for j in range(n)])\n    visited[0][0] = True\n    min_path = None\n    while queue:\n        x, y, path = queue.popleft()\n        if len(path) == k:\n            if min_path is None or path < min_path:\n                min_path = path\n        else:\n            for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]:\n                nx, ny = x + dx, y + dy\n                if 0 <= nx < m and 0 <= ny < n and not visited[nx][ny]:\n                    visited[nx][ny] = True\n                    queue.append((nx, ny, path + [grid[nx][ny]]))\n    return min_path\n"}
{"task_id": "HumanEval/130", "completion": "\ndef tri(n):\n    \"\"\"\n    Returns the first n + 1 numbers of the Tribonacci sequence.\n    \n    The Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    \n    Args:\n        n (int): A non-negative integer number.\n    \n    Returns:\n        list: The first n + 1 numbers of the Tribonacci sequence.\n    \"\"\"\n    if n == 1:\n        return [3]\n    elif n == 2:\n        return [1, 3]\n    else:\n        sequence = [1, 3, 2]\n        for i in range(3, n + 1):\n            if i % 2 == 0:\n                sequence.append(1 + i / 2)\n            else:\n                sequence.append(sequence[i - 2] + sequence[i - 3] + sequence[i - 1])\n        return sequence\n\n# Test the function\nprint(tri(3))  # Output: [1, 3, 2, 8]\nprint(tri(4))  # Output: [1, 3, 2, 8, 13]\nprint(tri(5))  # Output: [1, 3, 2, 8, 13, 24]\n"}
{"task_id": "HumanEval/131", "completion": "\ndef digits(n):\n    \"\"\"\n    Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    \n    Parameters:\n    n (int): A positive integer.\n    \n    Returns:\n    int: The product of the odd digits.\n    \n    Examples:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    product = 1\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            product *= int(digit)\n    return product\n"}
{"task_id": "HumanEval/132", "completion": "\ndef is_nested(string):\n    \"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    Args:\n        string (str): A string containing only square brackets.\n\n    Returns:\n        bool: True if there is a valid subsequence of nested brackets, False otherwise.\n    \"\"\"\n    count = 0\n    for char in string:\n        if char == '[':\n            count += 1\n        elif char == ']':\n            if count == 0:\n                return False\n            count -= 1\n    return count > 0\n"}
{"task_id": "HumanEval/133", "completion": "\nimport math\n\ndef sum_squares(lst):\n    \"\"\"\n    This function calculates the sum of squared numbers in the given list.\n    Each element in the list is rounded to the upper integer using the ceil function.\n    \n    Args:\n        lst (list): A list of numbers.\n    \n    Returns:\n        int: The sum of squared numbers.\n    \"\"\"\n    # Use list comprehension to round each number in the list to the upper int\n    rounded_lst = [math.ceil(i) for i in lst]\n    \n    # Use list comprehension to square each number in the list\n    squared_lst = [i ** 2 for i in rounded_lst]\n    \n    # Return the sum of the squared numbers\n    return sum(squared_lst)\n\n# Test cases\nprint(sum_squares([1, 2, 3]))  # Outputs: 14\nprint(sum_squares([1, 4, 9]))  # Outputs: 98\nprint(sum_squares([1, 3, 5, 7]))  # Outputs: 84\nprint(sum_squares([1.4, 4.2, 0]))  # Outputs: 29\nprint(sum_squares([-2.4, 1, 1]))  # Outputs: 6\n"}
{"task_id": "HumanEval/134", "completion": "\ndef check_if_last_char_is_a_letter(txt):\n    '''\n    Create a function that returns True if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and False otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Args:\n        txt (str): The input string.\n\n    Returns:\n        bool: True if the last character is an alphabetical character\n              and is not a part of a word, False otherwise.\n\n    Examples:\n        check_if_last_char_is_a_letter(\"apple pie\") \u279e False\n        check_if_last_char_is_a_letter(\"apple pi e\") \u279e True\n        check_if_last_char_is_a_letter(\"apple pi e \") \u279e False\n        check_if_last_char_is_a_letter(\"\") \u279e False \n    '''\n    # Remove leading and trailing spaces\n    txt = txt.strip()\n    \n    # If the string is empty, return False\n    if not txt:\n        return False\n    \n    # Split the string into words\n    words = txt.split()\n    \n    # Get the last word\n    last_word = words[-1]\n    \n    # If the last word is a single character, return True if it's a letter\n    if len(last_word) == 1:\n        return last_word.isalpha()\n    \n    # If the last character of the last word is a letter, return True\n    return last_word[-1].isalpha()\n"}
{"task_id": "HumanEval/135", "completion": "\ndef can_arrange(arr):\n    \"\"\"\n    Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Args:\n        arr (list): A list of unique integers.\n\n    Returns:\n        int: The largest index of an element which is not greater than or equal\n        to the element immediately preceding it. If no such element exists then\n        return -1.\n    \"\"\"\n    for i in range(1, len(arr)):\n        if arr[i-1] < arr[i]:\n            return i - 1\n    return -1\n```\n\nThis Python function iterates over the given array from the second element to the end. For each element, it checks if the previous element is less than it. If such an element is found, its index is immediately returned. If no such element exists, the function returns -1. \n\nYou can test the function with the given examples:\n\n```python\nprint(can_arrange([1,2,4,3,5]))  # Output: 3\nprint(can_arrange([1,2,3]))     # Output: -1\n"}
{"task_id": "HumanEval/136", "completion": "\ndef largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n    negative_integers = [i for i in lst if i < 0]\n    positive_integers = [i for i in lst if i > 0]\n\n    if not negative_integers:\n        a = None\n    else:\n        a = max(negative_integers)\n\n    if not positive_integers:\n        b = None\n    else:\n        b = min(positive_integers)\n\n    return a, b\n"}
{"task_id": "HumanEval/137", "completion": "\ndef compare_one(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n    \n    compare_one(1, 2.5) \u279e 2.5\n    compare_one(1, \"2,3\") \u279e \"2,3\"\n    compare_one(\"5,1\", \"6\") \u279e \"6\"\n    compare_one(\"1\", 1) \u279e None\n    \"\"\"\n    \n    # Try to compare 'a' and 'b' as floats\n    try:\n        if float(a) >= float(b):\n            return a\n        elif float(b) > float(a):\n            return b\n        else:\n            return None\n    # If ValueError occurs, then 'a' and/or 'b' is not a number\n    except ValueError:\n        # If 'a' and 'b' is not a number, then return the larger string\n        try:\n            a_arr = a.replace(\",\", \".\").split(\".\")\n            b_arr = b.replace(\",\", \".\").split(\".\")\n            if int(a_arr[0] + (a_arr[1] if len(a_arr) > 1 else \"\")) >= int(b_arr[0] + (b_arr[1] if len(b_arr) > 1 else \"\")):\n                return a\n            elif int(b_arr[0] + (b_arr[1] if len(b_arr) > 1 else \"\")) > int(a_arr[0] + (a_arr[1] if len(a_arr) > 1 else \"\")):\n                return b\n            else:\n                return None\n        # If ValueError occurs, then the number with '.' is not in format #_##_#;_# for some more '.' before #_\n        except ValueError:\n            try:\n                a_num = float(eval(a.replace(\",\", \".\")))\n                b_num = float(eval(b.replace(\",\", \".\")))\n                if a_num >= b_num:\n                    return a\n                elif b_num > a_num:\n                    return b\n                else:\n                    return None\n            # If ValueError occurs, return b\n            except ValueError:\n                return b\n"}
{"task_id": "HumanEval/138", "completion": "\ndef is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    \n    Args:\n    n (int): A given number to check\n    \n    Returns:\n    bool: True if the number can be written as the sum of exactly 4 positive even numbers, False otherwise\n    \n    Example:\n    is_equal_to_sum_even(4) == False\n    is_equal_to_sum_even(6) == False\n    is_equal_to_sum_even(8) == True\n    \"\"\"\n    for i in range(2, n // 2 + 1, 2):\n        for j in range(i, n // 2 + 1, 2):\n            for k in range(j, n // 2 + 1, 2):\n                for m in range(k, n // 2 + 1, 2):\n                    if i + j + k + m == n:\n                        return True\n    return False\n"}
{"task_id": "HumanEval/139", "completion": "\nimport math\n\ndef special_factorial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n    total = 1\n    for i in range(1, n+1):\n        total *= math.factorial(i)\n    return total\n"}
{"task_id": "HumanEval/140", "completion": "\nimport re\n\ndef fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\"\n    text = text.replace(\" \", \"_\")\n    text = re.sub(' +', '-', text)\n    return text\n\n# Test cases\nprint(fix_spaces(\"Example\"))  # \"Example\"\nprint(fix_spaces(\"Example 1\"))  # \"Example_1\"\nprint(fix_spaces(\" Example 2\"))  # \"_Example_2\"\nprint(fix_spaces(\" Example   3\"))  # \"_Example-3\"\n"}
{"task_id": "HumanEval/141", "completion": null}
{"task_id": "HumanEval/142", "completion": "\nimport math\n\ndef sum_squares(lst):\n    \"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Args:\n    lst (list): A list of integers.\n    \n    Returns:\n    int: The sum of the modified list.\n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    # Check if the input is a list\n    if not isinstance(lst, list):\n        raise TypeError(\"Input must be a list.\")\n    \n    # Check if all elements in the list are integers\n    if not all(isinstance(x, int) for x in lst):\n        raise TypeError(\"All elements in the list must be integers.\")\n    \n    # Initialize the sum variable to 0\n    total_sum = 0\n    \n    # Iterate over the list with index\n    for i, num in enumerate(lst):\n        # Check if index is a multiple of 3\n        if i % 3 == 0:\n            # Add the squared number to the total sum\n            total_sum += num ** 2\n        # Check if index is a multiple of 4 but not 3\n        elif i % 4 == 0 and i % 3 != 0:\n            # Add the cubed number to the total sum\n            total_sum += num ** 3\n    \n    # Return the total sum\n    return total_sum\n\n# Test cases\nprint(sum_squares([1,2,3]))  # Output: 6\nprint(sum_squares([]))  # Output: 0\nprint(sum_squares([-1,-5,2,-1,-5]))  # Output: -126\n"}
{"task_id": "HumanEval/143", "completion": "\nimport sympy\n\ndef words_in_sentence(sentence):\n    \"\"\"\n    This function takes a sentence as input and returns a string containing the words \n    whose lengths are prime numbers, maintaining the same order as the original sentence.\n\n    Args:\n        sentence (str): Input sentence containing words separated by spaces.\n\n    Returns:\n        str: A string containing the words from the original sentence whose lengths are prime numbers.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n    \"\"\"\n    words = sentence.split()  # Split the sentence into words\n    prime_word_list = []  # Initialize an empty list to store prime words\n\n    for word in words:\n        if len(word) > 1:  # Check if word length is greater than 1\n            if sympy.isprime(len(word)):  # Use sympy library to check if word length is prime\n                prime_word_list.append(word)  # Add the word to the list if it's length is prime\n\n    return ' '.join(prime_word_list)  # Join the list of prime words into a string with spaces\n"}
{"task_id": "HumanEval/144", "completion": "\nfrom fractions import Fraction\n\ndef simplify(x, n):\n    \"\"\"Your task is to implement a function that will simplify the expression\n    x * n. The function returns True if x * n evaluates to a whole number and False\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = True\n    simplify(\"1/6\", \"2/1\") = False\n    simplify(\"7/10\", \"10/2\") = False\n    \"\"\"\n    # Convert the string fractions to Fraction objects for easy arithmetic\n    frac_x = Fraction(x)\n    frac_n = Fraction(n)\n\n    # Multiply the two fractions\n    product = frac_x * frac_n\n\n    # Check if the product has a denominator of 1 (i.e., it's a whole number)\n    return product.denominator == 1\n"}
{"task_id": "HumanEval/145", "completion": "\ndef order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # Use the sorted function to sort the list in ascending order\n    # The sorted function takes a key as a parameter, which is a function that takes a list element and returns a value that will be used for sorting\n    # We use a lambda function as the key, which calculates the sum of the digits of a number and also returns its original index\n    # The sorted function is stable, meaning that when multiple records have the same key, their original order is preserved\n    return sorted(enumerate(nums), key=lambda x: (sum(int(digit) for digit in str(abs(x[1]))), x[0]))\n"}
{"task_id": "HumanEval/146", "completion": "\ndef specialFilter(nums):\n    \"\"\"\n    This function takes an array of numbers as input and returns the number \n    of elements in the array that are greater than 10 and both first and last \n    digits of a number are odd.\n\n    Args:\n        nums (list): A list of numbers\n\n    Returns:\n        int: The number of elements in the array that meet the condition\n    \"\"\"\n    # Initialize a counter for numbers that meet the condition\n    count = 0\n    \n    # Iterate over each number in the list\n    for num in nums:\n        # Check if the number is greater than 10\n        if num > 10:\n            # Convert the number to a string to easily access its digits\n            num_str = str(num)\n            # Check if the first and last digits of the number are odd\n            if int(num_str[0]) % 2 != 0 and int(num_str[-1]) % 2 != 0:\n                # If the conditions are met, increment the counter\n                count += 1\n    \n    # Return the count of numbers that meet the condition\n    return count\n\n# Test the function\nprint(specialFilter([15, -73, 14, -15]))  # Output: 1\nprint(specialFilter([33, -2, -3, 45, 21, 109]))  # Output: 2\n"}
{"task_id": "HumanEval/147", "completion": "\ndef get_max_triples(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\n    def calculate_value(i):\n        return i * i - i + 1\n\n    max_count = 0\n    for i in range(1, n + 1):\n        for j in range(i + 1, n + 1):\n            for k in range(j + 1, n + 1):\n                value = calculate_value(i) + calculate_value(j) + calculate_value(k)\n                if value % 3 == 0:\n                    max_count += 1\n    return max_count\n"}
{"task_id": "HumanEval/148", "completion": "\n# Define a list of planets in our solar system, sorted by proximity to the Sun\nplanets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n\ndef bf(planet1, planet2):\n    '''\n    Returns a tuple containing all planets whose orbits are located between \n    the orbit of planet1 and the orbit of planet2, sorted by the proximity \n    to the sun.\n    \n    Args:\n        planet1 (str): The name of the first planet.\n        planet2 (str): The name of the second planet.\n    \n    Returns:\n        tuple: A tuple of planet names whose orbits are between the orbits \n        of planet1 and planet2.\n    '''\n    \n    # Check if both planet1 and planet2 are in the list of planets\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    # Find the indices of planet1 and planet2 in the list of planets\n    index1 = planets.index(planet1)\n    index2 = planets.index(planet2)\n    \n    # If index1 is greater than index2, swap them to ensure index1 is the smaller index\n    if index1 > index2:\n        index1, index2 = index2, index1\n    \n    # Return the planets between index1 and index2, excluding index1 and index2\n    return tuple(planets[index1 + 1:index2])\n\n# Test the function\nprint(bf(\"Jupiter\", \"Neptune\"))  # ==> (\"Saturn\", \"Uranus\")\nprint(bf(\"Earth\", \"Mercury\"))  # ==> (\"Venus\")\nprint(bf(\"Mercury\", \"Uranus\"))  # ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n"}
{"task_id": "HumanEval/149", "completion": "\nimport heapq\n\ndef sorted_list_sum(lst):\n    \"\"\"\n    This function accepts a list of strings, deletes the strings with odd lengths,\n    and returns the resulted list in sorted order.\n\n    The list is sorted by the length of each word in ascending order.\n    If two words have the same length, the list is sorted alphabetically.\n\n    :param lst: A list of strings\n    :return: A list of strings in sorted order\n    \"\"\"\n    # Filter out strings with odd lengths and use a list comprehension to get the lengths of the strings\n    lengths = [(len(s), s) for s in lst if len(s) % 2 == 0]\n    # Use the `heapq.nsmallest` function to get the smallest `n` elements from the list\n    # We use this here because we want all the strings with even lengths, sorted by length and then by string\n    min_heap = []\n    for length, string in lengths:\n        heapq.heappush(min_heap, (length, string))\n    # Use a list comprehension to get the strings from the min heap\n    sorted_list = [s for _, s in sorted(min_heap)]\n    return sorted_list\n\n# Test the function\nprint(sorted_list_sum([\"aa\", \"a\", \"aaa\"]))  # Should print [\"aa\"]\nprint(sorted_list_sum([\"ab\", \"a\", \"aaa\", \"cd\"]))  # Should print [\"ab\", \"cd\"]\n"}
{"task_id": "HumanEval/150", "completion": "\nimport math\n\ndef is_prime(n):\n    \"\"\"Check if a number is prime.\"\"\"\n    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    sqrt_n = math.isqrt(n)\n    for i in range(3, sqrt_n + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n\ndef x_or_y(n, x, y):\n    \"\"\"A simple program which returns the value of x if n is a prime number and returns the value of y otherwise.\"\"\"\n    if is_prime(n):\n        return x\n    else:\n        return y\n\n# Test cases\nprint(x_or_y(7, 34, 12))  # Expected output: 34\nprint(x_or_y(15, 8, 5))   # Expected output: 5\n"}
{"task_id": "HumanEval/151", "completion": "\ndef double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    # Initialize sum to 0\n    total_sum = 0\n    \n    # Iterate over each number in the list\n    for num in lst:\n        # Check if the number is an integer and not negative\n        if isinstance(num, int) and num >= 0:\n            # Check if the number is odd\n            if num % 2 != 0:\n                # Add the square of the number to the total sum\n                total_sum += num ** 2\n    \n    # Return the total sum\n    return total_sum\n"}
{"task_id": "HumanEval/152", "completion": "\ndef compare(scores, guesses):\n    \"\"\"\n    This function compares the scores of matches with the guesses made by a person.\n    \n    Args:\n        scores (list): A list of scores obtained in the matches.\n        guesses (list): A list of guesses made by a person for each match.\n        \n    Returns:\n        list: A list of absolute differences between the scores and guesses for each match.\n    \"\"\"\n    # Initialize an empty list to store the results\n    results = []\n    \n    # Iterate over the scores and guesses using zip()\n    for score, guess in zip(scores, guesses):\n        # Calculate the absolute difference between the score and guess\n        diff = abs(score - guess)\n        \n        # If the guess is equal to the score, the difference is 0\n        # Otherwise, the difference is the absolute difference between the score and guess\n        diff = score - guess if score == guess else diff\n        \n        # Append the result to the results list\n        results.append(diff)\n    \n    # Return the list of results\n    return results\n\n# Example usage:\nprint(compare([1,2,3,4,5,1],[1,2,3,4,2,-2]))  # Output: [0, 0, 0, 0, 3, 3]\nprint(compare([0,5,0,0,0,4],[4,1,1,0,0,-2]))  # Output: [4, 4, 1, 0, 0, 6]\n"}
{"task_id": "HumanEval/153", "completion": "\nfrom typing import List\n\ndef Strongest_Extension(class_name: str, extensions: List[str]) -> str:\n    \"\"\"\n    This function finds the strongest extension for a given class.\n    \n    The strength of an extension is calculated as the difference between the number of uppercase letters and the number of lowercase letters in its name.\n    \n    If there are multiple extensions with the same strength, the function returns the one that comes first in the list.\n    \n    Parameters:\n    class_name (str): The name of the class.\n    extensions (List[str]): A list of extensions.\n    \n    Returns:\n    str: The name of the class followed by the strongest extension.\n    \"\"\"\n    \n    # Initialize the strongest extension and its strength\n    strongest_extension = ''\n    strongest_strength = float('-inf')  # Initialize with negative infinity\n    \n    # Iterate over each extension\n    for extension in extensions:\n        # Calculate the strength of the current extension\n        strength = sum(1 for char in extension if char.isupper()) - sum(1 for char in extension if char.islower())\n        \n        # If the current extension is stronger than the strongest extension found so far, update the strongest extension\n        if strength > strongest_strength:\n            strongest_extension = extension\n            strongest_strength = strength\n    \n    # Return the name of the class followed by the strongest extension\n    return f'{class_name}.{strongest_extension}'\n"}
{"task_id": "HumanEval/154", "completion": "\ndef cycpattern_check(a, b):\n    \"\"\"\n    Check if the second word or any of its rotations is a substring in the first word.\n\n    Args:\n    a (str): The first word.\n    b (str): The second word.\n\n    Returns:\n    bool: True if the second word or any of its rotations is a substring in the first word, False otherwise.\n    \"\"\"\n    # Check if the length of the second word is greater than the first word\n    if len(b) > len(a):\n        return False\n    \n    # Generate all rotations of the second word\n    for i in range(len(b)):\n        rot_b = b[i:] + b[:i]\n        \n        # Check if the rotation of the second word is a substring of the first word\n        if rot_b in a:\n            return True\n    \n    return False\n\n# Test cases\nprint(cycpattern_check(\"abcd\",\"abd\"))  # => False\nprint(cycpattern_check(\"hello\",\"ell\"))  # => True\nprint(cycpattern_check(\"whassup\",\"psus\"))  # => False\nprint(cycpattern_check(\"abab\",\"baa\"))  # => True\nprint(cycpattern_check(\"efef\",\"eeff\"))  # => False\nprint(cycpattern_check(\"himenss\",\"simen\"))  # => True\n"}
{"task_id": "HumanEval/155", "completion": "\ndef even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    even_count = 0\n    odd_count = 0\n    for digit in str(abs(num)):\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return even_count, odd_count\n"}
{"task_id": "HumanEval/156", "completion": "\ndef int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if not isinstance(number, int) or number < 1 or number > 1000:\n        raise ValueError(\"Number must be an integer between 1 and 1000\")\n\n    roman_numerals = {\n        1000: 'm',\n        900: 'cm',\n        500: 'd',\n        400: 'cd',\n        100: 'c',\n        90: 'xc',\n        50: 'l',\n        40: 'xl',\n        10: 'x',\n        9: 'ix',\n        5: 'v',\n        4: 'iv',\n        1: 'i'\n    }\n\n    result = ''\n    for value, numeral in roman_numerals.items():\n        while number >= value:\n            result += numeral\n            number -= value\n\n    return result.lower()\n"}
{"task_id": "HumanEval/157", "completion": "\nimport math\n\ndef right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n    # Check if any two sides satisfy the Pythagorean theorem\n    sides = [a, b, c]\n    sides.sort(reverse=True)  # Sort the sides in descending order\n    \n    # Check if the square of the longest side is equal to the sum of squares of the other two sides\n    return sides[0]**2 == sides[1]**2 + sides[2]**2\n"}
{"task_id": "HumanEval/158", "completion": "\nfrom collections import Counter\n\ndef find_max(words):\n    \"\"\"\n    Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    :param words: A list of strings\n    :return: The string with maximum number of unique characters\n    \"\"\"\n    max_unique_chars = 0\n    max_word = \"\"\n\n    for word in words:\n        unique_chars = len(Counter(word))\n        if unique_chars > max_unique_chars:\n            max_unique_chars = unique_chars\n            max_word = word\n        elif unique_chars == max_unique_chars:\n            if word < max_word:\n                max_word = word\n\n    return max_word\n\n# Test cases\nfind_max([\"name\", \"of\", \"string\"])  # Expected output: \"string\"\nfind_max([\"name\", \"enam\", \"game\"])  # Expected output: \"enam\"\nfind_max([\"aaaaaaa\", \"bb\", \"cc\"])  # Expected output: \"aaaaaaa\"\n"}
{"task_id": "HumanEval/159", "completion": "\ndef eat(number, need, remaining):\n    \"\"\"\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n    \"\"\"\n    total_eaten = number + max(0, need - remaining)\n    remaining_carrots = max(0, remaining - need)\n    return [total_eaten, remaining_carrots]\n"}
{"task_id": "HumanEval/160", "completion": "\nimport operator as op\n\ndef do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator=['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    # Map operator symbols to their corresponding functions\n    ops = {\n        '+': op.add,\n        '-': op.sub,\n        '*': op.mul,\n        '//': op.floordiv,\n        '**': op.pow\n    }\n\n    # Initialize the result with the first operand\n    result = operand[0]\n\n    # Iterate over the operators and operands\n    for i in range(len(operator)):\n        # Get the current operator and operand\n        op_symbol = operator[i]\n        operand_value = operand[i + 1]\n\n        # Apply the current operator to the result and the operand\n        result = ops[op_symbol](result, operand_value)\n\n    return result\n\n\n# Example usage\noperator = ['+', '*', '-']\noperand = [2, 3, 4, 5]\nprint(do_algebra(operator, operand))  # Output: 9\n"}
{"task_id": "HumanEval/161", "completion": "\ndef solve(s):\n    \"\"\"\n    Reverses the case of letters in the string, while keeping non-letters unchanged.\n    If the string contains no letters, it is reversed.\n\n    Args:\n        s (str): The input string.\n\n    Returns:\n        str: The resulting string.\n    \"\"\"\n    result = \"\"\n    contains_letter = False\n\n    # Check if the string contains any letters\n    for char in s:\n        if char.isalpha():\n            contains_letter = True\n            break\n\n    if contains_letter:\n        # Iterate over the characters in the string and modify them accordingly\n        for char in s:\n            if char.isalpha():\n                result += char.swapcase()\n            else:\n                result += char\n    else:\n        # Reverse the string if it contains no letters\n        result = s[::-1]\n\n    return result\n\nprint(solve(\"1234\"))  # \"4321\"\nprint(solve(\"ab\"))  # \"AB\"\nprint(solve(\"#a@C\"))  # \"#A@c\"\n"}
{"task_id": "HumanEval/162", "completion": "\nimport hashlib\nimport re\n\ndef string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if not text:\n        return None\n    \n    # Replace any non-url safe characters with their ASCII equivalents\n    text = re.sub('[^\\w\\/\\-\\._\\?\\=\\&%~\\@\\<\\>\\,]', '', text)\n    \n    # Create a new md5 hash object\n    md5_hash = hashlib.md5()\n    \n    # Update the hash object with the text bytes\n    md5_hash.update(text.encode('utf-8'))\n    \n    # Get the hexadecimal representation of the hash\n    hex_dig = md5_hash.hexdigest()\n    \n    return hex_dig\n"}
{"task_id": "HumanEval/163", "completion": "\ndef generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\"\n    # Ensure a is less than or equal to b\n    a, b = min(a, b), max(a, b)\n\n    # Generate even digits between a and b\n    even_digits = [i for i in range(a, b+1) if i % 2 == 0]\n\n    return even_digits\n"}
