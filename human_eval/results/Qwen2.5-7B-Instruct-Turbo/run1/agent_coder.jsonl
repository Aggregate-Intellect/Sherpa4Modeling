{"task_id": "HumanEval/0", "completion": "\n    numbers.sort()\n    for i in range(len(numbers) - 1):\n        if numbers[i + 1] - numbers[i] < threshold:\n            return True\n\n    return False\n", "num_llm_calls": 10}
{"task_id": "HumanEval/1", "completion": "\nfrom typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string.replace(\" \", \"\"):\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n", "num_llm_calls": 10}
{"task_id": "HumanEval/2", "completion": "\ndef truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, return its decimal part. \"\"\"\n    integer_part = int(number)\n    decimal_part = number - integer_part\n    return decimal_part\n\n# Example usage:\n# print(truncate_number(3.5))  # Output: 0.5\n", "num_llm_calls": 10}
{"task_id": "HumanEval/3", "completion": "\n    balance = 0\n\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n\n    return False\n", "num_llm_calls": 10}
{"task_id": "HumanEval/4", "completion": "\nfrom typing import List\n\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n    # Calculate the mean of the dataset\n    mean_value = sum(numbers) / len(numbers)\n    \n    # Calculate the absolute differences from the mean\n    absolute_diffs = [abs(x - mean_value) for x in numbers]\n    \n    # Calculate the average of these absolute differences\n    mad = sum(absolute_diffs) / len(absolute_diffs)\n    \n    return mad\n", "num_llm_calls": 10}
{"task_id": "HumanEval/5", "completion": "\ndef intersperse(numbers: List[int], delimiter: int) -> List[int]:\n    result = []\n    for idx, number in enumerate(numbers):\n        result.append(number)\n        if idx < len(numbers) - 1:\n            result.append(delimiter)\n    return result\n", "num_llm_calls": 8}
{"task_id": "HumanEval/6", "completion": "\nfrom typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n\n    def max_depth(group: str) -> int:\n        current_depth = 0\n        max_depth = 0\n        for char in group:\n            if char == '(':\n                current_depth += 1\n                max_depth = max(max_depth, current_depth)\n            elif char == ')':\n                current_depth -= 1\n        return max_depth\n\n    return [max_depth(group) for group in paren_string.split()]\n", "num_llm_calls": 10}
{"task_id": "HumanEval/7", "completion": "\n    filtered_strings = []\n    for s in strings:\n        if substring in s:\n            filtered_strings.append(s)\n    return filtered_strings\n", "num_llm_calls": 10}
{"task_id": "HumanEval/8", "completion": "\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    # Initialize sum and product\n    total_sum = 0\n    total_product = 1\n\n    # Iterate through the list of numbers\n    for num in numbers:\n        total_sum += num  # Update sum\n        total_product *= num  # Update product\n\n    return total_sum, total_product\n", "num_llm_calls": 10}
{"task_id": "HumanEval/9", "completion": "\nfrom typing import List, Tuple\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    if not numbers:\n        return []\n\n    rolling_max_values = [numbers[0]]\n\n    for i in range(1, len(numbers)):\n        current_max = max(rolling_max_values[-1], numbers[i])\n        rolling_max_values.append(current_max)\n\n    return rolling_max_values\n", "num_llm_calls": 6}
{"task_id": "HumanEval/10", "completion": "\ndef is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    \"\"\"\n    if not string:\n        return ''\n\n    # Find the longest palindromic postfix\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            # The longest palindromic postfix starts at index i\n            break\n\n    # The prefix that comes before the palindromic suffix\n    prefix_to_reverse = string[:i]\n\n    # Reverse the prefix and append it to the end of the string\n    return string + prefix_to_reverse[::-1]\n", "num_llm_calls": 10}
{"task_id": "HumanEval/11", "completion": "\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    # Ensure both strings are of the same length\n    if len(a) != len(b):\n        raise ValueError(\"Input strings must be of the same length\")\n\n    # Initialize the result string\n    result = ''\n\n    # Perform XOR operation character by character\n    for char_a, char_b in zip(a, b):\n        if char_a == char_b:\n            result += '0'\n        else:\n            result += '1'\n\n    return result\n", "num_llm_calls": 6}
{"task_id": "HumanEval/12", "completion": "\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    \"\"\"\n    if not strings:\n        return None\n\n    longest_string = \"\"\n    for string in strings:\n        if len(string) > len(longest_string):\n            longest_string = string\n\n    return longest_string\n", "num_llm_calls": 8}
{"task_id": "HumanEval/13", "completion": "\ndef greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    while b != 0:\n        a, b = b, a % b\n    return a\n", "num_llm_calls": 8}
{"task_id": "HumanEval/14", "completion": "\nfrom typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n\n    # Initialize an empty list to store the prefixes\n    prefixes = []\n\n    # Iterate over the range of the string length to generate all prefixes\n    for i in range(1, len(string) + 1):\n        # Append the current prefix to the list\n        prefixes.append(string[:i])\n\n    return prefixes\n", "num_llm_calls": 10}
{"task_id": "HumanEval/15", "completion": "\n    return ' '.join(map(str, range(n + 1)))\n", "num_llm_calls": 8}
{"task_id": "HumanEval/16", "completion": "\nfrom string import ascii_letters\n\ndef count_distinct_characters(string: str) -> int:\n    # Convert the string to lowercase to ignore case sensitivity\n    lower_string = string.lower()\n    # Use a set to store distinct characters\n    distinct_chars = set(lower_string)\n    # Filter out non-alphabetic characters\n    filtered_chars = {char for char in distinct_chars if char in ascii_letters}\n    # Return the count of distinct alphabetic characters\n    return len(filtered_chars)\n\n", "num_llm_calls": 10}
{"task_id": "HumanEval/17", "completion": "\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    note last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n\n    result = []\n    notes = music_string.split()\n\n    for note in notes:\n        if note == 'o':\n            result.append(4)\n        elif note == 'o|':\n            result.append(2)\n        elif note == '.|':\n            result.append(1)\n\n    return result\n", "num_llm_calls": 10}
{"task_id": "HumanEval/18", "completion": "\ndef how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlap cases. \"\"\"\n    if not substring:\n        return 0\n\n    count = 0\n    start = 0\n    while start < len(string):\n        position = string.find(substring, start)\n        if position != -1:\n            count += 1\n            start = position + 1\n        else:\n            break\n\n    return count\n", "num_llm_calls": 10}
{"task_id": "HumanEval/19", "completion": "\ndef sort_numbers(numbers: str) -> str:\n    # Define a mapping from the string representation of numbers to their numerical values\n    numeral_map = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    \n    # Split the input string into a list of words\n    num_words = numbers.split()\n    \n    # Sort the list based on the numerical value of the words\n    sorted_words = sorted(num_words, key=numeral_map.get)\n    \n    # Join the sorted list back into a single string\n    return ' '.join(sorted_words)\n", "num_llm_calls": 10}
{"task_id": "HumanEval/20", "completion": "\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n\n    # Sort the list to ensure that we only need to check adjacent elements\n    sorted_numbers = sorted(numbers)\n    \n    # Initialize the closest pair with the first two elements\n    closest_pair = (sorted_numbers[0], sorted_numbers[1])\n    min_distance = sorted_numbers[1] - sorted_numbers[0]\n    \n    # Iterate through the sorted list to find the pair with the minimum distance\n    for i in range(1, len(sorted_numbers) - 1):\n        current_distance = sorted_numbers[i + 1] - sorted_numbers[i]\n        if current_distance < min_distance:\n            min_distance = current_distance\n            closest_pair = (sorted_numbers[i], sorted_numbers[i + 1])\n    \n    return closest_pair\n", "num_llm_calls": 10}
{"task_id": "HumanEval/21", "completion": "\nfrom typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n\n    if len(numbers) < 2:\n        raise ValueError(\"List must contain at least two elements\")\n\n    min_num = min(numbers)\n    max_num = max(numbers)\n\n    return [(num - min_num) / (max_num - min_num) for num in numbers]\n", "num_llm_calls": 10}
{"task_id": "HumanEval/22", "completion": "\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers \"\"\"\n    result = []\n    for value in values:\n        if isinstance(value, int):\n            result.append(value)\n    return result\n", "num_llm_calls": 10}
{"task_id": "HumanEval/23", "completion": "\ndef strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n    return len(string)\n", "num_llm_calls": 8}
{"task_id": "HumanEval/24", "completion": "\ndef largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i\n    return 1  # Fallback for n=1 or n=2, since no divisor other than 1 exists\n", "num_llm_calls": 6}
{"task_id": "HumanEval/25", "completion": "\n    def is_prime(num: int) -> bool:\n        \"\"\" Check if a number is prime \"\"\"\n        if num <= 1:\n            return False\n        if num <= 3:\n            return True\n        if num % 2 == 0 or num % 3 == 0:\n            return False\n        i = 5\n        while i * i <= num:\n            if num % i == 0 or num % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n\n    factors = []\n    candidate = 2\n    while n > 1:\n        while n % candidate == 0:\n            factors.append(candidate)\n            n //= candidate\n        candidate += 1\n\n    return factors\n", "num_llm_calls": 6}
{"task_id": "HumanEval/26", "completion": "\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    frequency_map = {}\n    result = []\n\n    for number in numbers:\n        if number not in frequency_map:\n            frequency_map[number] = 1\n            result.append(number)\n        else:\n            frequency_map[number] += 1\n\n    # Remove duplicates based on frequency\n    result = [number for number in result if frequency_map[number] == 1]\n\n    return result\n", "num_llm_calls": 8}
{"task_id": "HumanEval/27", "completion": "\ndef flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n    result = []\n    for char in string:\n        if char.islower():\n            result.append(char.upper())\n        elif char.isupper():\n            result.append(char.lower())\n        else:\n            result.append(char)\n    return ''.join(result)\n", "num_llm_calls": 10}
{"task_id": "HumanEval/28", "completion": "\nfrom typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    result = \"\"\n    for s in strings:\n        result += s\n    return result\n", "num_llm_calls": 8}
{"task_id": "HumanEval/29", "completion": "\n    filtered_strings = []\n    for s in strings:\n        if s.startswith(prefix):\n            filtered_strings.append(s)\n\n    return filtered_strings\n", "num_llm_calls": 10}
{"task_id": "HumanEval/30", "completion": "\ndef get_positive(l: list) -> list:\n    \"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    # Use list comprehension to filter out only positive numbers\n    return [num for num in l if num > 0]\n", "num_llm_calls": 6}
{"task_id": "HumanEval/31", "completion": "\ndef is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n", "num_llm_calls": 10}
{"task_id": "HumanEval/32", "completion": "\ndef derivative(xs):\n    \"\"\"Calculate the derivative of the polynomial represented by xs.\"\"\"\n    return [i * c for i, c in enumerate(xs)][1:]  # Skip the 0th term which is constant\n\ndef poly(xs, x):\n    \"\"\"Evaluates polynomial with coefficients xs at point x.\"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs):\n    \"\"\"Find the zero of the polynomial with coefficients xs.\"\"\"\n    if len(xs) % 2 != 0 or not xs:\n        raise ValueError(\"The list of coefficients must have an even number of elements and be non-empty.\")\n\n    # Initial guess, start from x = 0\n    x = 0\n    max_iterations = 1000\n    threshold = 1e-6\n\n    for _ in range(max_iterations):\n        poly_val = poly(xs, x)\n        if abs(poly_val) < threshold:\n            return round(x, 2)\n        poly_deriv = poly(derivative(xs), x)\n        if poly_deriv == 0:\n            raise ValueError(\"Derivative is zero, cannot find zero using Newton-Raphson.\")\n        x -= poly_val / poly_deriv\n\n    raise ValueError(\"Failed to converge to a root within the maximum number of iterations.\")\n", "num_llm_calls": 10}
{"task_id": "HumanEval/33", "completion": "\ndef sort_third(l: list) -> list:\n    # Extract elements at indices divisible by 3\n    third_indices_elements = [l[i] for i in range(len(l)) if i % 3 == 0]\n    # Sort the extracted elements\n    third_indices_elements.sort()\n    \n    # Create a new list to store the sorted elements at the specified indices\n    sorted_l = [None] * len(l)\n    sorted_index = 0\n    \n    for i in range(len(l)):\n        if i % 3 == 0:\n            sorted_l[i] = third_indices_elements[sorted_index]\n            sorted_index += 1\n        else:\n            sorted_l[i] = l[i]\n    \n    return sorted_l\n", "num_llm_calls": 10}
{"task_id": "HumanEval/34", "completion": "\ndef unique(l: list) -> list:\n    # Use a set to remove duplicates and then convert back to a sorted list\n    return sorted(set(l))\n", "num_llm_calls": 10}
{"task_id": "HumanEval/35", "completion": "\ndef max_element(l: list) -> int:\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    if not l:  # Check if the list is empty\n        return None  # Return None or raise an error if the list is empty\n\n    max_val = l[0]  # Initialize max_val with the first element\n    for num in l:\n        if num > max_val:\n            max_val = num\n\n    return max_val\n", "num_llm_calls": 6}
{"task_id": "HumanEval/36", "completion": "\ndef fizz_buzz(n: int) -> int:\n    \"\"\"\n    Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    \"\"\"\n    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n\n# Test cases\nprint(fizz_buzz(50))  # Expected output: 0\nprint(fizz_buzz(78))  # Expected output: 2\nprint(fizz_buzz(79))  # Expected output: 3\n", "num_llm_calls": 10}
{"task_id": "HumanEval/37", "completion": "\ndef sort_even(l: list) -> list:\n    # Extract elements at even indices\n    even_indices = [l[i] for i in range(0, len(l), 2)]\n    \n    # Sort the extracted elements\n    sorted_even_indices = sorted(even_indices)\n    \n    # Create a new list to hold the result\n    sorted_list = []\n    even_index_iterator = iter(sorted_even_indices)\n    \n    # Merge the sorted even indexed elements back with the original odd indexed elements\n    for i in range(len(l)):\n        if i % 2 == 0:\n            sorted_list.append(next(even_index_iterator))\n        else:\n            sorted_list.append(l[i])\n    \n    return sorted_list\n", "num_llm_calls": 10}
{"task_id": "HumanEval/38", "completion": "\ndef decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string to groups. Each of length 3, similar to encoding.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group backwards. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n# Full solution\ndef encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\ndef decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string to groups. Each of length 3, similar to encoding.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group backwards. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n", "num_llm_calls": 10}
{"task_id": "HumanEval/39", "completion": "\nfrom math import sqrt\n\ndef is_prime(num: int) -> bool:\n    \"\"\"Check if a number is a prime number.\"\"\"\n    if num <= 1:\n        return False\n    for i in range(2, int(sqrt(num)) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef prime_fib(n: int):\n    \"\"\"Return the n-th Fibonacci number that is also prime.\"\"\"\n    fib1, fib2 = 0, 1\n    found = 0\n    while True:\n        fib_next = fib1 + fib2\n        fib1, fib2 = fib2, fib_next\n        if is_prime(fib_next):\n            found += 1\n            if found == n:\n                return fib_next\n\nprint(prime_fib(1))  # 2\nprint(prime_fib(2))  # 3\nprint(prime_fib(3))  # 5\nprint(prime_fib(4))  # 13\nprint(prime_fib(5))  # 89\n", "num_llm_calls": 6}
{"task_id": "HumanEval/40", "completion": "\ndef triples_sum_to_zero(l: list) -> bool:\n    # Edge case: if there are less than 3 elements, it's impossible to have three that sum to zero\n    if len(l) < 3:\n        return False\n    \n    # Sort the list to make it easier to avoid duplicates and use two-pointer technique\n    l.sort()\n    \n    for i in range(len(l) - 2):\n        # If the current element is greater than 0, no three elements can sum to zero\n        if l[i] > 0:\n            break\n        # Skip duplicate elements to avoid considering the same triple multiple times\n        if i > 0 and l[i] == l[i-1]:\n            continue\n        \n        left, right = i + 1, len(l) - 1\n        while left < right:\n            current_sum = l[i] + l[left] + l[right]\n            if current_sum == 0:\n                return True\n            elif current_sum < 0:\n                left += 1\n            else:\n                right -= 1\n    \n    return False\n", "num_llm_calls": 10}
{"task_id": "HumanEval/41", "completion": "\ndef car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right; simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n\n    # Since every car moving left to right will eventually collide with every car\n    # moving right to left, the total number of collisions is simply n * n.\n    return n * n\n", "num_llm_calls": 10}
{"task_id": "HumanEval/42", "completion": "\ndef incr_list(l: list) -> list:\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n    return [x + 1 for x in l]\n", "num_llm_calls": 6}
{"task_id": "HumanEval/43", "completion": "\ndef pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    \"\"\"\n    seen = set()\n    for number in l:\n        if -number in seen:\n            return True\n        seen.add(number)\n    return False\n", "num_llm_calls": 8}
{"task_id": "HumanEval/44", "completion": "\ndef change_base(x: int, base: int) -> str:\n    if base < 2 or base > 10:\n        raise ValueError(\"Base must be between 2 and 10\")\n\n    result = \"\"\n    while x > 0:\n        remainder = x % base\n        result = str(remainder) + result\n        x = x // base\n\n    return result if result else \"0\"\n", "num_llm_calls": 10}
{"task_id": "HumanEval/45", "completion": "\ndef triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    return 0.5 * a * h\n", "num_llm_calls": 8}
{"task_id": "HumanEval/46", "completion": "\ndef fib4(n: int):\n    \"\"\"The Fib4 number sequence is a sequence similar to the Fibonacci sequence that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence. Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\n    if n == 0 or n == 1:\n        return 0\n    if n == 2:\n        return 2\n    if n == 3:\n        return 0\n\n    # Initialize the base values\n    a, b, c, d = 0, 0, 2, 0\n\n    # Compute fib4(n) iteratively\n    for i in range(4, n + 1):\n        result = a + b + c + d\n        a, b, c, d = b, c, d, result\n\n    return d\n", "num_llm_calls": 10}
{"task_id": "HumanEval/47", "completion": "\ndef median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    sorted_list = sorted(l)\n    n = len(sorted_list)\n\n    if n % 2 == 0:\n        return (sorted_list[n // 2 - 1] + sorted_list[n // 2]) / 2\n    else:\n        return sorted_list[n // 2]\n", "num_llm_calls": 10}
{"task_id": "HumanEval/48", "completion": "\ndef is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n\n    # Remove all non-alphanumeric characters and convert to lowercase for accurate palindrome check\n    cleaned_text = ''.join(c.lower() for c in text if c.isalnum())\n\n    # Check if the cleaned text is equal to its reverse\n    return cleaned_text == cleaned_text[::-1]\n", "num_llm_calls": 10}
{"task_id": "HumanEval/49", "completion": "\ndef modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    # Initialize result to 1 since 2^0 = 1\n    result = 1\n\n    # Loop n times to multiply 2, n times\n    for _ in range(n):\n        # Update result with modulo operation to avoid large numbers\n        result = (result * 2) % p\n\n    return result\n", "num_llm_calls": 10}
{"task_id": "HumanEval/50", "completion": "\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n", "num_llm_calls": 10}
{"task_id": "HumanEval/51", "completion": "\ndef remove_vowels(text: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    result = []\n\n    for char in text:\n        if char not in vowels:\n            result.append(char)\n\n    return ''.join(result)\n", "num_llm_calls": 10}
{"task_id": "HumanEval/52", "completion": "\ndef below_threshold(l: list, t: int) -> bool:\n    \"\"\"Return True if all numbers in the list l are below threshold t.\"\"\"\n    for num in l:\n        if num >= t:\n            return False\n    return True\n", "num_llm_calls": 6}
{"task_id": "HumanEval/53", "completion": "\ndef add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y\n", "num_llm_calls": 6}
{"task_id": "HumanEval/54", "completion": "\ndef same_chars(s0: str, s1: str) -> bool:\n    \"\"\"\n    Check if two words have the same characters.\n    \"\"\"\n\n    # Convert strings to sets and compare\n    return set(s0) == set(s1)\n", "num_llm_calls": 6}
{"task_id": "HumanEval/55", "completion": "\ndef fib(n: int) -> int:\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n\n    a, b = 0, 1\n    for _ in range(2, n + 1):\n        a, b = b, a + b\n\n    return b\n", "num_llm_calls": 6}
{"task_id": "HumanEval/56", "completion": "\ndef correct_bracketing(brackets: str) -> bool:\n    stack = []\n    \n    for bracket in brackets:\n        if bracket == '<':\n            stack.append(bracket)\n        elif bracket == '>' and stack:\n            stack.pop()\n        else:\n            return False\n    \n    return len(stack) == 0\n", "num_llm_calls": 10}
{"task_id": "HumanEval/57", "completion": "\ndef monotonic(l: list) -> bool:\n    \"\"\"Return True if list elements are monotonically increasing or decreasing.\n    \"\"\"\n    if not l:  # Check if the list is empty\n        return True\n\n    increasing = decreasing = True\n\n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            decreasing = False\n        elif l[i] < l[i - 1]:\n            increasing = False\n\n    return increasing or decreasing\n", "num_llm_calls": 8}
{"task_id": "HumanEval/58", "completion": "\n    # Convert both lists to sets to remove duplicates and then find the intersection\n    common_elements = list(set(l1) & set(l2))\n    \n    # Return the sorted list of common elements\n    return sorted(common_elements)\n", "num_llm_calls": 8}
{"task_id": "HumanEval/59", "completion": "\ndef largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    # Initialize the smallest prime factor\n    factor = 2\n    # Initialize the maximum prime factor\n    max_prime = -1\n\n    # Divide n by 2 to remove all even factors\n    while n % factor == 0:\n        max_prime = factor\n        n //= factor\n\n    # n must be odd at this point, so we can skip one element (Note i = i +2)\n    for factor in range(3, int(n**0.5) + 1, 2):\n        # While factor divides n, print it and divide n\n        while n % factor == 0:\n            max_prime = factor\n            n //= factor\n\n    # This condition is to handle the case when n is a prime number\n    # greater than 2\n    if n > 2:\n        max_prime = n\n\n    return max_prime\n", "num_llm_calls": 10}
{"task_id": "HumanEval/60", "completion": "\ndef sum_to_n(n: int) -> int:\n    \"\"\" Calculate the sum of numbers from 1 to n. \"\"\"\n    return n * (n + 1) // 2\n", "num_llm_calls": 6}
{"task_id": "HumanEval/61", "completion": "\ndef correct_bracketing(brackets: str) -> bool:\n    stack = []\n    \n    for bracket in brackets:\n        if bracket == '(':\n            stack.append(bracket)\n        elif bracket == ')':\n            if not stack:\n                return False\n            stack.pop()\n    \n    return len(stack) == 0\n", "num_llm_calls": 6}
{"task_id": "HumanEval/62", "completion": "\ndef derivative(xs: list) -> list:\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    \"\"\"\n    # The derivative of xs[i] * x^i is i * xs[i] * x^(i-1)\n    # So we start from the first non-constant term (index 1) and multiply each coefficient by its index\n    return [i * xs[i] for i in range(1, len(xs))]\n", "num_llm_calls": 10}
{"task_id": "HumanEval/63", "completion": "\ndef fibfib(n: int):\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n\n    # Initialize the base cases\n    a, b, c = 0, 0, 1\n\n    # Compute the n-th element iteratively\n    for _ in range(3, n + 1):\n        a, b, c = b, c, a + b + c\n\n    return c\n", "num_llm_calls": 10}
{"task_id": "HumanEval/64", "completion": "\ndef vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n    vowels = \"aeiou\"\n    count = 0\n    s = s.lower()\n\n    for char in s:\n        if char in vowels or (char == 'y' and s[-1] == char):\n            count += 1\n\n    return count\n\n# Test cases\nprint(vowels_count(\"abcde\"))  # Expected output: 2\nprint(vowels_count(\"ACEDY\"))  # Expected output: 3\nprint(vowels_count(\"rhythm\")) # Expected output: 0\nprint(vowles_count(\"quickly\"))# Expected output: 1\nprint(vowels_count(\"\"))       # Expected output: 0\n", "num_llm_calls": 10}
{"task_id": "HumanEval/65", "completion": "\ndef circular_shift(x, shift):\n    # Convert the integer to a string to easily manipulate its digits\n    x_str = str(x)\n    \n    # Calculate the number of digits in the integer\n    num_digits = len(x_str)\n    \n    # If shift is greater than the number of digits, reverse the string\n    if shift >= num_digits:\n        return x_str[::-1]\n    else:\n        # Perform the circular shift\n        shift %= num_digits  # Handle cases where shift is larger than num_digits\n        shifted_string = x_str[num_digits - shift:] + x_str[:num_digits - shift]\n        return shifted_string\n", "num_llm_calls": 10}
{"task_id": "HumanEval/66", "completion": "\ndef digitSum(s: str) -> int:\n    total = 0\n    for char in s:\n        if char.isupper():\n            total += ord(char)\n    return total\n", "num_llm_calls": 6}
{"task_id": "HumanEval/67", "completion": "\ndef fruit_distribution(s, n):\n    # Extract the number of apples and oranges from the string\n    for word in s.split():\n        if 'apples' in word:\n            apples = int(word.split('apples')[0].split()[-1])\n        elif 'oranges' in word:\n            oranges = int(word.split('oranges')[0].split()[-1])\n    \n    # Calculate the number of mangoes\n    mangoes = n - (apples + oranges)\n    return mangoes\n", "num_llm_calls": 10}
{"task_id": "HumanEval/68", "completion": "\ndef pluck(arr):\n    \"\"\"\n    Given an array representing a branch of a tree that has non-negative integer nodes,\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has the smallest index.\n\n    The plucked node should be returned in a list, [smallest_value, its index],\n    If there are no even values or the given array is empty, return [].\n    \"\"\"\n    smallest_even = float('inf')\n    index_of_smallest_even = -1\n\n    for i, val in enumerate(arr):\n        if val % 2 == 0 and val < smallest_even:\n            smallest_even = val\n            index_of_smallest_even = i\n\n    if index_of_smallest_even == -1:\n        return []\n    else:\n        return [smallest_even, index_of_smallest_even]\n", "num_llm_calls": 8}
{"task_id": "HumanEval/69", "completion": "\nfrom collections import Counter\n\ndef search(lst):\n    \"\"\"\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    \"\"\"\n    # Count the frequency of each element in the list\n    frequency = Counter(lst)\n    \n    # Filter the elements that have a frequency greater than or equal to their value\n    valid_elements = [num for num, freq in frequency.items() if num <= freq]\n    \n    # Return the maximum of the valid elements, or -1 if no such element exists\n    return max(valid_elements) if valid_elements else -1\n\n# Test cases\nprint(search([4, 1, 2, 2, 3, 1]))  # Output: 2\nprint(search([1, 2, 2, 3, 3, 3, 4, 4, 4]))  # Output: 3\nprint(search([5, 5, 4, 4, 4]))  # Output: -1\n", "num_llm_calls": 10}
{"task_id": "HumanEval/70", "completion": "\ndef strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    sorted_list = sorted(lst)\n    strange_sorted_list = []\n    while sorted_list:\n        # Append the minimum value\n        strange_sorted_list.append(sorted_list.pop(0))\n        # Append the maximum value\n        if sorted_list:\n            strange_sorted_list.append(sorted_list.pop())\n    return strange_sorted_list\n", "num_llm_calls": 6}
{"task_id": "HumanEval/71", "completion": "\ndef triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''\n    \n    # Check if the sides form a valid triangle\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1\n    \n    # Calculate the semi-perimeter\n    s = (a + b + c) / 2\n    \n    # Calculate the area using Heron's formula\n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    \n    # Round the area to 2 decimal points\n    return round(area, 2)\n", "num_llm_calls": 6}
{"task_id": "HumanEval/72", "completion": "\ndef will_it_fly(q, w):\n    # Check if the list is a palindrome\n    if q != q[::-1]:\n        return False\n    \n    # Calculate the sum of the elements in the list\n    total_weight = sum(q)\n    \n    # Check if the sum is less than or equal to the maximum possible weight\n    return total_weight <= w\n", "num_llm_calls": 10}
{"task_id": "HumanEval/73", "completion": "\ndef smallest_change(arr):\n    left, right = 0, len(arr) - 1\n    changes_needed = 0\n\n    while left < right:\n        if arr[left] != arr[right]:\n            changes_needed += 1\n        left += 1\n        right -= 1\n\n    return changes_needed\n", "num_llm_calls": 10}
{"task_id": "HumanEval/74", "completion": "\ndef total_match(lst1, lst2):\n    \"\"\"\n    Write a function that accepts two lists of strings and returns the list that has \n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n    \"\"\"\n    total_chars_1 = sum(len(s) for s in lst1)\n    total_chars_2 = sum(len(s) for s in lst2)\n\n    return lst1 if total_chars_1 <= total_chars_2 else lst2\n", "num_llm_calls": 8}
{"task_id": "HumanEval/75", "completion": "\ndef is_prime(n):\n    \"\"\"Check if a number is prime.\"\"\"\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100.\n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n    if a < 2:\n        return False\n\n    factors = []\n    # Check for 2's\n    while a % 2 == 0:\n        factors.append(2)\n        a = a // 2\n\n    # Check for other primes\n    i = 3\n    while i * i <= a:\n        while a % i == 0:\n            factors.append(i)\n            a = a // i\n        i += 2\n\n    # If a is a prime number greater than 2\n    if a > 2:\n        factors.append(a)\n\n    # Make sure there are exactly 3 prime factors\n    return len(set(factors)) == 3 and factors.count(factors[0]) == 3\n\n# Test cases\nprint(is_multiply_prime(30))  # True\nprint(is_multiply_prime(60))  # True (2*2*3*5, but 2 is repeated, so it's counted as three primes)\nprint(is_multiply_prime(10))  # False\nprint(is_multiply_prime(105)) # True (3*5*7)\nprint(is_multiply_prime(100)) # False\n", "num_llm_calls": 10}
{"task_id": "HumanEval/76", "completion": "\ndef is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    if n == 1:\n        return x == 1\n    power = 1\n    while power < x:\n        power *= n\n    return power == x\n", "num_llm_calls": 10}
{"task_id": "HumanEval/77", "completion": "\ndef iscube(a: int) -> bool:\n    '''\n    Write a function that takes an integer a and returns True \n    if this integer is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    '''\n    # Take the cube root of the absolute value of a\n    cube_root = abs(a) ** (1/3)\n    \n    # Round the cube root to the nearest integer\n    rounded_root = round(cube_root)\n    \n    # Check if the cube of the rounded root equals the absolute value of a\n    return abs(rounded_root ** 3 - abs(a)) == 0\n", "num_llm_calls": 6}
{"task_id": "HumanEval/78", "completion": "\ndef hex_key(num: str) -> int:\n    \"\"\" \n    Count the number of hexadecimal prime digits in the given string.\n    \"\"\"\n    \n    # Define the prime hexadecimal digits\n    prime_hex_digits = {'2', '3', '5', '7', 'B', 'D'}\n    \n    # Count the number of prime hexadecimal digits in the input string\n    return sum(1 for digit in num if digit in prime_hex_digits)\n", "num_llm_calls": 10}
{"task_id": "HumanEval/79", "completion": "\n\ndef decimal_to_binary(decimal):\n    \"\"\"You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)   # returns \"db100000db\"\n    \"\"\"\n\n    # Convert decimal to binary using bin() function, remove the '0b' prefix and add 'db' at the start and end\n    binary_str = f\"db{bin(decimal)[2:]}db\"\n    return binary_str\n\n# Test cases\nprint(decimal_to_binary(15))   # Expected output: \"db1111db\"\nprint(decimal_to_binary(32))   # Expected output: \"db100000db\"\n", "num_llm_calls": 8}
{"task_id": "HumanEval/80", "completion": "\ndef is_happy(s: str) -> bool:\n    # Check if the string length is less than 3\n    if len(s) < 3:\n        return False\n    \n    # Iterate through the string checking every 3 consecutive letters\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:\n            return False\n    \n    return True\n", "num_llm_calls": 6}
{"task_id": "HumanEval/81", "completion": "\ndef numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n    Example:\n    numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n\n    letter_grades = []\n    for gpa in grades:\n        if gpa >= 4.0:\n            letter_grades.append('A+')\n        elif gpa >= 3.7:\n            letter_grades.append('A')\n        elif gpa >= 3.3:\n            letter_grades.append('A-')\n        elif gpa >= 3.0:\n            letter_grades.append('B+')\n        elif gpa >= 2.7:\n            letter_grades.append('B')\n        elif gpa >= 2.3:\n            letter_grades.append('B-')\n        elif gpa >= 2.0:\n            letter_grades.append('C+')\n        elif gpa >= 1.7:\n            letter_grades.append('C')\n        elif gpa >= 1.3:\n            letter_grades.append('C-')\n        elif gpa >= 1.0:\n            letter_grades.append('D+')\n        elif gpa >= 0.7:\n            letter_grades.append('D')\n        elif gpa >= 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n\n    return letter_grades\n", "num_llm_calls": 10}
{"task_id": "HumanEval/82", "completion": "\ndef prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\"\n\n    # Helper function to check if a number is prime\n    def is_prime(n):\n        if n <= 1:\n            return False\n        if n <= 3:\n            return True\n        if n % 2 == 0 or n % 3 == 0:\n            return False\n        i = 5\n        while i * i <= n:\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n\n    # Get the length of the string\n    length = len(string)\n\n    # Check if the length is a prime number\n    return is_prime(length)\n", "num_llm_calls": 10}
{"task_id": "HumanEval/83", "completion": "\ndef starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    if n == 1:\n        return 1  # Only one 1-digit number (1) that starts and ends with 1\n\n    # Calculate the counts\n    starts_with_1 = 10 ** (n - 1)  # Numbers that start with 1\n    ends_with_1 = 10 ** (n - 1)    # Numbers that end with 1\n    both_with_1 = 10 ** (n - 2)    # Numbers that both start and end with 1\n\n    # Total count = start count + end count - both count (to avoid double-counting)\n    total_count = starts_with_1 + ends_with_1 - both_with_1\n\n    return total_count\n", "num_llm_calls": 10}
{"task_id": "HumanEval/84", "completion": "\ndef solve(N):\n    # Calculate the sum of the digits of N\n    digit_sum = sum(int(digit) for digit in str(N))\n    \n    # Convert the sum to binary and return it as a string\n    binary_sum = bin(digit_sum)[2:]\n    \n    return binary_sum\n", "num_llm_calls": 10}
{"task_id": "HumanEval/85", "completion": "\ndef add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices.\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n    result = 0\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 == 0:\n            result += lst[i]\n    return result\n", "num_llm_calls": 10}
{"task_id": "HumanEval/86", "completion": "\ndef anti_shuffle(s: str) -> str:\n    words = s.split(' ')\n    result = []\n\n    for word in words:\n        sorted_word = ''.join(sorted(word))\n        result.append(sorted_word)\n\n    return ' '.join(result)\n", "num_llm_calls": 10}
{"task_id": "HumanEval/87", "completion": "\ndef get_row(lst, x):\n    coordinates = []\n\n    for row_index, row in enumerate(lst):\n        for col_index, value in enumerate(row):\n            if value == x:\n                coordinates.append((row_index, col_index))\n\n    # Sort by row in ascending order\n    coordinates.sort(key=lambda coord: coord[0])\n\n    # For each row, sort the coordinates by column in descending order\n    for row_group in itertools.groupby(coordinates, lambda coord: coord[0]):\n        row_index, group = row_group\n        sorted_group = sorted(group, key=lambda coord: -coord[1])\n        coordinates = list(map(lambda coord: (row_index, coord[1]), sorted_group))\n\n    return coordinates\n", "num_llm_calls": 10}
{"task_id": "HumanEval/88", "completion": "\nfrom typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum of the first and last index values is odd,\n    or sort it in descending order if the sum of the first and last index values is even.\n\n    Note:\n    * don't change the given array.\n    \"\"\"\n    if not array:\n        return []\n\n    # Create a copy of the array to avoid modifying the original array\n    sorted_array = array[:]\n    \n    # Determine the sorting order based on the sum of the first and last elements\n    if (sorted_array[0] + sorted_array[-1]) % 2 == 0:\n        # Sort in descending order\n        sorted_array.sort(reverse=True)\n    else:\n        # Sort in ascending order\n        sorted_array.sort()\n\n    return sorted_array\n", "num_llm_calls": 10}
{"task_id": "HumanEval/89", "completion": "\ndef encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\"\n\n    # Define the alphabet\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    encrypted_string = ''\n\n    # Rotate the alphabet by 4 places (2*2)\n    rotated_alphabet = alphabet[4:] + alphabet[:4]\n\n    # Encrypt the string\n    for char in s:\n        # Check if the character is a letter\n        if char in alphabet:\n            # Find the index of the character in the original alphabet\n            index = alphabet.index(char.lower())\n            # Find the corresponding character in the rotated alphabet\n            new_char = rotated_alphabet[index]\n            # Preserve the original case\n            if char.isupper():\n                new_char = new_char.upper()\n            # Append the new character to the encrypted string\n            encrypted_string += new_char\n        else:\n            # Non-alphabetic characters are added unchanged\n            encrypted_string += char\n\n    return encrypted_string\n", "num_llm_calls": 10}
{"task_id": "HumanEval/90", "completion": "\ndef next_smallest(lst):\n    if len(lst) < 2:\n        return None\n\n    unique_elements = sorted(set(lst))\n    \n    if len(unique_elements) < 2:\n        return None\n    else:\n        return unique_elements[1]\n", "num_llm_calls": 10}
{"task_id": "HumanEval/91", "completion": "\ndef is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    # Split the input string into sentences based on '.', '?' or '!'\n    sentences = S.split('. ')\n    sentences += S.split('? ')\n    sentences += S.split('! ')\n\n    # Count the number of sentences that start with \"I\"\n    boredom_count = sum(1 for sentence in sentences if sentence.startswith('I'))\n\n    return boredom_count\n", "num_llm_calls": 10}
{"task_id": "HumanEval/92", "completion": "\ndef any_int(x, y, z):\n    '''\n    Check if any one of the three numbers is an integer and if it is equal to the sum of the other two.\n    '''\n    # Check if all numbers are integers\n    if not all(isinstance(i, int) for i in [x, y, z]):\n        return False\n    \n    # Check if any one of the numbers is equal to the sum of the other two\n    if x == y + z or y == x + z or z == x + y:\n        return True\n    else:\n        return False\n", "num_llm_calls": 8}
{"task_id": "HumanEval/93", "completion": "\ndef encode(message: str) -> str:\n    vowels = 'aeiou'\n    vowel_shift = {'a': 'c', 'e': 'g', 'i': 'k', 'o': 'q', 'u': 'w',\n                   'A': 'C', 'E': 'G', 'I': 'K', 'O': 'Q', 'U': 'W'}\n\n    encoded_message = []\n    for char in message:\n        if char in vowels:\n            new_char = vowel_shift[char]\n        else:\n            new_char = char.swapcase()\n        encoded_message.append(new_char)\n\n    return ''.join(encoded_message)\n", "num_llm_calls": 10}
{"task_id": "HumanEval/94", "completion": "\ndef is_prime(n: int) -> bool:\n    \"\"\"Check if a number is prime.\"\"\"\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef sum_of_digits(n: int) -> int:\n    \"\"\"Return the sum of digits of a number.\"\"\"\n    return sum(int(digit) for digit in str(n))\n\ndef skjkasdkd(lst):\n    \"\"\"You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,8,1,2,1,7] the output should be 7\n    \"\"\"\n    prime_numbers = filter(is_prime, lst)\n    largest_prime = max(prime_numbers, default=0)\n    return sum_of_digits(largest_prime)\n\n# Test cases\nprint(skjkasdkd([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]))  # Output: 10\nprint(skjkasdkd([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]))  # Output: 25\nprint(skjkasdkd([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]))  # Output: 13\nprint(skjkasdkd([0,724,32,71,99,32,6,0,5,91,83,0,5,6]))  # Output: 11\nprint(skjkasdkd([0,81,12,71,99,32,6,0,5,91,83,0,5,6]))  # Output: 11\nprint(skjkasdkd([0,8,1,2,1,7]))  # Output: 7\n", "num_llm_calls": 8}
{"task_id": "HumanEval/95", "completion": "\ndef check_dict_case(dict):\n    if not dict:\n        return False\n\n    lower = True\n    upper = True\n\n    for key in dict.keys():\n        if not isinstance(key, str):\n            return False\n        if key.islower():\n            upper = False\n        elif key.isupper():\n            lower = False\n        else:\n            return False\n\n    return lower or upper\n", "num_llm_calls": 6}
{"task_id": "HumanEval/96", "completion": "\nfrom typing import List\n\ndef count_up_to(n: int) -> List[int]:\n    \"\"\"Implement a function that takes a non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    \"\"\"\n    def is_prime(num: int) -> bool:\n        \"\"\"Check if a number is prime.\"\"\"\n        if num <= 1:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = []\n    for i in range(2, n):\n        if is_prime(i):\n            primes.append(i)\n        if len(primes) == n:\n            break\n\n    return primes\n", "num_llm_calls": 10}
{"task_id": "HumanEval/97", "completion": "\ndef multiply(a, b):\n    \"\"\"Complete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n    unit_digit_a = abs(a) % 10\n    unit_digit_b = abs(b) % 10\n    return unit_digit_a * unit_digit_b\n", "num_llm_calls": 10}
{"task_id": "HumanEval/98", "completion": "\ndef count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n    # Define the set of uppercase vowels\n    uppercase_vowels = {'A', 'E', 'I', 'O', 'U'}\n    \n    count = 0\n    # Iterate over the string, checking characters at even indices\n    for i in range(0, len(s), 2):\n        if s[i] in uppercase_vowels:\n            count += 1\n    \n    return count\n", "num_llm_calls": 10}
{"task_id": "HumanEval/99", "completion": "\ndef closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n    \n    Args:\n        value (str): A string representing a number.\n    \n    Returns:\n        int: The closest integer to the given value, rounded away from zero if needed.\n    \"\"\"\n    num = float(value)\n    integer_part = int(num)\n    decimal_part = num - integer_part\n    \n    if decimal_part == 0.5 or decimal_part == -0.5:\n        if num > 0:\n            return integer_part + 1\n        else:\n            return integer_part - 1\n    else:\n        return round(num)\n\n# Test cases\nprint(closest_integer(\"10\"))       # Expected output: 10\nprint(closest_integer(\"15.3\"))     # Expected output: 15\nprint(closest_integer(\"14.5\"))     # Expected output: 15\nprint(closest_integer(\"-14.5\"))    # Expected output: -15\nprint(closest_integer(\"-16.3\"))    # Expected output: -16\n", "num_llm_calls": 6}
{"task_id": "HumanEval/100", "completion": "\ndef make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    >>> make_a_pile(4)\n    [4, 6, 8, 10]\n    \"\"\"\n    pile = []\n    current_stones = n\n    for i in range(n):\n        pile.append(current_stones)\n        # Determine the next number of stones\n        if current_stones % 2 == 0:\n            current_stones += 2  # Next even number\n        else:\n            current_stones += 2  # Next odd number, same logic as even\n\n    return pile\n\n# Test cases\nprint(make_a_pile(3))  # Expected output: [3, 5, 7]\nprint(make_a_pile(4))  # Expected output: [4, 6, 8, 10]\n", "num_llm_calls": 8}
{"task_id": "HumanEval/101", "completion": "\ndef words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n    # Replace commas with spaces to have uniform separation\n    s = s.replace(',', ' ')\n    # Split the string by spaces\n    words = s.split()\n    return words\n", "num_llm_calls": 6}
{"task_id": "HumanEval/102", "completion": "\ndef choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    # Start from the upper bound and decrement until we find an even number or go below the lower bound\n    for num in range(y, x - 1, -1):\n        if num % 2 == 0:\n            return num\n    return -1\n", "num_llm_calls": 10}
{"task_id": "HumanEval/103", "completion": "\ndef rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    \n    total_sum = sum(range(n, m + 1))\n    count = m - n + 1\n    average = round(total_sum / count)\n    \n    return bin(average)\n\n", "num_llm_calls": 10}
{"task_id": "HumanEval/104", "completion": "\ndef unique_digits(x: List[int]) -> List[int]:\n    def has_even_digit(n: int) -> bool:\n        \"\"\"Check if a number has any even digit.\"\"\"\n        while n > 0:\n            digit = n % 10\n            if digit % 2 == 0:\n                return True\n            n //= 10\n        return False\n\n    result = [num for num in x if not has_even_digit(num)]\n    return sorted(result)\n", "num_llm_calls": 10}
{"task_id": "HumanEval/105", "completion": "\ndef by_length(arr):\n    # Filter out numbers not between 1 and 9\n    filtered_arr = [x for x in arr if 1 <= x <= 9 and x == int(x)]\n    \n    # Sort the filtered array\n    sorted_arr = sorted(filtered_arr)\n    \n    # Reverse the sorted array\n    reversed_arr = sorted_arr[::-1]\n    \n    # Map numbers to their corresponding names\n    name_map = {1: 'One', 2: 'Two', 3: 'Three', 4: 'Four', 5: 'Five', 6: 'Six', 7: 'Seven', 8: 'Eight', 9: 'Nine'}\n    name_arr = [name_map[x] for x in reversed_arr]\n    \n    return name_arr\n", "num_llm_calls": 10}
{"task_id": "HumanEval/106", "completion": "\n\ndef f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    def factorial(x):\n        \"\"\" Calculate the factorial of a number. \"\"\"\n        if x == 0 or x == 1:\n            return 1\n        else:\n            return x * factorial(x - 1)\n    \n    def sum_to_k(k):\n        \"\"\" Calculate the sum of numbers from 1 to k. \"\"\"\n        return k * (k + 1) // 2\n    \n    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum_to_k(i))\n    \n    return result\n\n# Test cases\nprint(f(5))  # Expected output: [1, 2, 6, 24, 15]\nprint(f(3))  # Expected output: [1, 2, 6]\n", "num_llm_calls": 10}
{"task_id": "HumanEval/107", "completion": "\ndef even_odd_palindrome(n):\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n\n    even_count, odd_count = 0, 0\n\n    for i in range(1, n + 1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n\n    return (even_count, odd_count)\n", "num_llm_calls": 10}
{"task_id": "HumanEval/108", "completion": "\ndef count_nums(arr):\n    def sum_of_digits(n):\n        \"\"\"Helper function to calculate the sum of digits of a number considering the sign of the first digit.\"\"\"\n        sum_digits = 0\n        is_negative = n < 0\n        while n:\n            digit = n % 10\n            sum_digits += digit if not is_negative else -digit\n            n //= 10\n            if is_negative and n == -digit:\n                break  # Exit early if we've processed the first negative digit\n        return sum_digits\n\n    count = 0\n    for num in arr:\n        if sum_of_digits(num) > 0:\n            count += 1\n\n    return count\n", "num_llm_calls": 10}
{"task_id": "HumanEval/109", "completion": "\ndef move_one_ball(arr):\n    \"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing \n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n    \n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index. \n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return True else return False.\n    If the given array is empty then return True.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3, 4, 5, 1, 2])==>True\n    move_one_ball([3, 5, 4, 1, 2])==>False\n    \"\"\"\n\n    n = len(arr)\n    if n == 0:\n        return True\n\n    # Count the number of places where the array is not sorted.\n    # If there is only one place where the array breaks the sorted order after the shift,\n    # then it can be sorted by one right shift.\n    count = 0\n    for i in range(n - 1):\n        if arr[i] > arr[i + 1]:\n            count += 1\n\n    # Check the last and first element relationship, if it breaks the sorted order, count it too.\n    if arr[-1] > arr[0]:\n        count += 1\n\n    return count <= 1\n", "num_llm_calls": 10}
{"task_id": "HumanEval/110", "completion": "\ndef exchange(lst1, lst2):\n    # Check if lst1 can be made all even numbers after any number of exchanges\n    for i in range(len(lst1)):\n        if lst1[i] % 2 != 0:  # If the number is odd\n            found = False\n            for j in range(len(lst2)):\n                if lst2[j] % 2 == 0:  # If the number is even\n                    lst1[i], lst2[j] = lst2[j], lst1[i]  # Exchange\n                    found = True\n                    break\n            if not found:\n                return \"NO\"  # Could not find an even number in lst2\n    return \"YES\"  # All numbers in lst1 are even after exchanges\n", "num_llm_calls": 10}
{"task_id": "HumanEval/111", "completion": "\nfrom collections import defaultdict\n\ndef histogram(test: str) -> dict:\n    # Split the input string into a list of characters\n    chars = test.split()\n    \n    # Use a dictionary to count occurrences of each character\n    char_count = defaultdict(int)\n    for char in chars:\n        char_count[char] += 1\n    \n    # Find the maximum occurrence count\n    max_count = max(char_count.values(), default=0)\n    \n    # Filter the dictionary to only include characters with the maximum occurrence count\n    result = {char: count for char, count in char_count.items() if count == max_count}\n    \n    return result\n", "num_llm_calls": 10}
{"task_id": "HumanEval/112", "completion": "\ndef reverse_delete(s, c):\n    # Remove characters from s that are present in c\n    result_string = ''.join(ch for ch in s if ch not in c)\n    \n    # Check if the result string is a palindrome\n    is_palindrome = result_string == result_string[::-1]\n    \n    # Return the result string and the palindrome check result\n    return (result_string, is_palindrome)\n", "num_llm_calls": 10}
{"task_id": "HumanEval/113", "completion": "\ndef odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\n    result = []\n    for index, string in enumerate(lst):\n        # Count the number of odd digits in the current string\n        odd_count = sum(1 for char in string if int(char) % 2 != 0)\n        # Replace all the 'i's in the template sentence with the actual counts and index\n        result.append(f\"the number of odd elements {odd_count}n the str{odd_count}ng {odd_count} of the {odd_count}nput.\")\n    return result\n", "num_llm_calls": 10}
{"task_id": "HumanEval/114", "completion": "\ndef minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n\n    if not nums:\n        return 0\n\n    min_sum = current_sum = nums[0]\n\n    for num in nums[1:]:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n\n    return min_sum\n", "num_llm_calls": 10}
{"task_id": "HumanEval/115", "completion": "\ndef max_fill(grid, capacity):\n    import math\n    \"\"\"\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it, \n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input: \n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input: \n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n    \n    Example 3:\n        Input: \n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n    \"\"\"\n\n    # Calculate the total amount of water in each well\n    total_water = [sum(row) for row in grid]\n\n    # Calculate the number of times the bucket needs to be lowered for each well\n    returns = [math.ceil(water / capacity) for water in total_water]\n\n    # Sum up all the returns to get the total number of times the bucket needs to be lowered\n    total_returns = sum(returns)\n\n    return total_returns\n", "num_llm_calls": 10}
{"task_id": "HumanEval/116", "completion": "\ndef sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) == [0, 1, 2, 3, 4]\n    \"\"\"\n\n    def count_ones(n):\n        return bin(n).count('1')\n\n    def sort_criteria(n):\n        return (count_ones(n), n)\n\n    arr = sorted(arr, key=sort_criteria)\n    return arr\n", "num_llm_calls": 10}
{"task_id": "HumanEval/117", "completion": "\ndef select_words(s, n):\n    def count_consonants(word):\n        consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n        return sum(1 for char in word if char in consonants)\n\n    words_with_n_consonants = []\n    for word in s.split():\n        if count_consonants(word) == n:\n            words_with_n_consonants.append(word)\n\n    return words_with_n_consonants\n", "num_llm_calls": 10}
{"task_id": "HumanEval/118", "completion": "\ndef get_closest_vowel(word):\n    vowels = \"aeiouAEIOU\"\n    word = word[::-1]  # Reverse the word to check from the right side\n    for i in range(1, len(word) - 1):\n        if word[i] in vowels and word[i - 1] not in vowels and word[i + 1] not in vowels:\n            return word[i]\n    return \"\"\n", "num_llm_calls": 10}
{"task_id": "HumanEval/119", "completion": "\ndef match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    \n    def is_balanced(s):\n        balance = 0\n        for char in s:\n            if char == '(':\n                balance += 1\n            else:\n                balance -= 1\n            if balance < 0:\n                return False\n        return balance == 0\n\n    str1, str2 = lst[0], lst[1]\n    \n    # Check if concatenation in both orders results in a balanced string\n    if is_balanced(str1 + str2) or is_balanced(str2 + str1):\n        return 'Yes'\n    else:\n        return 'No'\n", "num_llm_calls": 10}
{"task_id": "HumanEval/120", "completion": "\ndef maximum(arr, k):\n    # First, sort the array in descending order\n    sorted_arr = sorted(arr, reverse=True)\n    \n    # Return the first k elements from the sorted array\n    return sorted_arr[:k]\n", "num_llm_calls": 10}
{"task_id": "HumanEval/121", "completion": "\ndef solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==> 0\n    \"\"\"\n    # Initialize sum to 0\n    total_sum = 0\n    \n    # Iterate through the list, considering only even indices\n    for i in range(0, len(lst), 2):\n        # Check if the element at the current even index is odd\n        if lst[i] % 2 != 0:\n            # Add it to the total sum\n            total_sum += lst[i]\n    \n    # Return the final sum\n    return total_sum\n", "num_llm_calls": 10}
{"task_id": "HumanEval/122", "completion": "\ndef add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    sum_elements = 0\n    for i in range(k):\n        if 10 <= arr[i] < 100:  # Check if the number has at most two digits\n            sum_elements += arr[i]\n    return sum_elements\n", "num_llm_calls": 10}
{"task_id": "HumanEval/123", "completion": "\ndef get_odd_collatz(n):\n    def collatz_sequence(start):\n        sequence = []\n        while start != 1:\n            sequence.append(start)\n            if start % 2 == 0:\n                start = start // 2\n            else:\n                start = 3 * start + 1\n        sequence.append(1)  # The Collatz sequence always ends at 1\n        return sequence\n\n    sequence = collatz_sequence(n)\n    odd_numbers = [num for num in sequence if num % 2 != 0]\n    return sorted(odd_numbers)\n", "num_llm_calls": 10}
{"task_id": "HumanEval/124", "completion": "\ndef valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date string is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    # Split the date string into components\n    if len(date) != 10 or date[2] != '-' or date[5] != '-':\n        return False\n\n    month, day, year = date.split('-')\n\n    # Check if the date string is empty or month/year/day aren't in range\n    if not month or not day or not year:\n        return False\n\n    month = int(month)\n    day = int(day)\n    year = int(year)\n\n    # Validate month\n    if month < 1 or month > 12:\n        return False\n\n    # Validate day based on month\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day > 31:\n            return False\n    elif month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n    elif month == 2:\n        if day < 1 or day > 29:\n            return False\n\n    return True\n", "num_llm_calls": 10}
{"task_id": "HumanEval/125", "completion": "\ndef split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples:\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''\n\n    # Check for whitespace\n    if ' ' in txt:\n        return txt.split()\n    # Check for commas\n    elif ',' in txt:\n        return txt.split(',')\n    # Count odd ordered characters\n    else:\n        return sum(1 for char in txt if (ord(char) - ord('a')) % 2 == 1)\n", "num_llm_calls": 10}
{"task_id": "HumanEval/126", "completion": "\ndef is_sorted(lst):\n    '''\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n    '''\n\n    if len(lst) <= 1:\n        return True\n\n    previous_number = lst[0]\n    duplicates = 0\n\n    for i in range(1, len(lst)):\n        if lst[i] < previous_number:\n            return False\n        elif lst[i] == previous_number:\n            duplicates += 1\n            if duplicates > 1:\n                return False\n        else:\n            duplicates = 0\n\n        previous_number = lst[i]\n\n    return True\n", "num_llm_calls": 6}
{"task_id": "HumanEval/127", "completion": "\ndef is_prime(n):\n    \"\"\"Check if a number is prime.\"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef intersection(interval1, interval2):\n    \"\"\"Determine if the length of intersection of two intervals is a prime number.\"\"\"\n    start1, end1 = interval1\n    start2, end2 = interval2\n    start = max(start1, start2)\n    end = min(end1, end2)\n    if start > end:\n        return \"NO\"\n    length = end - start\n    if is_prime(length):\n        return \"YES\"\n    else:\n        return \"NO\"\n\n# Test cases\nprint(intersection((1, 2), (2, 3)))  # \"NO\"\nprint(intersection((-1, 1), (0, 4)))  # \"NO\"\nprint(intersection((-3, -1), (-5, 5)))  # \"YES\"\n", "num_llm_calls": 10}
{"task_id": "HumanEval/128", "completion": "\ndef prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\n    if not arr:\n        return None\n\n    sign_product = 1\n    magnitude_sum = 0\n\n    for num in arr:\n        if num == 0:\n            sign_product = 0\n            break\n        else:\n            sign_product *= 1 if num > 0 else -1\n            magnitude_sum += abs(num)\n\n    return sign_product * magnitude_sum\n", "num_llm_calls": 10}
{"task_id": "HumanEval/129", "completion": "\ndef find_neighbors(grid, i, j):\n    n = len(grid)\n    possible_neighbors = [(i-1, j), (i+1, j), (i, j-1), (i, j+1)]\n    neighbors = []\n    for x, y in possible_neighbors:\n        if 0 <= x < n and 0 <= y < n:\n            neighbors.append(grid[x][y])\n    return neighbors\n\ndef minPath(grid, k):\n    n = len(grid)\n    path = [grid[0][0]]  # Start from the top-left corner or any other valid cell\n    \n    while len(path) < k:\n        min_val = float('inf')\n        new_pos = None\n        for i in range(n):\n            for j in range(n):\n                if grid[i][j] in find_neighbors(grid, i, j) and (i, j) not in path:\n                    if grid[i][j] < min_val:\n                        min_val = grid[i][j]\n                        new_pos = (i, j)\n        if new_pos is None:\n            break\n        path.append(grid[new_pos[0]][new_pos[1]])\n    return path\n", "num_llm_calls": 10}
{"task_id": "HumanEval/130", "completion": "\ndef tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(3 - 2)\n           = 2 + 3 + tri(1) = 2 + 3 + 3 = 8 \n    \n    You are given a non-negative integer number n, you have to return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    \n    # Base case for the sequence\n    if n == 0:\n        return [3]\n    elif n == 1:\n        return [1, 3]\n    \n    # Initialize the base cases\n    sequence = [1, 3]\n    \n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            next_value = 1 + i / 2\n        else:\n            next_value = sequence[-1] + sequence[-2] + sequence[i - 2]\n        sequence.append(next_value)\n    \n    return sequence\n", "num_llm_calls": 10}
{"task_id": "HumanEval/131", "completion": "\ndef digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    product = 1\n    has_odd_digit = False\n    \n    while n > 0:\n        digit = n % 10\n        if digit % 2 != 0:\n            product *= digit\n            has_odd_digit = True\n        n //= 10\n    \n    return product if has_odd_digit else 0\n", "num_llm_calls": 8}
{"task_id": "HumanEval/132", "completion": "\ndef is_nested(string):\n    depth = 0\n    for char in string:\n        if char == '[':\n            depth += 1\n        elif char == ']':\n            depth -= 1\n            if depth > 0:\n                return True\n    return False\n", "num_llm_calls": 6}
{"task_id": "HumanEval/133", "completion": "\nimport math\n\ndef sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \"\"\"\n    def ceil_squared(num):\n        return math.ceil(num) ** 2\n    \n    return sum(ceil_squared(x) for x in lst)\n", "num_llm_calls": 10}
{"task_id": "HumanEval/134", "completion": "\ndef check_if_last_char_is_a_letter(txt):\n    # Check if the string is empty\n    if not txt:\n        return False\n    \n    # Get the last character and the second last character\n    last_char = txt[-1]\n    second_last_char = txt[-2] if len(txt) > 1 else None\n    \n    # Check if the last character is an alphabet and is not part of a word\n    if last_char.isalpha():\n        if second_last_char == ' ' or second_last_char is None:\n            return True\n        else:\n            return False\n    else:\n        return False\n", "num_llm_calls": 6}
{"task_id": "HumanEval/135", "completion": "\ndef can_arrange(arr):\n    \"\"\"Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5]) = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\n    \n    # Iterate the array from the second last element to the first\n    for i in range(len(arr) - 2, -1, -1):\n        # Check if the current element is less than the previous element\n        if arr[i] > arr[i + 1]:\n            # Return the current index\n            return i\n    # If no such element is found, return -1\n    return -1\n", "num_llm_calls": 10}
{"task_id": "HumanEval/136", "completion": "\ndef largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n    negative_integers = [x for x in lst if x < 0]\n    positive_integers = [x for x in lst if x > 0]\n\n    largest_negative = max(negative_integers) if negative_integers else None\n    smallest_positive = min(positive_integers) if positive_integers else None\n\n    return (largest_negative, smallest_positive)\n", "num_llm_calls": 10}
{"task_id": "HumanEval/137", "completion": "\ndef compare_one(a, b):\n    # Convert strings to unify the decimal separator\n    if isinstance(a, str):\n        a = a.replace(',', '.')\n    if isinstance(b, str):\n        b = b.replace(',', '.')\n\n    # Convert inputs to floats for comparison\n    a_float = float(a) if isinstance(a, (int, float)) else None\n    b_float = float(b) if isinstance(b, (int, float)) else None\n\n    # Compare the float values or return None if equal\n    if a_float > b_float:\n        return a\n    elif b_float > a_float:\n        return b\n    else:\n        return None\n", "num_llm_calls": 10}
{"task_id": "HumanEval/138", "completion": "\ndef is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\"\"\"\n\n    # The smallest sum of 4 positive even numbers is 2 + 2 + 2 + 2 = 8.\n    if n < 8 or n % 2 != 0:\n        return False\n\n    return True\n", "num_llm_calls": 6}
{"task_id": "HumanEval/139", "completion": "\ndef special_factorial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n    if n == 1:\n        return 1\n    brazilian_fact = 1\n    for i in range(1, n + 1):\n        brazilian_fact *= factorial(i)\n    return brazilian_fact\n\nfrom math import factorial\n", "num_llm_calls": 10}
{"task_id": "HumanEval/140", "completion": "\ndef fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\"\n    result = []\n    space_count = 0\n\n    for char in text:\n        if char == ' ':\n            space_count += 1\n            if space_count == 1:\n                result.append('_')\n        else:\n            space_count = 0\n            result.append(char)\n            if space_count >= 3:\n                result.pop()  # Remove the last underscore\n                result.append('-')\n\n    return ''.join(result)\n", "num_llm_calls": 10}
{"task_id": "HumanEval/141", "completion": "\nimport re\n\ndef file_name_check(file_name: str) -> str:\n    # Regular expression to match the valid file name conditions\n    pattern = r'^[a-zA-Z][a-zA-Z0-9]{0,2}\\.[txt|exe|dll]{3}$'\n    \n    # Check if the file name matches the pattern\n    if re.match(pattern, file_name):\n        return 'Yes'\n    else:\n        return 'No'\n\n# Test cases\nprint(file_name_check(\"example.txt\"))    # => 'Yes'\nprint(file_name_check(\"1example.dll\"))   # => 'No' (the name should start with a latin alphapet letter)\nprint(file_name_check(\"doc2.txt\"))       # => 'Yes'\nprint(file_name_check(\"2doc.txt\"))       # => 'No' (no more than 3 digits)\nprint(file_name_check(\".txt\"))           # => 'No' (empty substring before the dot)\nprint(file_name_check(\"exampleadx.txt\")) # => 'No' (substring after the dot length exceeds 3)\n", "num_llm_calls": 10}
{"task_id": "HumanEval/142", "completion": "\ndef sum_squares(lst):\n    \"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \"\"\"\n    # Initialize the sum\n    total_sum = 0\n    \n    # Iterate over the list with index\n    for idx, num in enumerate(lst):\n        if idx % 3 == 0 and idx != 0:  # Check if index is a multiple of 3\n            total_sum += num ** 2\n        elif idx % 4 == 0 and idx % 3 != 0:  # Check if index is a multiple of 4 and not 3\n            total_sum += num ** 3\n        else:\n            total_sum += num  # Add the number as it is\n    \n    return total_sum\n", "num_llm_calls": 10}
{"task_id": "HumanEval/143", "completion": "\ndef is_prime(n):\n    \"\"\"Check if a number is prime.\"\"\"\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef words_in_sentence(sentence):\n    \"\"\"\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n    \"\"\"\n    words = sentence.split()\n    prime_length_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_length_words)\n", "num_llm_calls": 10}
{"task_id": "HumanEval/144", "completion": "\ndef simplify(x, n):\n    # Split the fractions into numerator and denominator\n    x_num, x_den = map(int, x.split('/'))\n    n_num, n_den = map(int, n.split('/'))\n    \n    # Multiply numerators together and denominators together\n    result_num = x_num * n_num\n    result_den = x_den * n_den\n    \n    # Check if the result is a whole number by seeing if the denominator divides the numerator evenly\n    return result_num % result_den == 0\n\n", "num_llm_calls": 10}
{"task_id": "HumanEval/145", "completion": "\ndef order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # Helper function to calculate the sum of digits of an integer\n    def sum_of_digits(n):\n        return sum(int(digit) for digit in str(abs(n)))\n\n    # Create a list of tuples (sum_of_digits, original_index, number)\n    nums_with_info = [(sum_of_digits(num), i, num) for i, num in enumerate(nums)]\n\n    # Sort the list of tuples first by sum_of_digits, then by original index\n    sorted_nums = sorted(nums_with_info, key=lambda x: (x[0], x[1]))\n\n    # Extract the numbers from the sorted list of tuples\n    sorted_nums_only = [num for _, _, num in sorted_nums]\n\n    return sorted_nums_only\n", "num_llm_calls": 10}
{"task_id": "HumanEval/146", "completion": "\ndef specialFilter(nums):\n    \"\"\"Filter and count numbers greater than 10 with odd first and last digits.\"\"\"\n    \n    def is_odd_digit(n):\n        \"\"\"Check if a digit is odd.\"\"\"\n        return n % 2 != 0\n    \n    def first_and_last_odd(n):\n        \"\"\"Check if the first and last digits of a number are odd.\"\"\"\n        str_n = str(abs(n))\n        first_digit = int(str_n[0])\n        last_digit = int(str_n[-1])\n        return is_odd_digit(first_digit) and is_odd_digit(last_digit)\n    \n    count = 0\n    for num in nums:\n        if num > 10 and first_and_last_odd(num):\n            count += 1\n            \n    return count\n", "num_llm_calls": 10}
{"task_id": "HumanEval/147", "completion": "\ndef get_max_triples(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\n    # Generate the array a\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    \n    count = 0\n    # Iterate through all possible triples (i, j, k)\n    for i in range(n - 2):\n        for j in range(i + 1, n - 1):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    \n    return count\n", "num_llm_calls": 10}
{"task_id": "HumanEval/148", "completion": "\ndef bf(planet1, planet2):\n    \"\"\"\n    This function takes the names of two planets and returns a tuple of planets\n    located between them in the solar system.\n    \"\"\"\n    solar_system = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    \n    # Check if both planets are valid\n    if planet1 not in solar_system or planet2 not in solar_system:\n        return ()\n    \n    # Find the indices of the two planets\n    idx1 = solar_system.index(planet1)\n    idx2 = solar_system.index(planet2)\n    \n    # Ensure idx1 is less than idx2 for correct slicing\n    if idx1 > idx2:\n        idx1, idx2 = idx2, idx1\n    \n    # Return the tuple of planets between the two given planets\n    return tuple(solar_system[idx1 + 1:idx2])\n", "num_llm_calls": 10}
{"task_id": "HumanEval/149", "completion": "\ndef sorted_list_sum(lst):\n    # Filter out strings with odd lengths\n    even_length_strings = [s for s in lst if len(s) % 2 == 0]\n    \n    # Sort the list by length, then alphabetically\n    sorted_strings = sorted(even_length_strings, key=lambda x: (len(x), x))\n    \n    return sorted_strings\n", "num_llm_calls": 10}
{"task_id": "HumanEval/150", "completion": "\ndef x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n    \n    \"\"\"\n    def is_prime(num):\n        if num <= 1:\n            return False\n        if num == 2:\n            return True\n        if num % 2 == 0:\n            return False\n        for i in range(3, int(num**0.5) + 1, 2):\n            if num % i == 0:\n                return False\n        return True\n\n    if is_prime(n):\n        return x\n    else:\n        return y\n", "num_llm_calls": 6}
{"task_id": "HumanEval/151", "completion": "\ndef double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    \n    if not lst:\n        return 0\n\n    sum_of_squares = 0\n    for num in lst:\n        if isinstance(num, int) and num > 0 and num % 2 != 0:\n            sum_of_squares += num ** 2\n\n    return sum_of_squares\n", "num_llm_calls": 6}
{"task_id": "HumanEval/152", "completion": "\ndef compare(game, guess):\n    \"\"\"I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match. \n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n    \"\"\"\n    \n    # Check if the lengths of the input lists are equal\n    if len(game) != len(guess):\n        raise ValueError(\"Input lists must be of the same length\")\n    \n    # Initialize an empty list to store the differences\n    differences = []\n    \n    # Iterate through the elements of the lists\n    for i in range(len(game)):\n        # Calculate the absolute difference between game score and guess\n        diff = abs(game[i] - guess[i])\n        # Append the difference to the list\n        differences.append(diff)\n    \n    # Return the list of differences\n    return differences\n", "num_llm_calls": 6}
{"task_id": "HumanEval/153", "completion": "\ndef Strongest_Extension(class_name, extensions):\n    def calculate_strength(extension_name):\n        cap = sum(1 for char in extension_name if char.isupper())\n        sm = sum(1 for char in extension_name if char.islower())\n        return cap - sm\n\n    strongest_extension = max(extensions, key=calculate_strength)\n\n    return f\"{class_name}.{strongest_extension}\"\n", "num_llm_calls": 10}
{"task_id": "HumanEval/154", "completion": "\ndef cycpattern_check(a, b):\n    # Create a string that is the given word concatenated with itself\n    doubled_a = a + a\n    \n    # Check if the second word or any of its rotations is a substring in the doubled first word\n    for i in range(len(b)):\n        rotated_b = b[i:] + b[:i]\n        if rotated_b in doubled_a and rotated_b in a:\n            return True\n            \n    return False\n", "num_llm_calls": 6}
{"task_id": "HumanEval/155", "completion": "\ndef even_odd_count(num):\n    \"\"\"Given an integer, return a tuple that has the number of even and odd digits respectively.\n    \n    Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    # Convert the number to a string to easily iterate over each digit\n    num_str = str(abs(num))\n    \n    # Initialize counters for even and odd digits\n    even_count = 0\n    odd_count = 0\n    \n    # Iterate over each character in the string\n    for char in num_str:\n        # Convert character back to integer\n        digit = int(char)\n        \n        # Check if the digit is even or odd and increment the respective counter\n        if digit % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n            \n    return (even_count, odd_count)\n\n# Test cases\nprint(even_odd_count(-12))  # Output: (1, 1)\nprint(even_odd_count(123))  # Output: (1, 2)\n", "num_llm_calls": 10}
{"task_id": "HumanEval/156", "completion": "\ndef int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n    \"\"\"\n    # Roman numeral mapping\n    roman_numerals = [\n        (1000, 'm'), (900, 'cm'), (500, 'd'), (400, 'cd'),\n        (100, 'c'), (90, 'xc'), (50, 'l'), (40, 'xl'),\n        (10, 'x'), (9, 'ix'), (5, 'v'), (4, 'iv'), (1, 'i')\n    ]\n    \n    result = ''\n    \n    for value, numeral in roman_numerals:\n        while number >= value:\n            result += numeral\n            number -= value\n    \n    return result\n", "num_llm_calls": 6}
{"task_id": "HumanEval/157", "completion": "\ndef right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n\n    # First, sort the sides to ensure a^2 + b^2 = c^2 where c is the longest side\n    sides = sorted([a, b, c])\n\n    # Check if the sum of squares of the two shorter sides equals the square of the longest side\n    if sides[0]**2 + sides[1]**2 == sides[2]**2:\n        return True\n    else:\n        return False\n", "num_llm_calls": 10}
{"task_id": "HumanEval/158", "completion": "\ndef find_max(words):\n    max_unique_chars = 0\n    max_word = \"\"\n    \n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_unique_chars or (unique_chars == max_unique_chars and word < max_word):\n            max_unique_chars = unique_chars\n            max_word = word\n    \n    return max_word\n", "num_llm_calls": 10}
{"task_id": "HumanEval/159", "completion": "\ndef eat(number, need, remaining):\n    total_eaten = number + min(need, remaining)\n    carrots_left = max(remaining - need, 0)\n    return [total_eaten, carrots_left]\n", "num_llm_calls": 10}
{"task_id": "HumanEval/160", "completion": "\ndef do_algebra(operator: List[str], operand: List[int]) -> int:\n    result = operand[0]\n    \n    for i, op in enumerate(operator):\n        if op == '+':\n            result += operand[i + 1]\n        elif op == '-':\n            result -= operand[i + 1]\n        elif op == '*':\n            result *= operand[i + 1]\n        elif op == '//':\n            result //= operand[i + 1]\n        elif op == '**':\n            result **= operand[i + 1]\n    \n    return result\n", "num_llm_calls": 10}
{"task_id": "HumanEval/161", "completion": "\ndef solve(s):\n    # If the string contains no letters, reverse the string\n    if not any(c.isalpha() for c in s):\n        return s[::-1]\n    \n    # Process each character in the string\n    result = []\n    for c in s:\n        if c.isalpha():\n            # Reverse the case of the character\n            if c.islower():\n                result.append(c.upper())\n            else:\n                result.append(c.lower())\n        else:\n            # Keep non-letter characters as they are\n            result.append(c)\n    \n    # Join the list into a string and return it\n    return ''.join(result)\n", "num_llm_calls": 10}
{"task_id": "HumanEval/162", "completion": "\nimport hashlib\n\ndef string_to_md5(text: str) -> str or None:\n    \"\"\" Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n    \"\"\"\n    if text == \"\":\n        return None\n    \n    md5_hash = hashlib.md5(text.encode()).hexdigest()\n    return md5_hash\n", "num_llm_calls": 10}
{"task_id": "HumanEval/163", "completion": "\ndef generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\"\n\n    # Ensure a is less than b for the loop to work correctly\n    if a > b:\n        a, b = b, a\n\n    result = []\n    # Start from the next even number after a\n    start = a if a % 2 == 0 else a + 1\n\n    for num in range(start, b + 1, 2):\n        # Extract each digit from the number\n        for digit in str(num):\n            digit = int(digit)\n            # Check if the digit is even and not already in the result\n            if digit % 2 == 0 and digit not in result:\n                result.append(digit)\n\n    return result\n", "num_llm_calls": 10}
