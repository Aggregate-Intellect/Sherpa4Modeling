{"task_id": "HumanEval/0", "completion": "\nfrom typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n\n    # Sort the list first to bring close numbers next to each other\n    numbers.sort()\n\n    # Iterate through the sorted list and check the difference between consecutive elements\n    for i in range(len(numbers) - 1):\n        if numbers[i + 1] - numbers[i] < threshold:\n            return True\n\n    return False\n", "num_llm_calls": 2}
{"task_id": "HumanEval/1", "completion": "\nfrom typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string.replace(\" \", \"\"):\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n", "num_llm_calls": 8}
{"task_id": "HumanEval/2", "completion": "\ndef truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    integer_part = int(number)\n    decimal_part = number - integer_part\n    return decimal_part\n", "num_llm_calls": 10}
{"task_id": "HumanEval/3", "completion": "\n    balance = 0\n\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n\n    return False\n", "num_llm_calls": 8}
{"task_id": "HumanEval/4", "completion": "\nfrom typing import List\n\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n\n    # Calculate the mean of the numbers\n    mean_value = sum(numbers) / len(numbers)\n\n    # Calculate the sum of absolute differences from the mean\n    sum_absolute_differences = sum(abs(x - mean_value) for x in numbers)\n\n    # Calculate and return the mean absolute deviation\n    mad = sum_absolute_differences / len(numbers)\n    return mad\n", "num_llm_calls": 10}
{"task_id": "HumanEval/5", "completion": "\ndef intersperse(numbers: List[int], delimiter: int) -> List[int]:\n    if not numbers:\n        return []\n\n    result = [numbers[0]]\n    for num in numbers[1:]:\n        result.extend([delimiter, num])\n    \n    return result[:-1]  # Exclude the last leftover delimiter\n\n# Example usage:\n# intersperse([1, 2, 3], 4) should return [1, 4, 2, 4, 3]\n", "num_llm_calls": 2}
{"task_id": "HumanEval/6", "completion": "\nfrom typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n\nfrom typing import List, Tuple\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    result = []\n    current_depth = 0\n    max_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            max_depth = max(max_depth, current_depth)\n        elif c == ')':\n            current_depth -= 1\n\n    result.append(max_depth)\n    return result\n", "num_llm_calls": 10}
{"task_id": "HumanEval/7", "completion": "\nfrom typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n\n    result = []\n    for s in strings:\n        if substring in s:\n            result.append(s)\n    return result\n", "num_llm_calls": 6}
{"task_id": "HumanEval/8", "completion": "\nfrom typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n\n    # Initialize sum and product\n    total_sum = 0\n    total_product = 1\n\n    # Compute sum and product\n    for number in numbers:\n        total_sum += number\n        total_product *= number\n\n    return total_sum, total_product\n", "num_llm_calls": 10}
{"task_id": "HumanEval/9", "completion": "\n    rolling_max_list = []\n    if not numbers:\n        return rolling_max_list\n\n    current_max = numbers[0]\n    for num in numbers:\n        if num > current_max:\n            current_max = num\n        rolling_max_list.append(current_max)\n\n    return rolling_max_list\n", "num_llm_calls": 6}
{"task_id": "HumanEval/10", "completion": "\ndef is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return ''\n\n    # Find the longest palindromic postfix\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            # The prefix to be reversed and appended\n            prefix_to_reverse = string[:i]\n            reversed_prefix = prefix_to_reverse[::-1]\n            return string + reversed_prefix\n\n    # In case the entire string is a palindrome\n    return string + string[-2::-1]\n", "num_llm_calls": 10}
{"task_id": "HumanEval/11", "completion": "\ndef string_xor(a: str, b: str) -> str:\n    # Ensure both strings are of the same length\n    if len(a) != len(b):\n        raise ValueError(\"Input strings must be of the same length\")\n\n    # Initialize an empty string to store the result\n    result = \"\"\n\n    # Perform XOR operation character by character\n    for i in range(len(a)):\n        # XOR the characters and append to the result string\n        if a[i] == b[i]:\n            result += '0'\n        else:\n            result += '1'\n\n    return result\n", "num_llm_calls": 2}
{"task_id": "HumanEval/12", "completion": "\n    if not strings:\n        return None\n\n    longest_string = strings[0]\n\n    for string in strings:\n        if len(string) > len(longest_string):\n            longest_string = string\n\n    return longest_string\n", "num_llm_calls": 2}
{"task_id": "HumanEval/13", "completion": "\ndef greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    while b != 0:\n        a, b = b, a % b\n    return a\n", "num_llm_calls": 2}
{"task_id": "HumanEval/14", "completion": "\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = []\n    for i in range(len(string)):\n        prefixes.append(string[:i+1])\n    return prefixes\n", "num_llm_calls": 2}
{"task_id": "HumanEval/15", "completion": "\ndef string_sequence(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return ' '.join(str(i) for i in range(n + 1))\n", "num_llm_calls": 2}
{"task_id": "HumanEval/16", "completion": "\ndef count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    # Convert the string to lowercase to ignore case and then use a set to store unique characters\n    unique_chars = set(string.lower())\n    # Return the count of unique characters\n    return len(unique_chars)\n\n", "num_llm_calls": 2}
{"task_id": "HumanEval/17", "completion": "\nfrom typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    note last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n\n    result = []\n    notes = music_string.split()\n\n    for note in notes:\n        if note == 'o':\n            result.append(4)\n        elif note == 'o|':\n            result.append(2)\n        elif note == '.|':\n            result.append(1)\n\n    return result\n", "num_llm_calls": 10}
{"task_id": "HumanEval/18", "completion": "\n    count = 0\n    start = 0\n\n    while start < len(string):\n        pos = string.find(substring, start)\n        if pos != -1:\n            count += 1\n            start = pos + 1\n        else:\n            break\n\n    return count\n", "num_llm_calls": 6}
{"task_id": "HumanEval/19", "completion": "\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\n    # Dictionary to map word representations to their numerical values\n    number_map = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    \n    # Split the input string into individual number words\n    number_words = numbers.split()\n    \n    # Convert number words to their numerical values, sort them, and convert back to words\n    sorted_numbers = sorted(number_words, key=lambda x: number_map[x])\n    \n    # Join the sorted number words back into a single string\n    return ' '.join(sorted_numbers)\n", "num_llm_calls": 4}
{"task_id": "HumanEval/20", "completion": "\n    if not numbers:\n        raise ValueError(\"List must contain at least two elements.\")\n\n    numbers.sort()\n    closest_diff = float('inf')\n    closest_pair = ()\n\n    for i in range(len(numbers) - 1):\n        diff = numbers[i + 1] - numbers[i]\n        if diff < closest_diff:\n            closest_diff = diff\n            closest_pair = (numbers[i], numbers[i + 1])\n\n    return closest_pair\n", "num_llm_calls": 10}
{"task_id": "HumanEval/21", "completion": "\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    \"\"\"\n\n    min_val = min(numbers)\n    max_val = max(numbers)\n\n    # Avoid division by zero in case all elements are the same\n    if min_val == max_val:\n        return [0.0] * len(numbers)\n\n    range_val = max_val - min_val\n\n    return [(num - min_val) / range_val for num in numbers]\n", "num_llm_calls": 6}
{"task_id": "HumanEval/22", "completion": "\ndef filter_integers(values: List[Any]) -> List[int]:\n    filtered_integers = []\n    for value in values:\n        if isinstance(value, int):\n            filtered_integers.append(value)\n    return filtered_integers\n", "num_llm_calls": 6}
{"task_id": "HumanEval/23", "completion": "\ndef strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n    return len(string)\n", "num_llm_calls": 2}
{"task_id": "HumanEval/24", "completion": "\ndef largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n    for i in range(n - 1, 0, -1):\n        if n % i == 0:\n            return i\n\n    return 1  # In case n is 1, the largest divisor is 1\n", "num_llm_calls": 2}
{"task_id": "HumanEval/25", "completion": "\ndef factorize(n: int) -> List[int]:\n    factors = []\n    # Check for number of 2s that divide n\n    while n % 2 == 0:\n        factors.append(2)\n        n = n // 2\n\n    # n must be odd at this point, so a skip of 2 (i = i + 2) can be used\n    for i in range(3, int(n**0.5) + 1, 2):\n        # While i divides n, append i and divide n\n        while n % i == 0:\n            factors.append(i)\n            n = n // i\n\n    # Condition if n is a prime number greater than 2\n    if n > 2:\n        factors.append(n)\n\n    return factors\n", "num_llm_calls": 2}
{"task_id": "HumanEval/26", "completion": "\nfrom typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    # Track the count of each number\n    count_map = {}\n    result = []\n    \n    # First pass to count occurrences\n    for number in numbers:\n        count_map[number] = count_map.get(number, 0) + 1\n\n    # Second pass to add numbers that occur only once\n    for number in numbers:\n        if count_map[number] == 1:\n            result.append(number)\n    \n    return result\n", "num_llm_calls": 2}
{"task_id": "HumanEval/27", "completion": "\ndef flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n    result = []\n    for char in string:\n        if char.islower():\n            result.append(char.upper())\n        elif char.isupper():\n            result.append(char.lower())\n        else:\n            result.append(char)\n    return ''.join(result)\n", "num_llm_calls": 4}
{"task_id": "HumanEval/28", "completion": "\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    result = \"\"\n    for string in strings:\n        result += string\n    return result\n", "num_llm_calls": 2}
{"task_id": "HumanEval/29", "completion": "\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    filtered_strings = []\n    for s in strings:\n        if s.startswith(prefix):\n            filtered_strings.append(s)\n    return filtered_strings\n", "num_llm_calls": 6}
{"task_id": "HumanEval/30", "completion": "\ndef get_positive(l: list) -> list:\n    \"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return [num for num in l if num > 0]\n", "num_llm_calls": 4}
{"task_id": "HumanEval/31", "completion": "\ndef is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n\n    if n <= 1:\n        return False\n\n    if n <= 3:\n        return True\n\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n\n    return True\n", "num_llm_calls": 2}
{"task_id": "HumanEval/32", "completion": "\nimport math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n    # Ensure the list has an even number of coefficients\n    if len(xs) % 2 != 0:\n        raise ValueError(\"The list of coefficients must have an even number of elements.\")\n\n    # Find the largest non-zero coefficient\n    largest_coeff = max([abs(coeff) for coeff in xs if coeff != 0])\n\n    # Use Newton's method to find the root\n    x = 0.0\n    tolerance = 1e-10\n    prev_x = 0.0\n\n    while abs(x - prev_x) > tolerance:\n        prev_x = x\n        x -= poly(xs, x) / sum([coeff * i * math.pow(x, i-1) for i, coeff in enumerate(xs) if i > 0])\n\n    return round(x, 2)\n", "num_llm_calls": 10}
{"task_id": "HumanEval/33", "completion": "\ndef sort_third(l: list) -> list:\n    # Extract elements at indices divisible by 3\n    elements_to_sort = [l[i] for i in range(len(l)) if i % 3 == 0]\n    # Sort the extracted elements\n    sorted_elements = sorted(elements_to_sort)\n    # Place the sorted elements back into their original positions\n    for i, val in enumerate(l):\n        if i % 3 == 0:\n            l[i] = sorted_elements[i // 3]\n    return l\n", "num_llm_calls": 2}
{"task_id": "HumanEval/34", "completion": "\ndef unique(l: list) -> list:\n    \"\"\"\n    Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    unique_elements = set(l)\n    sorted_unique_elements = sorted(unique_elements)\n    return sorted_unique_elements\n", "num_llm_calls": 2}
{"task_id": "HumanEval/35", "completion": "\ndef max_element(l: list) -> int:\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    if not l:  # Check if the list is empty\n        return None  # Return None or raise an error if the list is empty\n    \n    max_val = l[0]  # Assume the first element is the maximum\n    \n    for num in l[1:]:  # Start iterating from the second element\n        if num > max_val:\n            max_val = num\n    \n    return max_val\n", "num_llm_calls": 2}
{"task_id": "HumanEval/36", "completion": "\ndef fizz_buzz(n: int) -> int:\n    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n", "num_llm_calls": 8}
{"task_id": "HumanEval/37", "completion": "\n    # Extract the elements at the even indices\n    even_indices = [l[i] for i in range(0, len(l), 2)]\n    \n    # Sort the extracted elements\n    even_indices.sort()\n    \n    # Create a new list with the sorted even index elements\n    sorted_list = []\n    even_index_iter = iter(even_indices)\n    for i in range(len(l)):\n        if i % 2 == 0:\n            sorted_list.append(next(even_index_iter))\n        else:\n            sorted_list.append(l[i])\n    \n    return sorted_list\n", "num_llm_calls": 4}
{"task_id": "HumanEval/38", "completion": "\ndef decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # Split the string into groups of 3 characters.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # Cycle elements in each group in reverse. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n", "num_llm_calls": 6}
{"task_id": "HumanEval/39", "completion": "\nfrom sympy import isprime\n\ndef prime_fib(n: int) -> int:\n    def generate_fib():\n        a, b = 0, 1\n        while True:\n            a, b = b, a + b\n            yield a\n\n    count = 0\n    for fib_num in generate_fib():\n        if isprime(fib_num):\n            count += 1\n            if count == n:\n                return fib_num\n\nprime_fib(1)  # 2\nprime_fib(2)  # 3\nprime_fib(3)  # 5\nprime_fib(4)  # 13\nprime_fib(5)  # 89\n", "num_llm_calls": 2}
{"task_id": "HumanEval/40", "completion": "\ndef triples_sum_to_zero(l: list) -> bool:\n    \"\"\"\n    Check if there are three distinct elements in the list that sum to zero.\n    \"\"\"\n\n    # Edge case: if list has less than 3 elements, it's impossible to have a triple\n    if len(l) < 3:\n        return False\n\n    # Sort the list to make it easier to avoid duplicates and use two-pointer technique\n    l.sort()\n\n    for i in range(len(l) - 2):\n        # Skip the same element to avoid processing the same triplet\n        if i > 0 and l[i] == l[i - 1]:\n            continue\n\n        left, right = i + 1, len(l) - 1\n        while left < right:\n            current_sum = l[i] + l[left] + l[right]\n            if current_sum == 0:\n                return True\n            elif current_sum < 0:\n                left += 1\n            else:\n                right -= 1\n\n    return False\n", "num_llm_calls": 2}
{"task_id": "HumanEval/41", "completion": "\ndef car_race_collision(n: int) -> int:\n    \"\"\"\n    Since each car moving left to right will eventually collide with each car moving\n    right to left, the total number of collisions is simply the product of the number\n    of cars moving in each direction.\n    \"\"\"\n\n    # Each car from one direction will collide with each car from the opposite direction.\n    return n * n\n", "num_llm_calls": 4}
{"task_id": "HumanEval/42", "completion": "\ndef incr_list(l: list) -> list:\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n    return [x + 1 for x in l]\n", "num_llm_calls": 2}
{"task_id": "HumanEval/43", "completion": "\ndef pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    \"\"\"\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False\n", "num_llm_calls": 2}
{"task_id": "HumanEval/44", "completion": "\ndef change_base(x: int, base: int) -> str:\n    if base < 2 or base >= 10:\n        raise ValueError(\"Base must be between 2 and 9.\")\n    \n    if x == 0:\n        return '0'\n    \n    digits = []\n    while x > 0:\n        digits.append(str(x % base))\n        x = x // base\n    \n    # The digits are in reverse order\n    return ''.join(digits[::-1])\n", "num_llm_calls": 10}
{"task_id": "HumanEval/45", "completion": "\ndef triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    return 0.5 * a * h\n", "num_llm_calls": 2}
{"task_id": "HumanEval/46", "completion": "\nfrom typing import List\n\n\ndef fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci sequence that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    \"\"\"\n    if n == 0 or n == 1:\n        return 0\n    if n == 2:\n        return 2\n    if n == 3:\n        return 0\n\n    # Initialize the base cases\n    fib_values = [0, 0, 2, 0]\n    \n    # Compute the sequence iteratively\n    for i in range(4, n + 1):\n        next_value = sum(fib_values)\n        fib_values = [fib_values[1], fib_values[2], fib_values[3], next_value]\n    \n    return fib_values[3]\n", "num_llm_calls": 10}
{"task_id": "HumanEval/47", "completion": "\ndef median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    sorted_list = sorted(l)\n    n = len(sorted_list)\n    mid = n // 2\n\n    if n % 2 == 0:\n        return (sorted_list[mid - 1] + sorted_list[mid]) / 2\n    else:\n        return sorted_list[mid]\n", "num_llm_calls": 10}
{"task_id": "HumanEval/48", "completion": "\ndef is_palindrome(text: str) -> bool:\n    # Remove non-alphanumeric characters and convert to lowercase for accurate comparison\n    cleaned_text = ''.join(char.lower() for char in text if char.isalnum())\n    \n    # Check if the cleaned text is equal to its reverse\n    return cleaned_text == cleaned_text[::-1]\n", "num_llm_calls": 2}
{"task_id": "HumanEval/49", "completion": "\ndef modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    result = 1\n    base = 2\n\n    while n > 0:\n        if n % 2 == 1:\n            result = (result * base) % p\n        base = (base * base) % p\n        n = n // 2\n\n    return result\n", "num_llm_calls": 10}
{"task_id": "HumanEval/50", "completion": "\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n", "num_llm_calls": 6}
{"task_id": "HumanEval/51", "completion": "\ndef remove_vowels(text: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    result = \"\"\n\n    for char in text:\n        if char not in vowels:\n            result += char\n\n    return result\n", "num_llm_calls": 2}
{"task_id": "HumanEval/52", "completion": "\ndef below_threshold(l: list, t: int) -> bool:\n    \"\"\"Return True if all numbers in the list l are below threshold t.\"\"\"\n    for number in l:\n        if number >= t:\n            return False\n    return True\n", "num_llm_calls": 2}
{"task_id": "HumanEval/53", "completion": "\ndef add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y\n", "num_llm_calls": 2}
{"task_id": "HumanEval/54", "completion": "\ndef same_chars(s0: str, s1: str) -> bool:\n    \"\"\"\n    Check if two words have the same characters.\n    \"\"\"\n    # Convert both strings to sets of characters and compare them\n    return set(s0) == set(s1)\n", "num_llm_calls": 2}
{"task_id": "HumanEval/55", "completion": "\ndef fib(n: int) -> int:\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n\n    a, b = 0, 1\n    for _ in range(2, n + 1):\n        a, b = b, a + b\n\n    return b\n", "num_llm_calls": 2}
{"task_id": "HumanEval/56", "completion": "\n    stack = []\n\n    for bracket in brackets:\n        if bracket == '<':\n            stack.append(bracket)\n        elif bracket == '>':\n            if not stack:\n                return False\n            stack.pop()\n\n    return len(stack) == 0\n", "num_llm_calls": 8}
{"task_id": "HumanEval/57", "completion": "\ndef monotonic(l: list) -> bool:\n    if not l:\n        return True\n\n    increasing = None\n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            if increasing is False:\n                return False\n            increasing = True\n        elif l[i] < l[i - 1]:\n            if increasing is True:\n                return False\n            increasing = False\n\n    return True\n", "num_llm_calls": 4}
{"task_id": "HumanEval/58", "completion": "\ndef common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    # Convert both lists to sets to remove duplicates and then find intersection\n    common_elements = set(l1) & set(l2)\n    \n    # Return the sorted list of common elements\n    return sorted(list(common_elements))\n", "num_llm_calls": 2}
{"task_id": "HumanEval/59", "completion": "\ndef largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    # Initialize the smallest prime factor\n    factor = 2\n    # Initialize the maximum prime factor\n    max_prime = -1\n\n    # Divide n by 2 to remove all even factors\n    while n % factor == 0:\n        max_prime = factor\n        n //= factor\n\n    # Start checking for odd factors from 3 onwards\n    factor = 3\n    while factor * factor <= n:\n        while n % factor == 0:\n            max_prime = factor\n            n //= factor\n        factor += 2\n\n    # If n is a prime number greater than 2\n    if n > 2:\n        max_prime = n\n\n    return max_prime\n", "num_llm_calls": 2}
{"task_id": "HumanEval/60", "completion": "\ndef sum_to_n(n: int) -> int:\n    \"\"\"\n    sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\n    # Using the formula for the sum of the first n natural numbers: n * (n + 1) / 2\n    return n * (n + 1) // 2\n", "num_llm_calls": 2}
{"task_id": "HumanEval/61", "completion": "\n    stack = []\n\n    for bracket in brackets:\n        if bracket == '(':\n            stack.append(bracket)\n        elif bracket == ')':\n            if not stack:\n                return False\n            stack.pop()\n\n    return len(stack) == 0\n", "num_llm_calls": 2}
{"task_id": "HumanEval/62", "completion": "\ndef derivative(xs: list) -> list:\n    # The derivative of a polynomial term xs[n] * x^n is n * xs[n] * x^(n-1)\n    return [n * xs[n] for n in range(1, len(xs))]\n", "num_llm_calls": 4}
{"task_id": "HumanEval/63", "completion": "\ndef fibfib(n: int):\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n    \"\"\"\n\n    # Base cases\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n\n    # Initialize the base values\n    a, b, c = 0, 0, 1\n\n    # Compute fibfib(n) iteratively\n    for _ in range(3, n + 1):\n        a, b, c = b, c, a + b + c\n\n    return c\n", "num_llm_calls": 4}
{"task_id": "HumanEval/64", "completion": "\ndef vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n    vowels = set(\"aeiouAEIOU\")\n    count = 0\n    \n    for char in s:\n        if char in vowels:\n            count += 1\n        elif char == 'y' or char == 'Y':\n            if s[-1] == char:\n                count += 1\n    \n    return count\n", "num_llm_calls": 10}
{"task_id": "HumanEval/65", "completion": "\ndef circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n    \"12\"\n    \"\"\"\n    # Convert the integer to a string to easily manipulate digits\n    str_x = str(x)\n    num_digits = len(str_x)\n    \n    # If shift is greater than the number of digits, reverse the string\n    if shift > num_digits:\n        return str_x[::-1]\n    \n    # Perform the circular shift\n    shift %= num_digits  # In case shift is larger than num_digits\n    shifted_str = str_x[-shift:] + str_x[:-shift]\n    \n    return shifted_str\n", "num_llm_calls": 10}
{"task_id": "HumanEval/66", "completion": "\ndef digitSum(s: str) -> int:\n    \"\"\"\n    Calculate the sum of the ASCII codes of the uppercase characters in the input string.\n    \"\"\"\n    return sum(ord(c) for c in s if c.isupper())\n", "num_llm_calls": 2}
{"task_id": "HumanEval/67", "completion": "\ndef fruit_distribution(s, n):\n    # Split the string to separate the numbers and extract the counts of apples and oranges\n    fruits = s.split()\n    apples = int(fruits[1].replace('apples', ''))\n    oranges = int(fruits[3].replace('oranges', ''))\n\n    # Calculate the number of mangoes by subtracting the number of apples and oranges from the total\n    mangoes = n - (apples + oranges)\n    return mangoes\n", "num_llm_calls": 10}
{"task_id": "HumanEval/68", "completion": "\ndef pluck(arr):\n    min_even_value = float('inf')\n    min_index = -1\n\n    for index, value in enumerate(arr):\n        if value % 2 == 0 and value <= min_even_value:\n            if value == min_even_value:\n                min_index = min(min_index, index)\n            else:\n                min_even_value = value\n                min_index = index\n\n    if min_index == -1:\n        return []\n    else:\n        return [min_even_value, min_index]\n", "num_llm_calls": 2}
{"task_id": "HumanEval/69", "completion": "\nfrom collections import Counter\n\ndef search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n\n    # Count the frequency of each element in the list\n    freq_counter = Counter(lst)\n    \n    # Filter elements that have a frequency greater than or equal to their value\n    valid_elements = [num for num, freq in freq_counter.items() if freq >= num]\n    \n    # Return the maximum of the valid elements if any, otherwise return -1\n    return max(valid_elements) if valid_elements else -1\n", "num_llm_calls": 10}
{"task_id": "HumanEval/70", "completion": "\ndef strange_sort_list(lst):\n    \"\"\"\n    Given a list of integers, return the list in a strange order: start with the minimum value,\n    then the maximum of the remaining integers, then the minimum of the remaining integers, and so on.\n    \"\"\"\n    sorted_lst = sorted(lst)\n    strange_sorted_lst = []\n    while sorted_lst:\n        # Append the minimum value\n        strange_sorted_lst.append(sorted_lst.pop(0))\n        if sorted_lst:\n            # Append the maximum value\n            strange_sorted_lst.append(sorted_lst.pop(-1))\n    \n    return strange_sorted_lst\n\n# Test cases\nprint(strange_sort_list([1, 2, 3, 4]))  # Output: [1, 4, 2, 3]\nprint(strange_sort_list([5, 5, 5, 5]))  # Output: [5, 5, 5, 5]\nprint(strange_sort_list([]))            # Output: []\n", "num_llm_calls": 2}
{"task_id": "HumanEval/71", "completion": "\ndef triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1.\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''\n\n    # Check if the sides form a valid triangle\n    if (a + b <= c) or (a + c <= b) or (b + c <= a):\n        return -1\n\n    # Calculate semi-perimeter\n    s = (a + b + c) / 2\n\n    # Calculate the area using Heron's formula\n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n\n    # Round the area to 2 decimal points\n    return round(area, 2)\n\n", "num_llm_calls": 2}
{"task_id": "HumanEval/72", "completion": "\ndef will_it_fly(q, w):\n    # Check if the list is a palindrome\n    if q != q[::-1]:\n        return False\n    \n    # Calculate the sum of the elements\n    total_weight = sum(q)\n    \n    # Check if the sum is less than or equal to the maximum possible weight\n    return total_weight <= w\n", "num_llm_calls": 6}
{"task_id": "HumanEval/73", "completion": "\ndef smallest_change(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n    n = len(arr)\n    changes = 0\n\n    for i in range(n // 2):\n        if arr[i] != arr[n - i - 1]:\n            changes += 1\n\n    return changes\n", "num_llm_calls": 4}
{"task_id": "HumanEval/74", "completion": "\ndef total_match(lst1, lst2):\n    '''\n    Write a function that accepts two lists of strings and returns the list that has \n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    total_match([], []) \u279e []\n    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n    '''\n\n    def count_chars(lst):\n        return sum(len(s) for s in lst)\n\n    count1 = count_chars(lst1)\n    count2 = count_chars(lst2)\n\n    if count1 <= count2:\n        return lst1\n    else:\n        return lst2\n", "num_llm_calls": 2}
{"task_id": "HumanEval/75", "completion": "\ndef is_prime(n):\n    \"\"\"Check if a number is prime.\"\"\"\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n    if a < 2:\n        return False\n\n    factors = []\n    # Check for number of 2s\n    while a % 2 == 0:\n        factors.append(2)\n        a //= 2\n\n    # Check for other primes\n    i = 3\n    while i * i <= a:\n        while a % i == 0:\n            factors.append(i)\n            a //= i\n        i += 2\n\n    if a > 2:\n        factors.append(a)\n\n    # Check if there are exactly 3 unique prime factors\n    unique_factors = set(factors)\n    return len(unique_factors) == 3 and all(is_prime(f) for f in unique_factors)\n\n# Test cases\nprint(is_multiply_prime(30))  # True\nprint(is_multiply_prime(60))  # True (2*3*5)\nprint(is_multiply_prime(100)) # False (2*2*5*5)\nprint(is_multiply_prime(2))   # False (only one prime factor)\n", "num_llm_calls": 10}
{"task_id": "HumanEval/76", "completion": "\ndef is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n\n    if n == 1:\n        return x == 1\n\n    power = 1\n    while power < x:\n        power *= n\n\n    return power == x\n", "num_llm_calls": 10}
{"task_id": "HumanEval/77", "completion": "\ndef iscube(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this integer is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    '''\n    if a < 0:\n        a = -a  # Taking the absolute value to handle negative inputs\n    \n    x = round(a ** (1/3))  # Finding the cube root and rounding it to the nearest integer\n    \n    return x ** 3 == a  # Checking if the cube of the rounded value is equal to the original number\n", "num_llm_calls": 6}
{"task_id": "HumanEval/78", "completion": "\ndef hex_key(num: str) -> int:\n    # Define the prime hexadecimal digits\n    prime_hex_digits = {'2', '3', '5', '7', 'B', 'D'}\n    \n    # Count the number of prime hexadecimal digits in the input string\n    count = sum(1 for digit in num if digit in prime_hex_digits)\n    \n    return count\n", "num_llm_calls": 2}
{"task_id": "HumanEval/79", "completion": "\ndef decimal_to_binary(decimal):\n    \"\"\"You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)   # returns \"db100000db\"\n    \"\"\"\n\n    # Convert the decimal number to binary\n    binary_string = bin(decimal)[2:]\n\n    # Add 'db' prefix and suffix\n    return f\"db{binary_string}db\"\n", "num_llm_calls": 4}
{"task_id": "HumanEval/80", "completion": "\ndef is_happy(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n    if len(s) < 3:\n        return False\n\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n\n    return True\n", "num_llm_calls": 6}
{"task_id": "HumanEval/81", "completion": "\ndef numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \"\"\"\n\n    def determine_grade(gpa):\n        if gpa >= 4.0:\n            return 'A+'\n        elif gpa > 3.7:\n            return 'A'\n        elif gpa > 3.3:\n            return 'A-'\n        elif gpa > 3.0:\n            return 'B+'\n        elif gpa > 2.7:\n            return 'B'\n        elif gpa > 2.3:\n            return 'B-'\n        elif gpa > 2.0:\n            return 'C+'\n        elif gpa > 1.7:\n            return 'C'\n        elif gpa > 1.3:\n            return 'C-'\n        elif gpa > 1.0:\n            return 'D+'\n        elif gpa > 0.7:\n            return 'D'\n        elif gpa > 0.0:\n            return 'D-'\n        else:\n            return 'E'\n\n    return [determine_grade(gpa) for gpa in grades]\n", "num_llm_calls": 10}
{"task_id": "HumanEval/82", "completion": "\ndef is_prime(n):\n    \"\"\"Helper function to check if a number is prime.\"\"\"\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef prime_length(string: str) -> bool:\n    \"\"\"Check if the length of the string is a prime number.\"\"\"\n    return is_prime(len(string))\n\n", "num_llm_calls": 8}
{"task_id": "HumanEval/83", "completion": "\ndef starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    if n == 1:\n        # If n is 1, every number that starts or ends with 1 is valid (just '1')\n        return 1\n    \n    # For n-digit numbers, there are 10^(n-1) total numbers.\n    # We count numbers that start with 1 and those that end with 1, but subtract\n    # the overlap (numbers that both start and end with 1) to avoid double counting.\n    \n    # Numbers starting with 1: 10^(n-1)\n    start_with_1 = 10 ** (n - 1)\n    \n    # Numbers ending with 1: 10^(n-1) (but the first digit can't be 0, it's already counted in 'start_with_1')\n    end_with_1 = 10 ** (n - 1)\n    \n    # Numbers that both start and end with 1: 10^(n-2) (the middle n-2 digits can be anything)\n    both_start_and_end_with_1 = 10 ** (n - 2)\n    \n    # Total count\n    total = start_with_1 + end_with_1 - both_start_and_end_with_1\n    \n    return total\n", "num_llm_calls": 10}
{"task_id": "HumanEval/84", "completion": "\ndef solve(N):\n    # Calculate the sum of the digits of N\n    digit_sum = sum(int(digit) for digit in str(N))\n    \n    # Convert the sum to binary and return it as a string\n    return bin(digit_sum)[2:]\n\n# Example usage:\nprint(solve(1000))  # Output: \"1\"\nprint(solve(150))   # Output: \"110\"\nprint(solve(147))   # Output: \"1100\"\n", "num_llm_calls": 10}
{"task_id": "HumanEval/85", "completion": "\ndef add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n    result = 0\n    # Start from index 1 (second element) and increment by 2 to get odd indices\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 == 0:\n            result += lst[i]\n    return result\n", "num_llm_calls": 10}
{"task_id": "HumanEval/86", "completion": "\ndef anti_shuffle(s):\n    \"\"\"\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi') returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\n    def sort_word(word):\n        return ''.join(sorted(word))\n\n    result = []\n    word = []\n\n    for c in s:\n        if c == ' ':\n            if word:\n                result.append(sort_word(word))\n                word = []\n            result.append(c)\n        else:\n            word.append(c)\n    if word:\n        result.append(sort_word(word))\n\n    return ''.join(result)\n", "num_llm_calls": 2}
{"task_id": "HumanEval/87", "completion": "\ndef get_row(lst, x):\n    coordinates = []\n\n    for row_idx, row in enumerate(lst):\n        for col_idx, value in enumerate(row):\n            if value == x:\n                coordinates.append((row_idx, col_idx))\n\n    # Sort by row in ascending order, and then by column in descending order within the same row\n    coordinates.sort(key=lambda coord: (coord[0], -coord[1]))\n\n    return coordinates\n", "num_llm_calls": 2}
{"task_id": "HumanEval/88", "completion": "\ndef sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    if not array:\n        return []\n\n    # Determine the sorting order based on the sum of the first and last elements\n    sort_asc = (array[0] + array[-1]) % 2 == 1\n    sorted_array = sorted(array, reverse=not sort_asc)\n\n    return sorted_array\n", "num_llm_calls": 4}
{"task_id": "HumanEval/89", "completion": "\n\ndef encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\"\n    \n    # Define the alphabet\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    # Calculate the shift amount (2 * 2 = 4)\n    shift_amount = 4\n    # Create the encrypted alphabet\n    encrypted_alphabet = alphabet[shift_amount:] + alphabet[:shift_amount]\n    \n    # Create a translation dictionary\n    translation_dict = str.maketrans(alphabet, encrypted_alphabet)\n    \n    # Translate the input string\n    encrypted_string = s.translate(translation_dict)\n    \n    return encrypted_string\n\n", "num_llm_calls": 10}
{"task_id": "HumanEval/90", "completion": "\n\ndef next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    if len(lst) < 2:\n        return None\n\n    unique_sorted_lst = sorted(set(lst))\n    return unique_sorted_lst[1] if len(unique_sorted_lst) > 1 else None\n\n", "num_llm_calls": 4}
{"task_id": "HumanEval/91", "completion": "\ndef is_bored(S: str) -> int:\n    # Split the input string into sentences based on '.', '?' or '!'\n    sentences = S.replace('.', '. ').replace('?', '? ').replace('!', '! ').split()\n    # Count the number of sentences that start with \"I\"\n    return sum(sentence.strip().startswith('I ') for sentence in sentences)\n\n# Test cases\nprint(is_bored(\"Hello world\"))  # Output: 0\nprint(is_bored(\"The sky is blue. The sun is shining. I love this weather\"))  # Output: 1\n", "num_llm_calls": 10}
{"task_id": "HumanEval/92", "completion": "\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n    '''\n\n    # Check if all numbers are integers\n    if not (isinstance(x, int) and isinstance(y, int) and isinstance(z, int)):\n        return False\n\n    # Check if any number is the sum of the other two\n    if x == y + z or y == x + z or z == x + y:\n        return True\n    else:\n        return False\n\n", "num_llm_calls": 2}
{"task_id": "HumanEval/93", "completion": "\ndef encode(message: str) -> str:\n    vowels = 'aeiou'\n    vowel_shift = {'a': 'c', 'e': 'g', 'i': 'k', 'o': 'q', 'u': 'w',\n                   'A': 'C', 'E': 'G', 'I': 'K', 'O': 'Q', 'U': 'W'}\n    \n    encoded_message = []\n    for char in message:\n        if char in vowels:\n            encoded_message.append(vowel_shift[char])\n        else:\n            encoded_message.append(char.swapcase())\n    \n    return ''.join(encoded_message)\n", "num_llm_calls": 10}
{"task_id": "HumanEval/94", "completion": "\ndef skjkasdkd(lst):\n    \"\"\"You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n    \"\"\"\n    \n    def is_prime(n):\n        \"\"\"Check if a number is prime.\"\"\"\n        if n <= 1:\n            return False\n        if n <= 3:\n            return True\n        if n % 2 == 0 or n % 3 == 0:\n            return False\n        i = 5\n        while i * i <= n:\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n\n    max_prime = -1\n    for num in lst:\n        if is_prime(num):\n            max_prime = max(max_prime, num)\n\n    if max_prime == -1:\n        return 0\n\n    sum_of_digits = sum(int(digit) for digit in str(max_prime))\n    return sum_of_digits\n", "num_llm_calls": 4}
{"task_id": "HumanEval/95", "completion": "\ndef check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n\n    if not dict:\n        return False\n\n    lower_case = set()\n    upper_case = set()\n\n    for key in dict.keys():\n        if not isinstance(key, str):\n            return False\n        if key.islower():\n            lower_case.add(key)\n        elif key.isupper():\n            upper_case.add(key)\n        else:\n            return False\n\n    return len(lower_case) == len(dict) or len(upper_case) == len(dict)\n", "num_llm_calls": 2}
{"task_id": "HumanEval/96", "completion": "\ndef is_prime(num):\n    \"\"\"Check if a number is a prime number.\"\"\"\n    if num <= 1:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef count_up_to(n):\n    \"\"\"Implement a function that takes a non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\"\"\"\n    primes = []\n    for i in range(2, n):\n        if is_prime(i):\n            primes.append(i)\n        if len(primes) == n:\n            break\n    return primes\n", "num_llm_calls": 4}
{"task_id": "HumanEval/97", "completion": "\n\ndef multiply(a, b):\n    \"\"\"Complete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14, -15) should return 20.\n    \"\"\"\n    # Extract the unit digit of each number\n    unit_digit_a = abs(a) % 10\n    unit_digit_b = abs(b) % 10\n\n    # Return the product of the unit digits\n    return unit_digit_a * unit_digit_b\n\n", "num_llm_calls": 4}
{"task_id": "HumanEval/98", "completion": "\ndef count_upper(s: str) -> int:\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n    # List of uppercase vowels\n    uppercase_vowels = 'AEIOU'\n    count = 0\n\n    # Iterate over even indices\n    for i in range(0, len(s), 2):\n        if s[i] in uppercase_vowels:\n            count += 1\n\n    return count\n", "num_llm_calls": 10}
{"task_id": "HumanEval/99", "completion": "\ndef closest_integer(value: str) -> int:\n    number = float(value)\n    integer\u90e8\u5206 = int(number)\n    decimal\u90e8\u5206 = number - integer\u90e8\u5206\n\n    if decimal\u90e8\u5206 < 0.5:\n        if number < 0:\n            return integer\u90e8\u5206 - 1\n        else:\n            return integer\u90e8\u5206\n    else:\n        if number > 0:\n            return integer\u90e8\u5206 + 1\n        else:\n            return integer\u90e8\u5206 - 1\n", "num_llm_calls": 6}
{"task_id": "HumanEval/100", "completion": "\ndef make_a_pile(n):\n    pile = []\n    current_stone_count = n\n\n    for i in range(n):\n        pile.append(current_stone_count)\n        # Determine the next odd or even number\n        if current_stone_count % 2 == 0:\n            current_stone_count += 2  # Next even number\n        else:\n            current_stone_count += 2  # Next odd number\n\n    return pile\n\n# Example usage:\nprint(make_a_pile(3))  # Output: [3, 5, 7]\nprint(make_a_pile(4))  # Output: [4, 6, 8, 10]\n", "num_llm_calls": 6}
{"task_id": "HumanEval/101", "completion": "\ndef words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n    # Replace commas with spaces to\u7edf\u4e00\u5904\u7406\u7a7a\u683c\u548c\u9017\u53f7\n    cleaned_string = s.replace(',', ' ')\n    # Split the string into words based on one or more spaces\n    words = cleaned_string.split()\n    return words\n", "num_llm_calls": 2}
{"task_id": "HumanEval/102", "completion": "\ndef choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    # Ensure x is the smaller number and y is the larger number\n    if x > y:\n        return -1\n\n    # Start from the end of the range and move backwards to find the largest even number\n    for num in range(y, x - 1, -1):\n        if num % 2 == 0:\n            return num\n\n    # If no even number is found, return -1\n    return -1\n", "num_llm_calls": 6}
{"task_id": "HumanEval/103", "completion": "\ndef rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    \n    total = sum(range(n, m + 1))\n    count = m - n + 1\n    average = round(total / count)\n    return bin(average)\n\n# Test cases\nprint(rounded_avg(1, 5))  # => \"0b11\"\nprint(rounded_avg(7, 5))  # => -1\nprint(rounded_avg(10, 20)) # => \"0b1111\"\nprint(rounded_avg(20, 33)) # => \"0b11010\"\n", "num_llm_calls": 10}
{"task_id": "HumanEval/104", "completion": "\ndef unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n\n    def has_no_even_digits(n):\n        \"\"\"Check if a number has no even digits.\"\"\"\n        while n > 0:\n            digit = n % 10\n            if digit % 2 == 0:\n                return False\n            n //= 10\n        return True\n\n    # Filter numbers with no even digits and sort the result\n    result = [num for num in x if has_no_even_digits(num)]\n    return sorted(result)\n", "num_llm_calls": 6}
{"task_id": "HumanEval/105", "completion": "\ndef by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n    \n    # Filter and sort the numbers between 1 and 9\n    filtered_sorted_arr = sorted([num for num in arr if 1 <= num <= 9])\n    \n    # Reverse the array\n    reversed_arr = filtered_sorted_arr[::-1]\n    \n    # Map the numbers to their corresponding names\n    mapping = {1: 'One', 2: 'Two', 3: 'Three', 4: 'Four', 5: 'Five', 6: 'Six', 7: 'Seven', 8: 'Eight', 9: 'Nine'}\n    result = [mapping[num] for num in reversed_arr]\n    \n    return result\n", "num_llm_calls": 2}
{"task_id": "HumanEval/106", "completion": "\ndef f(n):\n    def factorial(x):\n        \"\"\" Helper function to compute the factorial of x. \"\"\"\n        result = 1\n        for i in range(1, x + 1):\n            result *= i\n        return result\n\n    result_list = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            # i is even, add factorial of i\n            result_list.append(factorial(i))\n        else:\n            # i is odd, add sum of numbers from 1 to i\n            result_list.append(sum(range(1, i + 1)))\n    return result_list\n", "num_llm_calls": 2}
{"task_id": "HumanEval/107", "completion": "\ndef even_odd_palindrome(n):\n    even_count = 0\n    odd_count = 0\n\n    for num in range(1, n + 1):\n        if str(num) == str(num)[::-1]:  # Check if the number is a palindrome\n            if num % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n\n    return (even_count, odd_count)\n", "num_llm_calls": 10}
{"task_id": "HumanEval/108", "completion": "\ndef count_nums(arr):\n    def sum_of_digits(n):\n        \"\"\"Helper function to calculate the sum of digits of a number,\n        taking into account the sign of the number.\"\"\"\n        digit_sum = 0\n        is_negative = n < 0\n        while n:\n            digit = n % 10\n            digit_sum += digit if not is_negative else -digit\n            n //= 10\n            if is_negative and digit == 9:  # Early exit for negative numbers\n                break\n        return digit_sum\n\n    count = 0\n    for num in arr:\n        if sum_of_digits(num) > 0:\n            count += 1\n\n    return count\n", "num_llm_calls": 10}
{"task_id": "HumanEval/109", "completion": "\ndef move_one_ball(arr):\n    if not arr:\n        return True\n    \n    # Count the number of places where a number is greater than the next one\n    shifts_needed = 0\n    for i in range(len(arr) - 1):\n        if arr[i] > arr[i + 1]:\n            shifts_needed += 1\n            \n    # Check if the last element is greater than the first element\n    if arr[-1] > arr[0]:\n        shifts_needed += 1\n\n    # It is possible to sort the array with one right shift if and only if we need exactly one shift\n    return shifts_needed == 1\n", "num_llm_calls": 2}
{"task_id": "HumanEval/110", "completion": "\ndef exchange(lst1, lst2):\n    \"\"\"In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n    \"\"\"\n    for i in range(len(lst1)):\n        if lst1[i] % 2 != 0:  # Find an odd number in lst1\n            found = False\n            for j in range(len(lst2)):\n                if lst2[j] % 2 == 0:  # Find an even number in lst2\n                    lst1[i], lst2[j] = lst2[j], lst1[i]  # Swap\n                    lst2[j] = None  # Mark as swapped\n                    found = True\n                    break\n            if not found:\n                return \"NO\"  # Could not find an even number to swap\n    return \"YES\"  # All elements in lst1 are now even\n", "num_llm_calls": 10}
{"task_id": "HumanEval/111", "completion": "\ndef histogram(test: str) -> dict:\n    if not test:\n        return {}\n    \n    # Split the input string into a list of characters\n    chars = test.split()\n    \n    # Initialize a dictionary to keep track of letter counts\n    counts = {}\n    \n    # Iterate over the list of characters and count occurrences\n    for char in chars:\n        if char in counts:\n            counts[char] += 1\n        else:\n            counts[char] = 1\n    \n    # Find the maximum count of any letter\n    max_count = max(counts.values(), default=0)\n    \n    # Filter the dictionary to only include letters with the maximum count\n    result = {letter: count for letter, count in counts.items() if count == max_count}\n    \n    return result\n", "num_llm_calls": 2}
{"task_id": "HumanEval/112", "completion": "\ndef reverse_delete(s: str, c: str) -> (str, bool):\n    # Remove characters from s that are in c\n    result = [char for char in s if char not in c]\n    result_string = ''.join(result)\n    \n    # Check if the result is a palindrome\n    is_palindrome = result_string == result_string[::-1]\n    \n    return (result_string, is_palindrome)\n", "num_llm_calls": 10}
{"task_id": "HumanEval/113", "completion": "\ndef odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\n    def count_odds(s):\n        return sum(1 for c in s if int(c) % 2 != 0)\n\n    result = []\n    for i, s in enumerate(lst):\n        odd_count = count_odds(s)\n        result.append(f\"the number of odd elements {odd_count}n the str{odd_count}ng {odd_count} of the {odd_count}nput.\")\n\n    return result\n", "num_llm_calls": 6}
{"task_id": "HumanEval/114", "completion": "\ndef minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if not nums:\n        return 0\n\n    min_sum = current_sum = nums[0]\n\n    for num in nums[1:]:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n\n    return min_sum\n", "num_llm_calls": 6}
{"task_id": "HumanEval/115", "completion": "\ndef max_fill(grid, capacity):\n    import math\n    \"\"\"\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it, \n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input: \n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input: \n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n    \n    Example 3:\n        Input: \n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n    \"\"\"\n\n    # Calculate the total number of units of water in each well\n    total_water_per_well = [sum(well) for well in grid]\n\n    # Calculate the total number of bucket lowers needed\n    total_lowers = sum(math.ceil(water / capacity) for water in total_water_per_well)\n\n    return total_lowers\n", "num_llm_calls": 10}
{"task_id": "HumanEval/116", "completion": "\ndef sort_array(arr):\n    def count_ones(n):\n        return bin(n).count('1')\n\n    def sort_custom(n1, n2):\n        ones_count1 = count_ones(n1)\n        ones_count2 = count_ones(n2)\n        \n        if ones_count1 == ones_count2:\n            return n1 - n2\n        else:\n            return ones_count1 - ones_count2\n\n    # Handle negative numbers first\n    negative_part = sorted([x for x in arr if x < 0], key=sort_custom)\n    positive_part = sorted([x for x in arr if x >= 0], key=sort_custom)\n\n    return negative_part + positive_part\n", "num_llm_calls": 10}
{"task_id": "HumanEval/117", "completion": "\ndef select_words(s, n):\n    consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    result = []\n    current_word = \"\"\n    consonant_count = 0\n\n    for char in s:\n        if char == \" \":\n            if consonant_count == n:\n                result.append(current_word)\n            consonant_count = 0\n            current_word = \"\"\n        else:\n            current_word += char\n            if char in consonants:\n                consonant_count += 1\n\n    # Check the last word in case there's no space at the end of the string\n    if consonant_count == n:\n        result.append(current_word)\n\n    return result\n", "num_llm_calls": 6}
{"task_id": "HumanEval/118", "completion": "\ndef get_closest_vowel(word):\n    vowels = \"aeiouAEIOU\"\n    word = word[::-1]  # Reverse the word to check from the right side\n    for i in range(1, len(word) - 1):  # Start from second to last character\n        if word[i] in vowels and word[i - 1] not in vowels and word[i + 1] not in vowels:\n            return word[i]\n    return \"\"\n", "num_llm_calls": 4}
{"task_id": "HumanEval/119", "completion": "\ndef match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n\n    def is_good_string(s):\n        balance = 0\n        for char in s:\n            if char == '(':\n                balance += 1\n            else:\n                balance -= 1\n            if balance < 0:\n                return False\n        return balance == 0\n\n    str1, str2 = lst[0], lst[1]\n    if is_good_string(str1) or is_good_string(str2) or (is_good_string(str1 + str2) or is_good_string(str2 + str1)):\n        return 'Yes'\n    else:\n        return 'No'\n", "num_llm_calls": 10}
{"task_id": "HumanEval/120", "completion": "\ndef maximum(arr, k):\n    # First, sort the array in descending order\n    arr.sort(reverse=True)\n    \n    # Return the first k elements from the sorted array\n    return arr[:k]\n", "num_llm_calls": 10}
{"task_id": "HumanEval/121", "completion": "\ndef solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    sum_of_odds = 0\n    for index, value in enumerate(lst):\n        if index % 2 == 0 and value % 2 != 0:\n            sum_of_odds += value\n\n    return sum_of_odds\n", "num_llm_calls": 10}
{"task_id": "HumanEval/122", "completion": "\ndef add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    total_sum = 0\n    for i in range(k):\n        if 0 <= arr[i] <= 99 or -99 <= arr[i] <= 0:\n            total_sum += arr[i]\n    return total_sum\n", "num_llm_calls": 6}
{"task_id": "HumanEval/123", "completion": "\ndef get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    \"\"\"\n\n    def collatz_sequence(start):\n        sequence = []\n        while start != 1:\n            sequence.append(start)\n            if start % 2 == 0:\n                start = start // 2\n            else:\n                start = 3 * start + 1\n        sequence.append(1)  # Adding 1 to the sequence\n        return sequence\n\n    sequence = collatz_sequence(n)\n    return sorted([num for num in sequence if num % 2 != 0])\n", "num_llm_calls": 10}
{"task_id": "HumanEval/124", "completion": "\ndef valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    \n    # Check if date is in correct format\n    valid_format = len(date) == 10 and date[2] == '-' and date[5] == '-'\n    if not valid_format:\n        return False\n\n    # Split the date into components\n    month, day, year = date.split('-')\n\n    # Check if month, day, and year are integers\n    if not (month.isdigit() and day.isdigit() and year.isdigit()):\n        return False\n\n    month, day, year = int(month), int(day), int(year)\n\n    # Check if month is valid\n    if month < 1 or month > 12:\n        return False\n\n    # Check if day is valid based on month\n    if month in {1, 3, 5, 7, 8, 10, 12}:\n        if day < 1 or day > 31:\n            return False\n    elif month in {4, 6, 9, 11}:\n        if day < 1 or day > 30:\n            return False\n    elif month == 2:\n        if day < 1 or day > 29:\n            return False\n\n    return True\n", "num_llm_calls": 10}
{"task_id": "HumanEval/125", "completion": "\ndef split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples:\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''\n\n    # Check for whitespace\n    if ' ' in txt:\n        return txt.split()\n    # Check for commas\n    elif ',' in txt:\n        return txt.split(',')\n    # Count odd order letters\n    else:\n        return sum(1 for c in txt if ord(c) % 2 == 1 and c.islower())\n", "num_llm_calls": 6}
{"task_id": "HumanEval/126", "completion": "\ndef is_sorted(lst):\n    '''\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n    '''\n\n    if len(lst) <= 1:\n        return True\n\n    previous_number = lst[0]\n    duplicates = 0\n\n    for i in range(1, len(lst)):\n        if lst[i] < previous_number:\n            return False\n        elif lst[i] == previous_number:\n            duplicates += 1\n            if duplicates > 1:\n                return False\n        else:\n            duplicates = 0\n\n        previous_number = lst[i]\n\n    return True\n", "num_llm_calls": 4}
{"task_id": "HumanEval/127", "completion": "\ndef intersection(interval1, interval2):\n    start_max = max(interval1[0], interval2[0])\n    end_min = min(interval1[1], interval2[1])\n    \n    if start_max > end_min:\n        return \"NO\"  # No intersection\n    \n    intersection_length = end_min - start_max + 1\n    \n    if is_prime(intersection_length):\n        return \"YES\"\n    else:\n        return \"NO\"\n\ndef is_prime(n):\n    \"\"\"Check if a number is prime.\"\"\"\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n", "num_llm_calls": 10}
{"task_id": "HumanEval/128", "completion": "\ndef prod_signs(arr):\n    if not arr:\n        return None\n\n    sign_product = 1\n    magnitude_sum = 0\n\n    for num in arr:\n        if num == 0:\n            sign_product = 0\n            break\n        elif num < 0:\n            sign_product *= -1\n        magnitude_sum += abs(num)\n\n    return sign_product * magnitude_sum\n", "num_llm_calls": 10}
{"task_id": "HumanEval/129", "completion": "\nfrom heapq import heappush, heappop\n\n\ndef minPath(grid, k):\n    # Initialize the priority queue with the starting point (any cell) and its value\n    pq = []\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            heappush(pq, (grid[i][j], i, j, 1, [grid[i][j]]))  # (val, row, col, length, path)\n\n    # Directions: up, down, left, right\n    directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]\n\n    while pq:\n        val, row, col, length, path = heappop(pq)\n        if length == k:\n            return path\n\n        for dr, dc in directions:\n            new_row, new_col = row + dr, col + dc\n            if 0 <= new_row < len(grid) and 0 <= new_col < len(grid[0]):\n                new_path = path + [grid[new_row][new_col]]\n                heappush(pq, (grid[new_row][new_col], new_row, new_col, length + 1, new_path))\n\n    return []  # This line should theoretically never be reached due to problem constraints\n\n\n# Examples\nprint(minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3))  # Output: [1, 2, 1]\nprint(minPath([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1))  # Output: [1]\n", "num_llm_calls": 10}
{"task_id": "HumanEval/130", "completion": "\ndef tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n\n    # Base cases\n    if n == 0:\n        return [3]\n    elif n == 1:\n        return [1, 3]\n\n    # Initialize the sequence with base cases\n    tribonacci = [1, 3]\n\n    # Calculate the sequence up to n\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            next_value = 1 + i / 2\n        else:\n            next_value = tribonacci[i - 1] + tribonacci[i - 2] + tribonacci[i + 1]\n        tribonacci.append(next_value)\n\n    return tribonacci\n", "num_llm_calls": 10}
{"task_id": "HumanEval/131", "completion": "\ndef digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    # Convert the number to a string to easily iterate over each digit\n    str_n = str(n)\n    \n    # Initialize the product variable\n    product = 1\n    \n    # Flag to check if there is at least one odd digit\n    has_odd_digit = False\n    \n    # Iterate over each character in the string representation of the number\n    for char in str_n:\n        digit = int(char)\n        \n        # Check if the digit is odd\n        if digit % 2 != 0:\n            has_odd_digit = True\n            product *= digit\n    \n    # If no odd digits were found, return 0\n    if not has_odd_digit:\n        return 0\n    \n    return product\n", "num_llm_calls": 4}
{"task_id": "HumanEval/132", "completion": "\ndef is_nested(string):\n    \"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    \"\"\"\n\n    stack = []\n    nested = False\n\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if stack:\n                stack.pop()\n                if stack:\n                    nested = True  # Check if there are any remaining elements in the stack\n            else:\n                return False  # Unbalanced brackets\n\n    return nested if nested else False\n", "num_llm_calls": 6}
{"task_id": "HumanEval/133", "completion": "\ndef sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \"\"\"\n    import math\n\n    def ceil_square(x):\n        return math.ceil(x) ** 2\n\n    return sum(ceil_square(x) for x in lst)\n", "num_llm_calls": 2}
{"task_id": "HumanEval/134", "completion": "\ndef check_if_last_char_is_a_letter(txt):\n    \"\"\"\n    Check if the last character of a given string is an alphabetical character\n    and is not part of a word, and return True if so, and False otherwise.\n    \"\"\"\n\n    # Strip the string to remove trailing spaces\n    txt = txt.strip()\n\n    # If the string is empty after stripping, return False\n    if not txt:\n        return False\n\n    # Get the last character of the string\n    last_char = txt[-1]\n\n    # Check if the last character is not a space and is an alphabetical character\n    return last_char.isalpha()\n", "num_llm_calls": 10}
{"task_id": "HumanEval/135", "completion": "\ndef can_arrange(arr):\n    \"\"\"Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5]) = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\n    for i in range(len(arr) - 1, -1, -1):\n        if arr[i] < arr[i - 1]:\n            return i\n    return -1\n", "num_llm_calls": 10}
{"task_id": "HumanEval/136", "completion": "\ndef largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n\n    # Initialize variables to store the largest negative and smallest positive integers\n    largest_negative = None\n    smallest_positive = None\n\n    # Iterate through the list\n    for num in lst:\n        if num < 0:\n            # Update largest_negative if current number is larger than the current largest_negative\n            if largest_negative is None or num > largest_negative:\n                largest_negative = num\n        elif num > 0:\n            # Update smallest_positive if current number is smaller than the current smallest_positive\n            if smallest_positive is None or num < smallest_positive:\n                smallest_positive = num\n\n    # Return the result as a tuple\n    return (largest_negative, smallest_positive)\n", "num_llm_calls": 4}
{"task_id": "HumanEval/137", "completion": "\ndef compare_one(a, b):\n    # Convert all inputs to strings and replace comma with dot for correct float conversion\n    str_a = str(a).replace(',', '.')\n    str_b = str(b).replace(',', '.')\n\n    # Try converting to float for comparison\n    try:\n        float_a = float(str_a)\n        float_b = float(str_b)\n    except ValueError:\n        # If conversion fails, interpret as strings\n        if str_a == str_b:\n            return None\n        return max(str_a, str_b)\n    \n    # Compare floats\n    if float_a > float_b:\n        return a\n    elif float_b > float_a:\n        return b\n    else:\n        return None\n", "num_llm_calls": 2}
{"task_id": "HumanEval/138", "completion": "\ndef is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\"\"\"\n    # The smallest sum of 4 positive even numbers is 2 + 2 + 2 + 2 = 8\n    # Therefore, n must be at least 8 and also even to be written as a sum of 4 positive even numbers\n    if n < 8 or n % 2 == 1:\n        return False\n    return True\n", "num_llm_calls": 2}
{"task_id": "HumanEval/139", "completion": "\ndef special_factorial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n    \n    if n == 0 or n == 1:\n        return 1\n\n    def factorial(x):\n        if x == 0 or x == 1:\n            return 1\n        return x * factorial(x - 1)\n    \n    result = 1\n    for i in range(n, 0, -1):\n        result *= factorial(i)\n    \n    return result\n", "num_llm_calls": 2}
{"task_id": "HumanEval/140", "completion": "\ndef fix_spaces(text: str) -> str:\n    result = []\n    space_count = 0\n\n    for char in text:\n        if char == ' ':\n            space_count += 1\n        else:\n            if space_count == 1:\n                result.append('_')\n            elif space_count > 1:\n                result.append('-')\n            space_count = 0\n            result.append(char)\n\n    # Handle trailing spaces\n    if space_count == 1:\n        result.append('_')\n    elif space_count > 1:\n        result.append('-')\n\n    return ''.join(result)\n", "num_llm_calls": 8}
{"task_id": "HumanEval/141", "completion": "\nimport re\n\ndef file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'.\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    # Regular expression to match the conditions\n    pattern = r'^[a-zA-Z][^\\d].*?(\\d{0,3})\\.(txt|exe|dll)$'\n    match = re.match(pattern, file_name)\n    \n    if match:\n        return 'Yes'\n    else:\n        return 'No'\n\n# Test cases\nprint(file_name_check(\"example.txt\"))  # => 'Yes'\nprint(file_name_check(\"1example.dll\"))  # => 'No'\nprint(file_name_check(\"test123.dll\"))  # => 'Yes'\nprint(file_name_check(\"4test.dll\"))    # => 'No' (it starts with a digit)\nprint(file_name_check(\".txt\"))         # => 'No' (empty start)\nprint(file_name_check(\"test..txt\"))    # => 'No' (multiple dots)\nprint(file_name_check(\"validName123.dll\")) # => 'Yes'\nprint(file_name_check(\"noFileEnding\"))  # => 'No' (no extension)\n", "num_llm_calls": 10}
{"task_id": "HumanEval/142", "completion": "\ndef sum_squares(lst):\n    \"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    \n    # Initialize the sum\n    total_sum = 0\n    \n    # Iterate over the list and apply the conditions\n    for idx, val in enumerate(lst):\n        if (idx + 1) % 3 == 0:\n            total_sum += val ** 2\n        elif (idx + 1) % 4 == 0 and (idx + 1) % 3 != 0:\n            total_sum += val ** 3\n    \n    return total_sum\n", "num_llm_calls": 10}
{"task_id": "HumanEval/143", "completion": "\ndef is_prime(n):\n    \"\"\"Check if a number is prime.\"\"\"\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef words_in_sentence(sentence):\n    \"\"\"\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n    \"\"\"\n    words = sentence.split()\n    prime_words = [word for word in words if is_prime(len(word))]\n    return \" \".join(prime_words)\n\n# Test cases\nprint(words_in_sentence(\"This is a test\"))  # Output: \"is\"\nprint(words_in_sentence(\"lets go for swimming\"))  # Output: \"go for\"\n", "num_llm_calls": 10}
{"task_id": "HumanEval/144", "completion": "\ndef simplify(x, n):\n    \"\"\"Your task is to implement a function that will simplify the expression\n    x * n. The function returns True if x * n evaluates to a whole number and False\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = True\n    simplify(\"1/6\", \"2/1\") = False\n    simplify(\"7/10\", \"10/2\") = False\n    \"\"\"\n\n    # Split the fractions into numerator and denominator\n    x_parts = x.split(\"/\")\n    n_parts = n.split(\"/\")\n    \n    # Multiply the numerators and denominators\n    numerator_product = int(x_parts[0]) * int(n_parts[0])\n    denominator_product = int(x_parts[1]) * int(n_parts[1])\n    \n    # Simplify by checking if numerator is divisible by the denominator\n    return numerator_product % denominator_product == 0\n\n# Test cases\nprint(simplify(\"1/5\", \"5/1\"))  # True\nprint(simplify(\"1/6\", \"2/1\"))  # False\nprint(simplify(\"7/10\", \"10/2\"))  # False\n", "num_llm_calls": 2}
{"task_id": "HumanEval/145", "completion": "\ndef order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n\n    def digit_sum(n):\n        \"\"\"Calculate the sum of digits of an integer.\"\"\"\n        return sum(int(d) for d in str(abs(n))) + (n < 0)\n\n    return sorted(nums, key=digit_sum, key=lambda idx: nums.index(idx) if idx in nums else -idx)\n", "num_llm_calls": 10}
{"task_id": "HumanEval/146", "completion": "\n\ndef specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\"\n\n    def is_odd_digit(n):\n        \"\"\"Check if a digit is odd.\"\"\"\n        return n in [1, 3, 5, 7, 9]\n\n    count = 0\n    for num in nums:\n        # Ignore negative numbers and numbers less than or equal to 10\n        if num <= 10:\n            continue\n        # Check if the first digit is odd\n        first_digit = int(str(abs(num))[0])\n        if not is_odd_digit(first_digit):\n            continue\n        # Check if the last digit is odd\n        last_digit = int(str(abs(num))[-1])\n        if is_odd_digit(last_digit):\n            count += 1\n\n    return count\n", "num_llm_calls": 10}
{"task_id": "HumanEval/147", "completion": "\ndef get_max_triples(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\n    # Generate the array a\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    \n    count = 0\n    \n    # Iterate over all possible triples (a[i], a[j], a[k]) with i < j < k\n    for i in range(n - 2):\n        for j in range(i + 1, n - 1):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n                    \n    return count\n", "num_llm_calls": 10}
{"task_id": "HumanEval/148", "completion": "\ndef bf(planet1, planet2):\n    \"\"\"\n    There are eight planets in our solar system: the closerst to the Sun \n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2. \n    The function should return a tuple containing all planets whose orbits are \n    located between the orbit of planet1 and the orbit of planet2, sorted by \n    the proximity to the sun. \n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names. \n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n    bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    \"\"\"\n\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    \n    # Check if both planets are valid\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    # Find the indices of the planets\n    index1 = planets.index(planet1)\n    index2 = planets.index(planet2)\n    \n    # Ensure index1 is less than index2 for slicing\n    if index1 > index2:\n        index1, index2 = index2, index1\n    \n    # Return the slice of planets between the two indices\n    return tuple(planets[index1 + 1:index2])\n", "num_llm_calls": 10}
{"task_id": "HumanEval/149", "completion": "\ndef sorted_list_sum(lst):\n    # Filter out strings with odd lengths\n    even_length_lst = [s for s in lst if len(s) % 2 == 0]\n    \n    # Sort the list first by length, then alphabetically\n    sorted_lst = sorted(even_length_lst, key=lambda x: (len(x), x))\n    \n    return sorted_lst\n", "num_llm_calls": 10}
{"task_id": "HumanEval/150", "completion": "\ndef x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n    \"\"\"\n\n    def is_prime(num):\n        \"\"\"Check if a number is prime.\"\"\"\n        if num <= 1:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    if is_prime(n):\n        return x\n    else:\n        return y\n\n", "num_llm_calls": 2}
{"task_id": "HumanEval/151", "completion": "\ndef double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    if not lst:\n        return 0\n\n    total = 0\n    for num in lst:\n        if isinstance(num, int) and num > 0 and num % 2 == 1:\n            total += num ** 2\n\n    return total\n", "num_llm_calls": 2}
{"task_id": "HumanEval/152", "completion": "\ndef compare(game, guess):\n    \"\"\"I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match. \n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n    \"\"\"\n\n    # Initialize an empty list to store the differences\n    differences = []\n\n    # Iterate through each index in the game and guess arrays\n    for i in range(len(game)):\n        # Calculate the absolute difference between the game score and the guess\n        diff = abs(game[i] - guess[i])\n        # Append the difference to the differences list\n        differences.append(diff)\n\n    # Return the list of differences\n    return differences\n", "num_llm_calls": 2}
{"task_id": "HumanEval/153", "completion": "\ndef Strongest_Extension(class_name, extensions):\n    def extension_strength(extension_name):\n        cap = sum(1 for c in extension_name if c.isupper())\n        sm = sum(1 for c in extension_name if c.islower())\n        return cap - sm\n\n    strongest_extension = max(extensions, key=extension_strength)\n    return f\"{class_name}.{strongest_extension}\"\n", "num_llm_calls": 8}
{"task_id": "HumanEval/154", "completion": "\ndef cycpattern_check(a: str, b: str) -> bool:\n    # Check if b or any of its rotations is a substring of a\n    for _ in range(len(b)):\n        if b in a:\n            return True\n        # Rotate b\n        b = b[1:] + b[0]\n    return False\n", "num_llm_calls": 2}
{"task_id": "HumanEval/155", "completion": "\ndef even_odd_count(num):\n    \"\"\"Given an integer, return a tuple that has the number of even and odd digits respectively.\n\n    Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    # Convert the number to a string and remove any non-digit characters (e.g., '-')\n    num_str = str(abs(num))\n    \n    # Initialize counters for even and odd digits\n    even_count, odd_count = 0, 0\n    \n    # Iterate through each character in the string\n    for char in num_str:\n        digit = int(char)\n        if digit % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    \n    return (even_count, odd_count)\n", "num_llm_calls": 2}
{"task_id": "HumanEval/156", "completion": "\ndef int_to_mini_roman(number):\n    # Define mappings for Roman numerals\n    roman_numerals = [\n        (1000, 'm'), (900, 'cm'), (500, 'd'), (400, 'cd'),\n        (100, 'c'), (90, 'xc'), (50, 'l'), (40, 'xl'),\n        (10, 'x'), (9, 'ix'), (5, 'v'), (4, 'iv'), (1, 'i')\n    ]\n    \n    roman_string = ''\n    \n    for value, numeral in roman_numerals:\n        while number >= value:\n            roman_string += numeral\n            number -= value\n    \n    return roman_string.lower()\n", "num_llm_calls": 4}
{"task_id": "HumanEval/157", "completion": "\ndef right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is a right angle (90 degrees).\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n    # First, sort the sides to ensure a and b are the shorter sides and c is the longest side\n    sides = sorted([a, b, c])\n    \n    # Check if the square of the longest side is equal to the sum of the squares of the other two sides\n    return sides[2]**2 == sides[0]**2 + sides[1]**2\n", "num_llm_calls": 10}
{"task_id": "HumanEval/158", "completion": "\nfrom typing import List\n\ndef find_max(words: List[str]) -> str:\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"aaaaaaa\"\n    \"\"\"\n    max_unique = 0\n    max_word = \"\"\n    \n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_unique or (unique_chars == max_unique and word < max_word):\n            max_unique = unique_chars\n            max_word = word\n            \n    return max_word\n", "num_llm_calls": 2}
{"task_id": "HumanEval/159", "completion": "\ndef eat(number, need, remaining):\n    total_eaten = number\n    carrots_to_eat = min(need, remaining)\n    \n    total_eaten += carrots_to_eat\n    remaining -= carrots_to_eat\n    \n    return [total_eaten, remaining]\n", "num_llm_calls": 10}
{"task_id": "HumanEval/160", "completion": "\ndef do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n\n    # Initialize the result with the first operand\n    result = operand[0]\n\n    # Iterate through the operators and operands to build and evaluate the expression\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            result += operand[i + 1]\n        elif operator[i] == '-':\n            result -= operand[i + 1]\n        elif operator[i] == '*':\n            result *= operand[i + 1]\n        elif operator[i] == '//':\n            result //= operand[i + 1]\n        elif operator[i] == '**':\n            result **= operand[i + 1]\n\n    return result\n", "num_llm_calls": 10}
{"task_id": "HumanEval/161", "completion": "\ndef solve(s):\n    \"\"\"You are given a string s.\n    If s[i] is a letter, reverse its case from lower to upper or vice versa, \n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples:\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\n\n    contains_letter = False\n    result = []\n\n    for char in s:\n        if char.isalpha():\n            contains_letter = True\n            result.append(char.swapcase())\n        else:\n            result.append(char)\n\n    if not contains_letter:\n        result.reverse()\n\n    return ''.join(result)\n", "num_llm_calls": 10}
{"task_id": "HumanEval/162", "completion": "\nimport hashlib\n\ndef string_to_md5(text: str) -> str:\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n\n    if text == \"\":\n        return None\n\n    md5_hash = hashlib.md5(text.encode()).hexdigest()\n    return md5_hash\n", "num_llm_calls": 10}
{"task_id": "HumanEval/163", "completion": "\ndef generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\"\n\n    # Ensure a is always less than b for simplicity\n    if a > b:\n        a, b = b, a\n\n    result = []\n    for num in range(a, b + 1):\n        for digit in str(num):\n            if int(digit) % 2 == 0:\n                result.append(int(digit))\n\n    # Remove duplicates and sort the result\n    result = sorted(set(result))\n\n    return result\n", "num_llm_calls": 10}
